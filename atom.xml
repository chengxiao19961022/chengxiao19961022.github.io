<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChengXiao&#39;s Blog</title>
  
  <subtitle>There u are</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chengxiao19961022.github.io/"/>
  <updated>2018-09-05T13:54:44.896Z</updated>
  <id>http://chengxiao19961022.github.io/</id>
  
  <author>
    <name>ChengXiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>经典算法</title>
    <link href="http://chengxiao19961022.github.io/2018/09/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://chengxiao19961022.github.io/2018/09/05/排序算法/</id>
    <published>2018-09-05T13:51:08.000Z</published>
    <updated>2018-09-05T13:54:44.896Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>一些经典算法</p></div><a id="more"></a><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 76947 on 2018/3/6.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sort.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> *left, <span class="keyword">int</span> *right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *left;</span><br><span class="line">    *left = *right;</span><br><span class="line">    *right = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> &amp;left, <span class="keyword">int</span> &amp;right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = left;</span><br><span class="line">    left = right;</span><br><span class="line">    right = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap3</span><span class="params">(<span class="keyword">int</span> &amp;left, <span class="keyword">int</span> &amp;right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (&amp;left != &amp;right)</span><br><span class="line">    &#123;</span><br><span class="line">        left ^= right;</span><br><span class="line">        right ^= left;</span><br><span class="line">        left ^= right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; a[i<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> key = a[i];</span><br><span class="line"><span class="comment">//        for (; j&gt;=0 ; --j) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            if( a[j] &lt;= key) break;</span></span><br><span class="line"><span class="comment">//            a[j+1] = a[j];</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">            a[i] = a[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">while</span> (a[j] &gt; key) &#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + <span class="number">1</span>] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellInsertSort</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> a[], <span class="keyword">int</span> dl)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = dl; i &lt; n; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[i-dl])&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> j = i-dl;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> key = a[i];</span><br><span class="line"></span><br><span class="line">            a[i] = a[i-dl];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(a[j] &gt; key)&#123;</span><br><span class="line"></span><br><span class="line">                a[j+dl] = a[j];</span><br><span class="line"></span><br><span class="line">                j -= dl;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            a[j+dl] = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    for (int k = 0; k &lt; n; ++k) &#123;</span></span><br><span class="line"><span class="comment">//        cout&lt;&lt;a[k]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dl = n/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (dl &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        ShellInsertSort(n,a,dl);</span><br><span class="line">        dl = dl/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*希尔排序:先将整个待排元素序列分割成若干子序列（由相隔某个“增量”的元素组成的）分别进行</span></span><br><span class="line"><span class="comment">直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，</span></span><br><span class="line"><span class="comment">再对全体元素进行一次直接插入排序（增量为1）。其时间复杂度为O(n^3/2),要好于直接插入排序的O(n^2) */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort2</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, increment;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (increment = N / <span class="number">2</span>; increment &gt; <span class="number">0</span>; increment /= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = increment; i &lt; N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= increment; j -= increment)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j - increment] &gt; tmp)</span><br><span class="line">                    arr[j] = arr[j - increment];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TongSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 寻找a[]中最大的元素</span></span><br><span class="line">    <span class="keyword">int</span> max = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max&lt;a[j]) max = a[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> b[max+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        ++b[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= max; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b[k]; ++i) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; k &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j+<span class="number">1</span>] &lt; a[j])&#123;</span><br><span class="line">                a[j] = a[j]^a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>] = a[j]^a[j+<span class="number">1</span>];</span><br><span class="line">                a[j] = a[j]^a[j+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[k] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> key = a[left];</span><br><span class="line">    <span class="keyword">int</span> i = left, j = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((i &lt; j)&amp;&amp;(a[j] &gt;= key))--j;</span><br><span class="line">        <span class="keyword">while</span> ((i &lt; j)&amp;&amp;(a[i] &lt;= key))++i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = a[i];</span><br><span class="line">    a[i] = a[left];</span><br><span class="line">    a[left] = k;</span><br><span class="line"></span><br><span class="line">    quickSort(a, left, i<span class="number">-1</span>);</span><br><span class="line">    quickSort(a, i+<span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************************/</span></span><br><span class="line"><span class="comment">/* 堆是具有下列性质的完全二叉树:每个节点的值都大于或等于其左右孩子节点的值,称为大顶堆；</span></span><br><span class="line"><span class="comment">* 或者每个节点的值都小于或等于其左右孩子节点的值,称为小顶堆*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*堆排序就是利用堆进行排序的方法.基本思想是:将待排序的序列构造成一个大顶堆.此时,整个序列的最大值就是堆顶</span></span><br><span class="line"><span class="comment">* 的根结点.将它移走(其实就是将其与堆数组的末尾元素交换, 此时末尾元素就是最大值),然后将剩余的n-1个序列重新</span></span><br><span class="line"><span class="comment">* 构造成一个堆,这样就会得到n个元素的次大值.如此反复执行,便能得到一个有序序列了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 时间复杂度为 O(nlogn),好于冒泡,简单选择,直接插入的O(n^2) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> leftChild(i) (2*(i) + 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">percDown</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> i, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">    <span class="keyword">int</span> child;</span><br><span class="line">    <span class="comment">// 为了找到arr[i]的位置</span></span><br><span class="line">    <span class="keyword">while</span>(leftChild(i) &lt; N)&#123;</span><br><span class="line">        child = leftChild(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (child != N - <span class="number">1</span> &amp;&amp; arr[child+<span class="number">1</span>] &gt; arr[child])&#123;</span><br><span class="line">            ++child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[child] &gt; tmp)&#123;</span><br><span class="line">            arr[i] = arr[child];</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i = child;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N/<span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        percDown(arr, i, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次把最大值放在树尾，并整理剩下的堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = N<span class="number">-1</span>; j &gt;= <span class="number">0</span> ; --j) &#123;</span><br><span class="line">        swap2(arr[<span class="number">0</span>], arr[j]);</span><br><span class="line">        percDown(arr, <span class="number">0</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 简单选择排序(simple selection sort) 就是通过n-i次关键字之间的比较,从n-i+1</span></span><br><span class="line"><span class="comment">* 个记录中选择关键字最小的记录,并和第i(1&lt;=i&lt;=n)个记录交换之</span></span><br><span class="line"><span class="comment">* 尽管与冒泡排序同为O(n^2),但简单选择排序的性能要略优于冒泡排序 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, Mindex;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Mindex = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[Mindex])</span><br><span class="line">                Mindex = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swap1(&amp;arr[i], &amp;arr[Mindex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/morewindows/article/details/6678165</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将有二个有序数列a[first...mid]和a[mid+1...last]合并。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergearray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> first, <span class="keyword">int</span> mid, <span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = first, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = mid,   n = last;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= m &amp;&amp; j &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[j])</span><br><span class="line">            temp.push_back(a[i++]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp.push_back(a[j++]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= m)</span><br><span class="line">        temp.push_back(a[i++]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= n)</span><br><span class="line">        temp.push_back(a[j++]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; temp.size(); i++)</span><br><span class="line">        a[first + i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first &lt; last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (first + last) / <span class="number">2</span>;</span><br><span class="line">        mergesort(a, first, mid);    <span class="comment">//左边有序</span></span><br><span class="line">        mergesort(a, mid + <span class="number">1</span>, last); <span class="comment">//右边有序</span></span><br><span class="line">        mergearray(a, first, mid, last); <span class="comment">//再将二个有序数列合并</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    int *p = new int[n];</span></span><br><span class="line"><span class="comment">//    if (p == NULL)</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line">    mergesort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//    delete[] p;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;一些经典算法&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Antlr4使用教程</title>
    <link href="http://chengxiao19961022.github.io/2018/09/04/Antlr4%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://chengxiao19961022.github.io/2018/09/04/Antlr4使用教程/</id>
    <published>2018-09-04T05:54:27.000Z</published>
    <updated>2018-09-04T09:09:34.634Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>Antlr是一款强大的语法分析器生成工具，可用于读取、处理、执行和翻译结构化的文本或二进制文件。它被广泛用于学术领域和工业生产领域，是众多语言、工具和框架的基石。</p></div><a id="more"></a><h1 id="安装及配置-unix"><a href="#安装及配置-unix" class="headerlink" title="安装及配置(unix)"></a>安装及配置(unix)</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可直接下载jar包或用命令行安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib</span><br><span class="line"></span><br><span class="line">$ curl -O http://www.antlr.org/download/antlr-4.7.1-complete.jar</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!~/.bash_profile</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">export</span> CLASSPATH=<span class="string">".:/usr/local/lib/antlr-4.0-complete.jar:<span class="variable">$CLASSPATH</span>"</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">alias</span> antlr4=<span class="string">'java -jar /usr/local/lib/antlr-4.7.1-complete.jar'</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">alias</span> grun=<span class="string">'java org.antlr.v4.gui.TestRig'</span></span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ antlr4</span><br><span class="line"></span><br><span class="line">$ grun</span><br></pre></td></tr></table></figure><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="词法和语法"><a href="#词法和语法" class="headerlink" title="词法和语法"></a>词法和语法</h2><ul><li>语言：一门语言是一个有效语句的集合。语句由词组组成，子词组又有更小的子词组组成，依次类推。</li><li>语法：语法定义了语言的语义规则。语法中的每条规则定义了一种词组结构。</li><li>语义树或语法分析树：代表了语句的结构，其中的每个子树的根节点都使用一个抽象的名字给其包含的元素命名。即字子树的根节点对应了语法规则的名字。树的叶子节点是语句中的符号或词法符号。</li><li>词法符号：是一门语言的基本词汇符号，它们可以代表像是“标识符”这样的一类符号，也可以代表一个单一的运算符，或者代表一个关键字。</li><li>词法分析器或者词法符号生成器：将输入的字符序列分解成一系列词法符号。一个此法分析器负责分析词法。</li><li>语法分析器：语法分析器通过检查语句的结构是否符合语法规则的定义来验证该语句在特定语言中是否合法。语法分析的过程好比是走迷宫，通过比较语句中的地板上的单词来从入口到出口。ANTLR能够生成被称为ALL(<em>)的自顶向下的语法分析器。ALL(</em>)是指它可以利用剩余的所有输入文本来进行决策。自顶向下的语法分析器以结果为导向，首先匹配最粗粒度的规则。</li></ul><hr><ul><li>词法符号比如INT、STRING、ID等基本的token，词法分析（lexical analysis）又叫词法符号化（tokenizing）。</li><li>在语法分析的过程会建立语法分析树或叫句法树，语法分析树的内部节点是词组名，子根节点表达的是语法文件中的规则(rule)，也叫做rulenode，也叫做context对象，叶子节点永远是输入的词法符号，也叫做terminalnode。</li></ul><p><img src="https://wx3.sinaimg.cn/mw1024/005B4KCnly1fuxi5ocbaqj30ow06uq3h.jpg" alt=""></p><p><img src="https://wx2.sinaimg.cn/mw1024/005B4KCnly1fuxi7brt8mj30h10fndgq.jpg" alt=""></p><p><img src="https://wx2.sinaimg.cn/mw1024/005B4KCnly1fuxi84okgwj30qd0amjs1.jpg" alt=""></p><h2 id="语法分析树监听器和访问器"><a href="#语法分析树监听器和访问器" class="headerlink" title="语法分析树监听器和访问器"></a>语法分析树监听器和访问器</h2><h1 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h1><h2 id="chap3"><a href="#chap3" class="headerlink" title="chap3"></a>chap3</h2><h3 id="ArrayInit"><a href="#ArrayInit" class="headerlink" title="ArrayInit"></a>ArrayInit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/** Grammars always start with a grammar header. This grammar is called</span><br><span class="line"> *  ArrayInit and must match the filename: ArrayInit.g4</span><br><span class="line"> */</span><br><span class="line">grammar ArrayInit;</span><br><span class="line"></span><br><span class="line">/** A rule called init that matches comma-separated values between &#123;...&#125;. */</span><br><span class="line">init  : &apos;&#123;&apos; value (&apos;,&apos; value)* &apos;&#125;&apos; ;  // must match at least one value</span><br><span class="line"></span><br><span class="line">/** A value can be either a nested array/struct or a simple integer (INT) */</span><br><span class="line">value : init</span><br><span class="line">      | INT</span><br><span class="line">      ;</span><br><span class="line"></span><br><span class="line">// parser rules start with lowercase letters, lexer rules with uppercase</span><br><span class="line">INT :   [0-9]+ ;             // Define token INT as one or more digits</span><br><span class="line">WS  :   [ \t\r\n]+ -&gt; skip ; // Define whitespace rule, toss it out</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ antlr4 ArrayInit.g4 <span class="comment"># Generate parser and lexer using antlr4 alias</span></span><br><span class="line"></span><br><span class="line">$ javac ArrayInit*.java <span class="comment"># Compile ANTLR-generated code</span></span><br><span class="line"></span><br><span class="line">➾ $ grun ArrayInit init -tokens</span><br><span class="line">➾ &#123;99, 3, 451&#125;</span><br><span class="line">➾EOF</span><br><span class="line">❮ [@0,0:0=<span class="string">'&#123;'</span>,&lt;1&gt;,1:0]</span><br><span class="line">[@1,1:2=<span class="string">'99'</span>,&lt;4&gt;,1:1]</span><br><span class="line">[@2,3:3=<span class="string">','</span>,&lt;2&gt;,1:3]</span><br><span class="line">[@3,5:5=<span class="string">'3'</span>,&lt;4&gt;,1:5]</span><br><span class="line">[@4,6:6=<span class="string">','</span>,&lt;2&gt;,1:6]</span><br><span class="line">[@5,8:10=<span class="string">'451'</span>,&lt;4&gt;,1:8]</span><br><span class="line">[@6,11:11=<span class="string">'&#125;'</span>,&lt;3&gt;,1:11]</span><br><span class="line">[@7,13:12=<span class="string">'&lt;EOF&gt;'</span>,&lt;-1&gt;,2:0]</span><br><span class="line"></span><br><span class="line">➾ $ grun ArrayInit init -tree</span><br><span class="line">➾ &#123;99, 3, 451&#125;</span><br><span class="line">➾EOF</span><br><span class="line">❮ (init &#123; (value 99) , (value 3) , (value 451) &#125;)</span><br><span class="line"></span><br><span class="line">➾ $ grun ArrayInit init -gui</span><br><span class="line">➾ &#123;1,&#123;2,3&#125;,4&#125;</span><br><span class="line">➾EOF</span><br></pre></td></tr></table></figure><h2 id="chap4"><a href="#chap4" class="headerlink" title="chap4"></a>chap4</h2><h3 id="Expr"><a href="#Expr" class="headerlink" title="Expr"></a>Expr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">grammar Expr;</span><br><span class="line"></span><br><span class="line">/** The start rule; begin parsing here. */</span><br><span class="line">prog:   stat+ ;</span><br><span class="line"></span><br><span class="line">stat:   expr NEWLINE</span><br><span class="line">    |   ID &apos;=&apos; expr NEWLINE</span><br><span class="line">    |   NEWLINE</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">expr:   INT</span><br><span class="line">    |   ID</span><br><span class="line">    |   &apos;(&apos; expr &apos;)&apos;</span><br><span class="line">    |   expr (&apos;*&apos;|&apos;/&apos;) expr</span><br><span class="line">    |   expr (&apos;+&apos;|&apos;-&apos;) expr</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">ID  :   [a-zA-Z]+ ;      // match identifiers &lt;label id=&quot;code.tour.expr.3&quot;/&gt;</span><br><span class="line">INT :   [0-9]+ ;         // match integers</span><br><span class="line">NEWLINE:&apos;\r&apos;? &apos;\n&apos; ;     // return newlines to parser (is end-statement signal)</span><br><span class="line">WS  :   [ \t]+ -&gt; skip ; // toss out whitespace</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ExprJoyRide.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExprJoyRide</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        ExprLexer lexer = <span class="keyword">new</span> ExprLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        ExprParser parser = <span class="keyword">new</span> ExprParser(tokens);</span><br><span class="line">        ParseTree tree = parser.prog(); <span class="comment">// parse; start at prog &lt;label id="code.tour.main.6"/&gt;</span></span><br><span class="line">        System.out.println(tree.toStringTree(parser)); <span class="comment">// print tree as text &lt;label id="code.tour.main.7"/&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">193</span><br><span class="line">a = 5</span><br><span class="line">b = 6</span><br><span class="line">a+b*2</span><br><span class="line">(1+2)*3</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ antlr4 Expr.g4</span><br><span class="line"></span><br><span class="line">$ javac Expr*.java ExprJoyRide.java</span><br><span class="line"></span><br><span class="line">$ grun Expr prog -gui t.expr <span class="comment"># launches org.antlr.v4.runtime.misc.TestRig</span></span><br><span class="line"></span><br><span class="line">$ java ExprJoyRide <span class="built_in">test</span></span><br><span class="line">❮ (prog</span><br><span class="line">(<span class="built_in">stat</span> (expr 193) \n)</span><br><span class="line">(<span class="built_in">stat</span> a = (expr 5) \n)</span><br><span class="line">(<span class="built_in">stat</span> b = (expr 6) \n)</span><br><span class="line">(<span class="built_in">stat</span> (expr (expr a) + (expr (expr b) * (expr 2))) \n)</span><br><span class="line">(<span class="built_in">stat</span> (expr (expr ( (expr (expr 1) + (expr 2)) )) * (expr 3)) \n)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="LibExpr"><a href="#LibExpr" class="headerlink" title="LibExpr"></a>LibExpr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// CommonLexerRules.g4</span><br><span class="line">lexer grammar CommonLexerRules; // note &quot;lexer grammar&quot;</span><br><span class="line"></span><br><span class="line">ID  :   [a-zA-Z]+ ;      // match identifiers</span><br><span class="line">INT :   [0-9]+ ;         // match integers</span><br><span class="line">NEWLINE:&apos;\r&apos;? &apos;\n&apos; ;     // return newlines to parser (end-statement signal)</span><br><span class="line">WS  :   [ \t]+ -&gt; skip ; // toss out whitespace</span><br><span class="line"></span><br><span class="line">// LibExpr.g4</span><br><span class="line">grammar LibExpr;         // Rename to distinguish from original</span><br><span class="line">import CommonLexerRules; // includes all rules from CommonLexerRules.g4</span><br><span class="line">/** The start rule; begin parsing here. */</span><br><span class="line">prog:   stat+ ;</span><br><span class="line"></span><br><span class="line">stat:   expr NEWLINE</span><br><span class="line">    |   ID &apos;=&apos; expr NEWLINE</span><br><span class="line">    |   NEWLINE</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">expr:   expr (&apos;*&apos;|&apos;/&apos;) expr</span><br><span class="line">    |   expr (&apos;+&apos;|&apos;-&apos;) expr</span><br><span class="line">    |   INT</span><br><span class="line">    |   ID</span><br><span class="line">    |   &apos;(&apos; expr &apos;)&apos;</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ExprJoyRide.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExprJoyRide</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        LibExprLexer lexer = <span class="keyword">new</span> LibExprLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        LibExprParser parser = <span class="keyword">new</span> LibExprParser(tokens);</span><br><span class="line">        ParseTree tree = parser.prog(); <span class="comment">// parse; start at prog &lt;label id="code.tour.main.6"/&gt;</span></span><br><span class="line">        System.out.println(tree.toStringTree(parser)); <span class="comment">// print tree as text &lt;label id="code.tour.main.7"/&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LabeledExpr"><a href="#LabeledExpr" class="headerlink" title="LabeledExpr"></a>LabeledExpr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">grammar LabeledExpr; // rename to distinguish from Expr.g4</span><br><span class="line"></span><br><span class="line">prog:   stat+ ;</span><br><span class="line"></span><br><span class="line">stat:   expr NEWLINE                # printExpr</span><br><span class="line">    |   ID &apos;=&apos; expr NEWLINE         # assign</span><br><span class="line">    |   NEWLINE                     # blank</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">expr:   expr op=(&apos;*&apos;|&apos;/&apos;) expr      # MulDiv</span><br><span class="line">    |   expr op=(&apos;+&apos;|&apos;-&apos;) expr      # AddSub</span><br><span class="line">    |   INT                         # int</span><br><span class="line">    |   ID                          # id</span><br><span class="line">    |   &apos;(&apos; expr &apos;)&apos;                # parens</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">MUL :   &apos;*&apos; ; // assigns token name to &apos;*&apos; used above in grammar</span><br><span class="line">DIV :   &apos;/&apos; ;</span><br><span class="line">ADD :   &apos;+&apos; ;</span><br><span class="line">SUB :   &apos;-&apos; ;</span><br><span class="line">ID  :   [a-zA-Z]+ ;      // match identifiers</span><br><span class="line">INT :   [0-9]+ ;         // match integers</span><br><span class="line">NEWLINE:&apos;\r&apos;? &apos;\n&apos; ;     // return newlines to parser (is end-statement signal)</span><br><span class="line">WS  :   [ \t]+ -&gt; skip ; // toss out whitespace</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: EvalVisitor.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvalVisitor</span> <span class="keyword">extends</span> <span class="title">LabeledExprBaseVisitor</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** "memory" for our calculator; variable/value pairs go here */</span></span><br><span class="line">    Map&lt;String, Integer&gt; memory = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** ID '=' expr NEWLINE */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">visitAssign</span><span class="params">(LabeledExprParser.AssignContext ctx)</span> </span>&#123;</span><br><span class="line">        String id = ctx.ID().getText();  <span class="comment">// id is left-hand side of '='</span></span><br><span class="line">        <span class="keyword">int</span> value = visit(ctx.expr());   <span class="comment">// compute value of expression on right</span></span><br><span class="line">        memory.put(id, value);           <span class="comment">// store it in our memory</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** expr NEWLINE */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">visitPrintExpr</span><span class="params">(LabeledExprParser.PrintExprContext ctx)</span> </span>&#123;</span><br><span class="line">        Integer value = visit(ctx.expr()); <span class="comment">// evaluate the expr child</span></span><br><span class="line">        System.out.println(value);         <span class="comment">// print the result</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;                          <span class="comment">// return dummy value</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** INT */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">visitInt</span><span class="params">(LabeledExprParser.IntContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(ctx.INT().getText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** ID */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">visitId</span><span class="params">(LabeledExprParser.IdContext ctx)</span> </span>&#123;</span><br><span class="line">        String id = ctx.ID().getText();</span><br><span class="line">        <span class="keyword">if</span> ( memory.containsKey(id) ) <span class="keyword">return</span> memory.get(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** expr op=('*'|'/') expr */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">visitMulDiv</span><span class="params">(LabeledExprParser.MulDivContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = visit(ctx.expr(<span class="number">0</span>));  <span class="comment">// get value of left subexpression</span></span><br><span class="line">        <span class="keyword">int</span> right = visit(ctx.expr(<span class="number">1</span>)); <span class="comment">// get value of right subexpression</span></span><br><span class="line">        <span class="keyword">if</span> ( ctx.op.getType() == LabeledExprParser.MUL ) <span class="keyword">return</span> left * right;</span><br><span class="line">        <span class="keyword">return</span> left / right; <span class="comment">// must be DIV</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** expr op=('+'|'-') expr */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">visitAddSub</span><span class="params">(LabeledExprParser.AddSubContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = visit(ctx.expr(<span class="number">0</span>));  <span class="comment">// get value of left subexpression</span></span><br><span class="line">        <span class="keyword">int</span> right = visit(ctx.expr(<span class="number">1</span>)); <span class="comment">// get value of right subexpression</span></span><br><span class="line">        <span class="keyword">if</span> ( ctx.op.getType() == LabeledExprParser.ADD ) <span class="keyword">return</span> left + right;</span><br><span class="line">        <span class="keyword">return</span> left - right; <span class="comment">// must be SUB</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** '(' expr ')' */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">visitParens</span><span class="params">(LabeledExprParser.ParensContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> visit(ctx.expr()); <span class="comment">// return child expr's value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Calc.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        LabeledExprLexer lexer = <span class="keyword">new</span> LabeledExprLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        LabeledExprParser parser = <span class="keyword">new</span> LabeledExprParser(tokens);</span><br><span class="line">        ParseTree tree = parser.prog(); <span class="comment">// parse</span></span><br><span class="line"></span><br><span class="line">        EvalVisitor eval = <span class="keyword">new</span> EvalVisitor();</span><br><span class="line">        eval.visit(tree);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">193</span><br><span class="line">a = 5</span><br><span class="line">b = 6</span><br><span class="line">a+b*2</span><br><span class="line">(1+2)*3</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ java Calc <span class="built_in">test</span></span><br><span class="line">193</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">17</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="ExtractJava"><a href="#ExtractJava" class="headerlink" title="ExtractJava"></a>ExtractJava</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br></pre></td><td class="code"><pre><span class="line">// Java.g4</span><br><span class="line">/** Java 1.6 grammar (ANTLR v4). Derived from</span><br><span class="line"></span><br><span class="line">    http://docs.oracle.com/javase/specs/jls/se7/jls7.pdf</span><br><span class="line"></span><br><span class="line">    and JavaParser.g from ANTLR v3</span><br><span class="line"> */</span><br><span class="line">grammar Java;</span><br><span class="line"></span><br><span class="line">@lexer::members &#123;</span><br><span class="line">  protected boolean enumIsKeyword = true;</span><br><span class="line">  protected boolean assertIsKeyword = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// starting point for parsing a java file</span><br><span class="line">compilationUnit</span><br><span class="line">    :   packageDeclaration? importDeclaration* typeDeclaration*</span><br><span class="line">        EOF</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">packageDeclaration</span><br><span class="line">    :   &apos;package&apos; qualifiedName &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">importDeclaration</span><br><span class="line">    :   &apos;import&apos; &apos;static&apos;? qualifiedName (&apos;.&apos; &apos;*&apos;)? &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">typeDeclaration</span><br><span class="line">    :   classOrInterfaceModifier*</span><br><span class="line">        (   classDeclaration</span><br><span class="line">        |   interfaceDeclaration</span><br><span class="line">        |   enumDeclaration</span><br><span class="line">        )</span><br><span class="line">    |   &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">classDeclaration</span><br><span class="line">    :   &apos;class&apos; Identifier typeParameters? (&apos;extends&apos; type)?</span><br><span class="line">        (&apos;implements&apos; typeList)?</span><br><span class="line">        classBody</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">enumDeclaration</span><br><span class="line">    :   ENUM Identifier (&apos;implements&apos; typeList)? enumBody</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">interfaceDeclaration</span><br><span class="line">    :   normalInterfaceDeclaration</span><br><span class="line">    |   annotationTypeDeclaration</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">classOrInterfaceModifier</span><br><span class="line">    :   annotation   // class or interface</span><br><span class="line">    |   &apos;public&apos;     // class or interface</span><br><span class="line">    |   &apos;protected&apos;  // class or interface</span><br><span class="line">    |   &apos;private&apos;    // class or interface</span><br><span class="line">    |   &apos;abstract&apos;   // class or interface</span><br><span class="line">    |   &apos;static&apos;     // class or interface</span><br><span class="line">    |   &apos;final&apos;      // class only -- does not apply to interfaces</span><br><span class="line">    |   &apos;strictfp&apos;   // class or interface</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">modifiers</span><br><span class="line">    :   modifier*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">typeParameters</span><br><span class="line">    :   &apos;&lt;&apos; typeParameter (&apos;,&apos; typeParameter)* &apos;&gt;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">typeParameter</span><br><span class="line">    :   Identifier (&apos;extends&apos; typeBound)?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">typeBound</span><br><span class="line">    :   type (&apos;&amp;&apos; type)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">enumBody</span><br><span class="line">    :   &apos;&#123;&apos; enumConstants? &apos;,&apos;? enumBodyDeclarations? &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">enumConstants</span><br><span class="line">    :   enumConstant (&apos;,&apos; enumConstant)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">enumConstant</span><br><span class="line">    :   annotations? Identifier arguments? classBody?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">enumBodyDeclarations</span><br><span class="line">    :   &apos;;&apos; (classBodyDeclaration)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">normalInterfaceDeclaration</span><br><span class="line">    :   &apos;interface&apos; Identifier typeParameters? (&apos;extends&apos; typeList)? interfaceBody</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">typeList</span><br><span class="line">    :   type (&apos;,&apos; type)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">classBody</span><br><span class="line">    :   &apos;&#123;&apos; classBodyDeclaration* &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">interfaceBody</span><br><span class="line">    :   &apos;&#123;&apos; interfaceBodyDeclaration* &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">classBodyDeclaration</span><br><span class="line">    :   &apos;;&apos;</span><br><span class="line">    |   &apos;static&apos;? block</span><br><span class="line">    |   modifiers member</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">member</span><br><span class="line">    :   genericMethodDeclaration</span><br><span class="line">    |   methodDeclaration</span><br><span class="line">    |   fieldDeclaration</span><br><span class="line">    |   constructorDeclaration</span><br><span class="line">    |   interfaceDeclaration</span><br><span class="line">    |   classDeclaration</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">methodDeclaration</span><br><span class="line">    :   type Identifier formalParameters (&apos;[&apos; &apos;]&apos;)* methodDeclarationRest</span><br><span class="line">    |   &apos;void&apos; Identifier formalParameters methodDeclarationRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">methodDeclarationRest</span><br><span class="line">    :   (&apos;throws&apos; qualifiedNameList)?</span><br><span class="line">        (   methodBody</span><br><span class="line">        |   &apos;;&apos;</span><br><span class="line">        )</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">genericMethodDeclaration</span><br><span class="line">    :   typeParameters methodDeclaration</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">fieldDeclaration</span><br><span class="line">    :   type variableDeclarators &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">constructorDeclaration</span><br><span class="line">    :   typeParameters? Identifier formalParameters</span><br><span class="line">        (&apos;throws&apos; qualifiedNameList)? constructorBody</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">interfaceBodyDeclaration</span><br><span class="line">    :   modifiers interfaceMemberDecl</span><br><span class="line">    |   &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">interfaceMemberDecl</span><br><span class="line">    :   interfaceMethodOrFieldDecl</span><br><span class="line">    |   interfaceGenericMethodDecl</span><br><span class="line">    |   &apos;void&apos; Identifier voidInterfaceMethodDeclaratorRest</span><br><span class="line">    |   interfaceDeclaration</span><br><span class="line">    |   classDeclaration</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">interfaceMethodOrFieldDecl</span><br><span class="line">    :   type Identifier interfaceMethodOrFieldRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">interfaceMethodOrFieldRest</span><br><span class="line">    :   constantDeclaratorsRest &apos;;&apos;</span><br><span class="line">    |   interfaceMethodDeclaratorRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">voidMethodDeclaratorRest</span><br><span class="line">    :   formalParameters (&apos;throws&apos; qualifiedNameList)?</span><br><span class="line">        (   methodBody</span><br><span class="line">        |   &apos;;&apos;</span><br><span class="line">        )</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">interfaceMethodDeclaratorRest</span><br><span class="line">    :   formalParameters (&apos;[&apos; &apos;]&apos;)* (&apos;throws&apos; qualifiedNameList)? &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">interfaceGenericMethodDecl</span><br><span class="line">    :   typeParameters (type | &apos;void&apos;) Identifier</span><br><span class="line">        interfaceMethodDeclaratorRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">voidInterfaceMethodDeclaratorRest</span><br><span class="line">    :   formalParameters (&apos;throws&apos; qualifiedNameList)? &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">constantDeclarator</span><br><span class="line">    :   Identifier constantDeclaratorRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">variableDeclarators</span><br><span class="line">    :   variableDeclarator (&apos;,&apos; variableDeclarator)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">variableDeclarator</span><br><span class="line">    :   variableDeclaratorId (&apos;=&apos; variableInitializer)?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">constantDeclaratorsRest</span><br><span class="line">    :   constantDeclaratorRest (&apos;,&apos; constantDeclarator)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">constantDeclaratorRest</span><br><span class="line">    :   (&apos;[&apos; &apos;]&apos;)* &apos;=&apos; variableInitializer</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">variableDeclaratorId</span><br><span class="line">    :   Identifier (&apos;[&apos; &apos;]&apos;)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">variableInitializer</span><br><span class="line">    :   arrayInitializer</span><br><span class="line">    |   expression</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">arrayInitializer</span><br><span class="line">    :   &apos;&#123;&apos; (variableInitializer (&apos;,&apos; variableInitializer)* (&apos;,&apos;)? )? &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">modifier</span><br><span class="line">    :   annotation</span><br><span class="line">    |   &apos;public&apos;</span><br><span class="line">    |   &apos;protected&apos;</span><br><span class="line">    |   &apos;private&apos;</span><br><span class="line">    |   &apos;static&apos;</span><br><span class="line">    |   &apos;abstract&apos;</span><br><span class="line">    |   &apos;final&apos;</span><br><span class="line">    |   &apos;native&apos;</span><br><span class="line">    |   &apos;synchronized&apos;</span><br><span class="line">    |   &apos;transient&apos;</span><br><span class="line">    |   &apos;volatile&apos;</span><br><span class="line">    |   &apos;strictfp&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">packageOrTypeName</span><br><span class="line">    :   qualifiedName</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">enumConstantName</span><br><span class="line">    :   Identifier</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">typeName</span><br><span class="line">    :   qualifiedName</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">type:   classOrInterfaceType (&apos;[&apos; &apos;]&apos;)*</span><br><span class="line">    |   primitiveType (&apos;[&apos; &apos;]&apos;)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">classOrInterfaceType</span><br><span class="line">    :   Identifier typeArguments? (&apos;.&apos; Identifier typeArguments? )*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">primitiveType</span><br><span class="line">    :   &apos;boolean&apos;</span><br><span class="line">    |   &apos;char&apos;</span><br><span class="line">    |   &apos;byte&apos;</span><br><span class="line">    |   &apos;short&apos;</span><br><span class="line">    |   &apos;int&apos;</span><br><span class="line">    |   &apos;long&apos;</span><br><span class="line">    |   &apos;float&apos;</span><br><span class="line">    |   &apos;double&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">variableModifier</span><br><span class="line">    :   &apos;final&apos;</span><br><span class="line">    |   annotation</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">typeArguments</span><br><span class="line">    :   &apos;&lt;&apos; typeArgument (&apos;,&apos; typeArgument)* &apos;&gt;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">typeArgument</span><br><span class="line">    :   type</span><br><span class="line">    |   &apos;?&apos; ((&apos;extends&apos; | &apos;super&apos;) type)?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">qualifiedNameList</span><br><span class="line">    :   qualifiedName (&apos;,&apos; qualifiedName)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">formalParameters</span><br><span class="line">    :   &apos;(&apos; formalParameterDecls? &apos;)&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">formalParameterDecls</span><br><span class="line">    :   variableModifiers type formalParameterDeclsRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">formalParameterDeclsRest</span><br><span class="line">    :   variableDeclaratorId (&apos;,&apos; formalParameterDecls)?</span><br><span class="line">    |   &apos;...&apos; variableDeclaratorId</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">methodBody</span><br><span class="line">    :   block</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">constructorBody</span><br><span class="line">    :   &apos;&#123;&apos; explicitConstructorInvocation? blockStatement* &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">explicitConstructorInvocation</span><br><span class="line">    :   nonWildcardTypeArguments? (&apos;this&apos; | &apos;super&apos;) arguments &apos;;&apos;</span><br><span class="line">    |   primary &apos;.&apos; nonWildcardTypeArguments? &apos;super&apos; arguments &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">qualifiedName</span><br><span class="line">    :   Identifier (&apos;.&apos; Identifier)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">literal</span><br><span class="line">    :   integerLiteral</span><br><span class="line">    |   FloatingPointLiteral</span><br><span class="line">    |   CharacterLiteral</span><br><span class="line">    |   StringLiteral</span><br><span class="line">    |   booleanLiteral</span><br><span class="line">    |   &apos;null&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">integerLiteral</span><br><span class="line">    :   HexLiteral</span><br><span class="line">    |   OctalLiteral</span><br><span class="line">    |   DecimalLiteral</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">booleanLiteral</span><br><span class="line">    :   &apos;true&apos;</span><br><span class="line">    |   &apos;false&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">// ANNOTATIONS</span><br><span class="line"></span><br><span class="line">annotations</span><br><span class="line">    :   annotation+</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotation</span><br><span class="line">    :   &apos;@&apos; annotationName ( &apos;(&apos; ( elementValuePairs | elementValue )? &apos;)&apos; )?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotationName</span><br><span class="line">    : Identifier (&apos;.&apos; Identifier)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">elementValuePairs</span><br><span class="line">    :   elementValuePair (&apos;,&apos; elementValuePair)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">elementValuePair</span><br><span class="line">    :   Identifier &apos;=&apos; elementValue</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">elementValue</span><br><span class="line">    :   expression</span><br><span class="line">    |   annotation</span><br><span class="line">    |   elementValueArrayInitializer</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">elementValueArrayInitializer</span><br><span class="line">    :   &apos;&#123;&apos; (elementValue (&apos;,&apos; elementValue)*)? (&apos;,&apos;)? &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotationTypeDeclaration</span><br><span class="line">    :   &apos;@&apos; &apos;interface&apos; Identifier annotationTypeBody</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotationTypeBody</span><br><span class="line">    :   &apos;&#123;&apos; (annotationTypeElementDeclaration)* &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotationTypeElementDeclaration</span><br><span class="line">    :   modifiers annotationTypeElementRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotationTypeElementRest</span><br><span class="line">    :   type annotationMethodOrConstantRest &apos;;&apos;</span><br><span class="line">    |   classDeclaration &apos;;&apos;?</span><br><span class="line">    |   normalInterfaceDeclaration &apos;;&apos;?</span><br><span class="line">    |   enumDeclaration &apos;;&apos;?</span><br><span class="line">    |   annotationTypeDeclaration &apos;;&apos;?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotationMethodOrConstantRest</span><br><span class="line">    :   annotationMethodRest</span><br><span class="line">    |   annotationConstantRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotationMethodRest</span><br><span class="line">    :   Identifier &apos;(&apos; &apos;)&apos; defaultValue?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">annotationConstantRest</span><br><span class="line">    :   variableDeclarators</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">defaultValue</span><br><span class="line">    :   &apos;default&apos; elementValue</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">// STATEMENTS / BLOCKS</span><br><span class="line"></span><br><span class="line">block</span><br><span class="line">    :   &apos;&#123;&apos; blockStatement* &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">blockStatement</span><br><span class="line">    :   localVariableDeclarationStatement</span><br><span class="line">    |   classDeclaration</span><br><span class="line">    |   interfaceDeclaration</span><br><span class="line">    |   statement</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">localVariableDeclarationStatement</span><br><span class="line">    :    localVariableDeclaration &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">localVariableDeclaration</span><br><span class="line">    :   variableModifiers type variableDeclarators</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">variableModifiers</span><br><span class="line">    :   variableModifier*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">statement</span><br><span class="line">    : block</span><br><span class="line">    |   ASSERT expression (&apos;:&apos; expression)? &apos;;&apos;</span><br><span class="line">    |   &apos;if&apos; parExpression statement (&apos;else&apos; statement)?</span><br><span class="line">    |   &apos;for&apos; &apos;(&apos; forControl &apos;)&apos; statement</span><br><span class="line">    |   &apos;while&apos; parExpression statement</span><br><span class="line">    |   &apos;do&apos; statement &apos;while&apos; parExpression &apos;;&apos;</span><br><span class="line">    |   &apos;try&apos; block</span><br><span class="line">        ( catches &apos;finally&apos; block</span><br><span class="line">        | catches</span><br><span class="line">        | &apos;finally&apos; block</span><br><span class="line">        )</span><br><span class="line">    |   &apos;switch&apos; parExpression switchBlock</span><br><span class="line">    |   &apos;synchronized&apos; parExpression block</span><br><span class="line">    |   &apos;return&apos; expression? &apos;;&apos;</span><br><span class="line">    |   &apos;throw&apos; expression &apos;;&apos;</span><br><span class="line">    |   &apos;break&apos; Identifier? &apos;;&apos;</span><br><span class="line">    |   &apos;continue&apos; Identifier? &apos;;&apos;</span><br><span class="line">    |   &apos;;&apos;</span><br><span class="line">    |   statementExpression &apos;;&apos;</span><br><span class="line">    |   Identifier &apos;:&apos; statement</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">catches</span><br><span class="line">    :   catchClause (catchClause)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">catchClause</span><br><span class="line">    :   &apos;catch&apos; &apos;(&apos; formalParameter &apos;)&apos; block</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">formalParameter</span><br><span class="line">    :   variableModifiers type variableDeclaratorId</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">switchBlock</span><br><span class="line">    :   &apos;&#123;&apos; switchBlockStatementGroup* switchLabel* &apos;&#125;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">switchBlockStatementGroup</span><br><span class="line">    :   switchLabel+ blockStatement*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">switchLabel</span><br><span class="line">    :   &apos;case&apos; constantExpression &apos;:&apos;</span><br><span class="line">    |   &apos;case&apos; enumConstantName &apos;:&apos;</span><br><span class="line">    |   &apos;default&apos; &apos;:&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">forControl</span><br><span class="line">    :   enhancedForControl</span><br><span class="line">    |   forInit? &apos;;&apos; expression? &apos;;&apos; forUpdate?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">forInit</span><br><span class="line">    :   localVariableDeclaration</span><br><span class="line">    |   expressionList</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">enhancedForControl</span><br><span class="line">    :   variableModifiers type Identifier &apos;:&apos; expression</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">forUpdate</span><br><span class="line">    :   expressionList</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">// EXPRESSIONS</span><br><span class="line"></span><br><span class="line">parExpression</span><br><span class="line">    :   &apos;(&apos; expression &apos;)&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">expressionList</span><br><span class="line">    :   expression (&apos;,&apos; expression)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">statementExpression</span><br><span class="line">    :   expression</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">constantExpression</span><br><span class="line">    :   expression</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">expression</span><br><span class="line">    :   primary</span><br><span class="line">    |   expression &apos;.&apos; Identifier</span><br><span class="line">    |   expression &apos;.&apos; &apos;this&apos;</span><br><span class="line">    |   expression &apos;.&apos; &apos;super&apos; &apos;(&apos; expressionList? &apos;)&apos;</span><br><span class="line">    |   expression &apos;.&apos; &apos;new&apos; Identifier &apos;(&apos; expressionList? &apos;)&apos;</span><br><span class="line">    |   expression &apos;.&apos; &apos;super&apos; &apos;.&apos; Identifier arguments?</span><br><span class="line">    |   expression &apos;.&apos; explicitGenericInvocation</span><br><span class="line">    |   expression &apos;[&apos; expression &apos;]&apos;</span><br><span class="line">    |   expression &apos;(&apos; expressionList? &apos;)&apos;</span><br><span class="line">    |   expression (&apos;++&apos; | &apos;--&apos;)</span><br><span class="line">    |   (&apos;+&apos;|&apos;-&apos;|&apos;++&apos;|&apos;--&apos;) expression</span><br><span class="line">    |   (&apos;~&apos;|&apos;!&apos;) expression</span><br><span class="line">    |   &apos;(&apos; type &apos;)&apos; expression</span><br><span class="line">    |   &apos;new&apos; creator</span><br><span class="line">    |   expression (&apos;*&apos;|&apos;/&apos;|&apos;%&apos;) expression</span><br><span class="line">    |   expression (&apos;+&apos;|&apos;-&apos;) expression</span><br><span class="line">    |   expression (&apos;&lt;&apos; &apos;&lt;&apos; | &apos;&gt;&apos; &apos;&gt;&apos; &apos;&gt;&apos; | &apos;&gt;&apos; &apos;&gt;&apos;) expression</span><br><span class="line">    |   expression (&apos;&lt;&apos; &apos;=&apos; | &apos;&gt;&apos; &apos;=&apos; | &apos;&gt;&apos; | &apos;&lt;&apos;) expression</span><br><span class="line">    |   expression &apos;instanceof&apos; type</span><br><span class="line">    |   expression (&apos;==&apos; | &apos;!=&apos;) expression</span><br><span class="line">    |   expression &apos;&amp;&apos; expression</span><br><span class="line">    |   expression &apos;^&apos; expression</span><br><span class="line">    |   expression &apos;|&apos; expression</span><br><span class="line">    |   expression &apos;&amp;&amp;&apos; expression</span><br><span class="line">    |   expression &apos;||&apos; expression</span><br><span class="line">    |   expression &apos;?&apos; expression &apos;:&apos; expression</span><br><span class="line">    |   expression</span><br><span class="line">        (&apos;^=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;+=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;-=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;*=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;/=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;&amp;=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;|=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;&gt;&apos; &apos;&gt;&apos; &apos;=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;&gt;&apos; &apos;&gt;&apos; &apos;&gt;&apos; &apos;=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;&lt;&apos; &apos;&lt;&apos; &apos;=&apos;&lt;assoc=right&gt;</span><br><span class="line">        |&apos;%=&apos;&lt;assoc=right&gt;</span><br><span class="line">        )</span><br><span class="line">        expression</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">primary</span><br><span class="line">    :   &apos;(&apos; expression &apos;)&apos;</span><br><span class="line">    |   &apos;this&apos;</span><br><span class="line">    |   &apos;super&apos;</span><br><span class="line">    |   literal</span><br><span class="line">    |   Identifier</span><br><span class="line">    |   type &apos;.&apos; &apos;class&apos;</span><br><span class="line">    |   &apos;void&apos; &apos;.&apos; &apos;class&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">creator</span><br><span class="line">    :   nonWildcardTypeArguments createdName classCreatorRest</span><br><span class="line">    |   createdName (arrayCreatorRest | classCreatorRest)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">createdName</span><br><span class="line">    :   classOrInterfaceType</span><br><span class="line">    |   primitiveType</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">innerCreator</span><br><span class="line">    :   nonWildcardTypeArguments? Identifier classCreatorRest</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">explicitGenericInvocation</span><br><span class="line">    :   nonWildcardTypeArguments Identifier arguments</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">arrayCreatorRest</span><br><span class="line">    :   &apos;[&apos;</span><br><span class="line">        (   &apos;]&apos; (&apos;[&apos; &apos;]&apos;)* arrayInitializer</span><br><span class="line">        |   expression &apos;]&apos; (&apos;[&apos; expression &apos;]&apos;)* (&apos;[&apos; &apos;]&apos;)*</span><br><span class="line">        )</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">classCreatorRest</span><br><span class="line">    :   arguments classBody?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">nonWildcardTypeArguments</span><br><span class="line">    :   &apos;&lt;&apos; typeList &apos;&gt;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">arguments</span><br><span class="line">    :   &apos;(&apos; expressionList? &apos;)&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">// LEXER</span><br><span class="line"></span><br><span class="line">HexLiteral : &apos;0&apos; (&apos;x&apos;|&apos;X&apos;) HexDigit+ IntegerTypeSuffix? ;</span><br><span class="line"></span><br><span class="line">DecimalLiteral : (&apos;0&apos; | &apos;1&apos;..&apos;9&apos; &apos;0&apos;..&apos;9&apos;*) IntegerTypeSuffix? ;</span><br><span class="line"></span><br><span class="line">OctalLiteral : &apos;0&apos; (&apos;0&apos;..&apos;7&apos;)+ IntegerTypeSuffix? ;</span><br><span class="line"></span><br><span class="line">fragment</span><br><span class="line">HexDigit : (&apos;0&apos;..&apos;9&apos;|&apos;a&apos;..&apos;f&apos;|&apos;A&apos;..&apos;F&apos;) ;</span><br><span class="line"></span><br><span class="line">fragment</span><br><span class="line">IntegerTypeSuffix : (&apos;l&apos;|&apos;L&apos;) ;</span><br><span class="line"></span><br><span class="line">FloatingPointLiteral</span><br><span class="line">    :   (&apos;0&apos;..&apos;9&apos;)+ &apos;.&apos; (&apos;0&apos;..&apos;9&apos;)* Exponent? FloatTypeSuffix?</span><br><span class="line">    |   &apos;.&apos; (&apos;0&apos;..&apos;9&apos;)+ Exponent? FloatTypeSuffix?</span><br><span class="line">    |   (&apos;0&apos;..&apos;9&apos;)+ Exponent FloatTypeSuffix?</span><br><span class="line">    |   (&apos;0&apos;..&apos;9&apos;)+ FloatTypeSuffix</span><br><span class="line">    |   (&apos;0x&apos; | &apos;0X&apos;) (HexDigit )*</span><br><span class="line">        (&apos;.&apos; (HexDigit)*)?</span><br><span class="line">        ( &apos;p&apos; | &apos;P&apos; )</span><br><span class="line">        ( &apos;+&apos; | &apos;-&apos; )?</span><br><span class="line">        ( &apos;0&apos; .. &apos;9&apos; )+</span><br><span class="line">        FloatTypeSuffix?</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">fragment</span><br><span class="line">Exponent : (&apos;e&apos;|&apos;E&apos;) (&apos;+&apos;|&apos;-&apos;)? (&apos;0&apos;..&apos;9&apos;)+ ;</span><br><span class="line"></span><br><span class="line">fragment</span><br><span class="line">FloatTypeSuffix : (&apos;f&apos;|&apos;F&apos;|&apos;d&apos;|&apos;D&apos;) ;</span><br><span class="line"></span><br><span class="line">CharacterLiteral</span><br><span class="line">    :   &apos;\&apos;&apos; ( EscapeSequence | ~(&apos;\&apos;&apos;|&apos;\\&apos;) ) &apos;\&apos;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">StringLiteral</span><br><span class="line">    :  &apos;&quot;&apos; ( EscapeSequence | ~(&apos;\\&apos;|&apos;&quot;&apos;) )* &apos;&quot;&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">fragment</span><br><span class="line">EscapeSequence</span><br><span class="line">    :   &apos;\\&apos; (&apos;b&apos;|&apos;t&apos;|&apos;n&apos;|&apos;f&apos;|&apos;r&apos;|&apos;\&quot;&apos;|&apos;\&apos;&apos;|&apos;\\&apos;)</span><br><span class="line">    |   UnicodeEscape</span><br><span class="line">    |   OctalEscape</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">fragment</span><br><span class="line">OctalEscape</span><br><span class="line">    :   &apos;\\&apos; (&apos;0&apos;..&apos;3&apos;) (&apos;0&apos;..&apos;7&apos;) (&apos;0&apos;..&apos;7&apos;)</span><br><span class="line">    |   &apos;\\&apos; (&apos;0&apos;..&apos;7&apos;) (&apos;0&apos;..&apos;7&apos;)</span><br><span class="line">    |   &apos;\\&apos; (&apos;0&apos;..&apos;7&apos;)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">fragment</span><br><span class="line">UnicodeEscape</span><br><span class="line">    :   &apos;\\&apos; &apos;u&apos; HexDigit HexDigit HexDigit HexDigit</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">ENUM:   &apos;enum&apos; &#123;if (!enumIsKeyword) setType(Identifier);&#125;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">ASSERT</span><br><span class="line">    :   &apos;assert&apos; &#123;if (!assertIsKeyword) setType(Identifier);&#125;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">Identifier</span><br><span class="line">    :   Letter (Letter|JavaIDDigit)*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">/**I found this char range in JavaCC&apos;s grammar, but Letter and Digit overlap.</span><br><span class="line">   Still works, but...</span><br><span class="line"> */</span><br><span class="line">fragment</span><br><span class="line">Letter</span><br><span class="line">    :  &apos;\u0024&apos; |</span><br><span class="line">       &apos;\u0041&apos;..&apos;\u005a&apos; |</span><br><span class="line">       &apos;\u005f&apos; |</span><br><span class="line">       &apos;\u0061&apos;..&apos;\u007a&apos; |</span><br><span class="line">       &apos;\u00c0&apos;..&apos;\u00d6&apos; |</span><br><span class="line">       &apos;\u00d8&apos;..&apos;\u00f6&apos; |</span><br><span class="line">       &apos;\u00f8&apos;..&apos;\u00ff&apos; |</span><br><span class="line">       &apos;\u0100&apos;..&apos;\u1fff&apos; |</span><br><span class="line">       &apos;\u3040&apos;..&apos;\u318f&apos; |</span><br><span class="line">       &apos;\u3300&apos;..&apos;\u337f&apos; |</span><br><span class="line">       &apos;\u3400&apos;..&apos;\u3d2d&apos; |</span><br><span class="line">       &apos;\u4e00&apos;..&apos;\u9fff&apos; |</span><br><span class="line">       &apos;\uf900&apos;..&apos;\ufaff&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">fragment</span><br><span class="line">JavaIDDigit</span><br><span class="line">    :  &apos;\u0030&apos;..&apos;\u0039&apos; |</span><br><span class="line">       &apos;\u0660&apos;..&apos;\u0669&apos; |</span><br><span class="line">       &apos;\u06f0&apos;..&apos;\u06f9&apos; |</span><br><span class="line">       &apos;\u0966&apos;..&apos;\u096f&apos; |</span><br><span class="line">       &apos;\u09e6&apos;..&apos;\u09ef&apos; |</span><br><span class="line">       &apos;\u0a66&apos;..&apos;\u0a6f&apos; |</span><br><span class="line">       &apos;\u0ae6&apos;..&apos;\u0aef&apos; |</span><br><span class="line">       &apos;\u0b66&apos;..&apos;\u0b6f&apos; |</span><br><span class="line">       &apos;\u0be7&apos;..&apos;\u0bef&apos; |</span><br><span class="line">       &apos;\u0c66&apos;..&apos;\u0c6f&apos; |</span><br><span class="line">       &apos;\u0ce6&apos;..&apos;\u0cef&apos; |</span><br><span class="line">       &apos;\u0d66&apos;..&apos;\u0d6f&apos; |</span><br><span class="line">       &apos;\u0e50&apos;..&apos;\u0e59&apos; |</span><br><span class="line">       &apos;\u0ed0&apos;..&apos;\u0ed9&apos; |</span><br><span class="line">       &apos;\u1040&apos;..&apos;\u1049&apos;</span><br><span class="line">   ;</span><br><span class="line"></span><br><span class="line">COMMENT</span><br><span class="line">    :   &apos;/*&apos; .*? &apos;*/&apos;    -&gt; channel(HIDDEN) // match anything between /* and */</span><br><span class="line">    ;</span><br><span class="line">WS  :   [ \r\t\u000C\n]+ -&gt; channel(HIDDEN)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">LINE_COMMENT</span><br><span class="line">    : &apos;//&apos; ~[\r\n]* &apos;\r&apos;? &apos;\n&apos; -&gt; channel(HIDDEN)</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ExtractInterfaceListener.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.TokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.misc.Interval;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtractInterfaceListener</span> <span class="keyword">extends</span> <span class="title">JavaBaseListener</span> </span>&#123;</span><br><span class="line">    JavaParser parser;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtractInterfaceListener</span><span class="params">(JavaParser parser)</span> </span>&#123;<span class="keyword">this</span>.parser = parser;&#125;</span><br><span class="line">    <span class="comment">/** Listen to matches of classDeclaration */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterClassDeclaration</span><span class="params">(JavaParser.ClassDeclarationContext ctx)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"interface I"</span>+ctx.Identifier()+<span class="string">" &#123;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitClassDeclaration</span><span class="params">(JavaParser.ClassDeclarationContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Listen to matches of methodDeclaration */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterMethodDeclaration</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        JavaParser.MethodDeclarationContext ctx</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// need parser to get tokens</span></span><br><span class="line">        TokenStream tokens = parser.getTokenStream();</span><br><span class="line">        String type = <span class="string">"void"</span>;</span><br><span class="line">        <span class="keyword">if</span> ( ctx.type()!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">            type = tokens.getText(ctx.type());</span><br><span class="line">        &#125;</span><br><span class="line">        String args = tokens.getText(ctx.formalParameters());</span><br><span class="line">        System.out.println(<span class="string">"\t"</span>+type+<span class="string">" "</span>+ctx.Identifier()+args+<span class="string">";"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ExtractInterfaceTool.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.ANTLRInputStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CommonTokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.ParserRuleContext;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.Token;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtractInterfaceTool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        &#125;</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line"></span><br><span class="line">        JavaLexer lexer = <span class="keyword">new</span> JavaLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        JavaParser parser = <span class="keyword">new</span> JavaParser(tokens);</span><br><span class="line">        ParseTree tree = parser.compilationUnit(); <span class="comment">// parse</span></span><br><span class="line"></span><br><span class="line">        ParseTreeWalker walker = <span class="keyword">new</span> ParseTreeWalker(); <span class="comment">// create standard walker</span></span><br><span class="line">        ExtractInterfaceListener extractor = <span class="keyword">new</span> ExtractInterfaceListener(parser);</span><br><span class="line">        walker.walk(extractor, tree); <span class="comment">// initiate walk of tree with listener</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Demo.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x, String y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[ ] g(<span class="comment">/*no args*/</span>) &#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">    List&lt;Map&lt;String, Integer&gt;&gt;[] h() &#123; <span class="keyword">return</span> <span class="keyword">null</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ java ExtractInterfaceTool Demo.java</span><br><span class="line">interface IDemo&#123;</span><br><span class="line">    void f(int x, String y);</span><br><span class="line">    int[ ] g(/*no args*/);</span><br><span class="line">    List&lt;Map&lt;String, Integer&gt;&gt;[] h();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rows"><a href="#Rows" class="headerlink" title="Rows"></a>Rows</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">grammar Rows;</span><br><span class="line"></span><br><span class="line">@parser::members &#123; // add members to generated RowsParser</span><br><span class="line">    int col;</span><br><span class="line">    public RowsParser(TokenStream input, int col) &#123; // custom constructor</span><br><span class="line">        this(input);</span><br><span class="line">        this.col = col;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file: (row NL)+ ;</span><br><span class="line"></span><br><span class="line">row</span><br><span class="line">locals [int i=0]</span><br><span class="line">    : (   STUFF</span><br><span class="line">          &#123;</span><br><span class="line">          $i++;</span><br><span class="line">          if ( $i == col ) System.out.println($STUFF.text);</span><br><span class="line">          &#125;</span><br><span class="line">      )+</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">TAB  :  &apos;\t&apos; -&gt; skip ;   // match but don&apos;t pass to the parser</span><br><span class="line">NL   :  &apos;\r&apos;? &apos;\n&apos; ;     // match and pass to the parser</span><br><span class="line">STUFF:  ~[\t\r\n]+ ;     // match any chars except tab, newline</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Col.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.ANTLRInputStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CommonTokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.ParserRuleContext;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.Token;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Col</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(System.in);</span><br><span class="line">        RowsLexer lexer = <span class="keyword">new</span> RowsLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        <span class="keyword">int</span> col = Integer.valueOf(args[<span class="number">0</span>]);</span><br><span class="line">        RowsParser parser = <span class="keyword">new</span> RowsParser(tokens, col); <span class="comment">// pass column number!</span></span><br><span class="line">        parser.setBuildParseTree(<span class="keyword">false</span>); <span class="comment">// don't waste time bulding a tree</span></span><br><span class="line">        parser.file(); <span class="comment">// parse</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parrt   Terence Parr    101</span><br><span class="line">tombu   Tom Burns       020</span><br><span class="line">bke     Kevin Edgar     008</span><br></pre></td></tr></table></figure><h2 id="chap6"><a href="#chap6" class="headerlink" title="chap6"></a>chap6</h2><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// CSV.g4</span><br><span class="line">grammar CSV;</span><br><span class="line"></span><br><span class="line">file  : hdr row+ ;</span><br><span class="line"></span><br><span class="line">hdr   : row ;</span><br><span class="line"></span><br><span class="line">row   : field (&apos;,&apos; field)* &apos;\r&apos;? &apos;\n&apos; ;</span><br><span class="line"></span><br><span class="line">field : TEXT</span><br><span class="line">      | STRING</span><br><span class="line">      |</span><br><span class="line">      ;</span><br><span class="line"></span><br><span class="line">TEXT  : ~[,\n\r&quot;]+ ;</span><br><span class="line"></span><br><span class="line">STRING: &apos;&quot;&apos; (&apos;&quot;&quot;&apos;|~&apos;&quot;&apos;)* &apos;&quot;&apos; ;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Details,Month,Amount</span><br><span class="line">Mid Bonus,June,&quot;$2,000&quot;</span><br><span class="line">,January,&quot;&quot;&quot;zippo&quot;&quot;&quot;</span><br><span class="line">Total Bonuses,&quot;&quot;,&quot;$5,000&quot;</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// JSON.g4</span><br><span class="line">// Derived from http://json.org</span><br><span class="line"></span><br><span class="line">grammar JSON;</span><br><span class="line"></span><br><span class="line">json:   object</span><br><span class="line">    |   array</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">object</span><br><span class="line">    :   &apos;&#123;&apos; pair (&apos;,&apos; pair)* &apos;&#125;&apos;</span><br><span class="line">    |   &apos;&#123;&apos; &apos;&#125;&apos; // empty object</span><br><span class="line">    ;</span><br><span class="line">pair:   STRING &apos;:&apos; value ;</span><br><span class="line"></span><br><span class="line">array</span><br><span class="line">    :   &apos;[&apos; value (&apos;,&apos; value)* &apos;]&apos;</span><br><span class="line">    |   &apos;[&apos; &apos;]&apos; // empty array</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">value</span><br><span class="line">    :   STRING</span><br><span class="line">    |   NUMBER</span><br><span class="line">    |   object  // recursion</span><br><span class="line">    |   array   // recursion</span><br><span class="line">    |   &apos;true&apos;  // keywords</span><br><span class="line">    |   &apos;false&apos;</span><br><span class="line">    |   &apos;null&apos;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">STRING :  &apos;&quot;&apos; (ESC | ~[&quot;\\])* &apos;&quot;&apos; ;</span><br><span class="line"></span><br><span class="line">fragment ESC :   &apos;\\&apos; ([&quot;\\/bfnrt] | UNICODE) ;</span><br><span class="line">fragment UNICODE : &apos;u&apos; HEX HEX HEX HEX ;</span><br><span class="line">fragment HEX : [0-9a-fA-F] ;</span><br><span class="line"></span><br><span class="line">NUMBER</span><br><span class="line">    :   &apos;-&apos;? INT &apos;.&apos; [0-9]+ EXP? // 1.35, 1.35E-9, 0.3, -4.5</span><br><span class="line">    |   &apos;-&apos;? INT EXP             // 1e10 -3e4</span><br><span class="line">    |   &apos;-&apos;? INT                 // -3, 45</span><br><span class="line">    ;</span><br><span class="line">fragment INT :   &apos;0&apos; | [1-9] [0-9]* ; // no leading zeros</span><br><span class="line">fragment EXP :   [Ee] [+\-]? INT ; // \- since - means &quot;range&quot; inside [...]</span><br><span class="line"></span><br><span class="line">WS  :   [ \t\n\r]+ -&gt; skip ;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"antlr.org"</span>: &#123;</span><br><span class="line">        <span class="attr">"owners"</span> : [],</span><br><span class="line">        <span class="attr">"live"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"speed"</span> : <span class="number">145</span>,</span><br><span class="line">        <span class="attr">"menus"</span> : [<span class="string">"File"</span>, <span class="string">"Help\nMenu"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="chap7"><a href="#chap7" class="headerlink" title="chap7"></a>chap7</h2><h3 id="PropertyFile"><a href="#PropertyFile" class="headerlink" title="PropertyFile"></a>PropertyFile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grammar PropertyFile;</span><br><span class="line">@members &#123;</span><br><span class="line">void startFile() &#123; &#125; // blank implementations</span><br><span class="line">void finishFile() &#123; &#125;</span><br><span class="line">void defineProperty(Token name, Token value) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">file : &#123;startFile();&#125; prop+ &#123;finishFile();&#125; ;</span><br><span class="line">prop : ID &apos;=&apos; STRING &apos;\n&apos; &#123;defineProperty($ID, $STRING);&#125; ;</span><br><span class="line">ID : [a-z]+ ;</span><br><span class="line">STRING : &apos;&quot;&apos; .*? &apos;&quot;&apos; ;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: PropertyFileRide.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyFilePrinter</span> <span class="keyword">extends</span> <span class="title">PropertyFileParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PropertyFilePrinter</span><span class="params">(TokenStream input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defineProperty</span><span class="params">(Token name, Token value)</span> </span>&#123;</span><br><span class="line">        System.out.println(name.getText()+<span class="string">"="</span>+value.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyFileRide</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        PropertyFileLexer lexer = <span class="keyword">new</span> PropertyFileLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        PropertyFilePrinter parser = <span class="keyword">new</span> PropertyFilePrinter(tokens);</span><br><span class="line">        parser.file();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: TestPropertyFile.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment">***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.misc.OrderedHashMap;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPropertyFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyFileLoader</span> <span class="keyword">extends</span> <span class="title">PropertyFileBaseListener</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; props = <span class="keyword">new</span> OrderedHashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitProp</span><span class="params">(PropertyFileParser.PropContext ctx)</span> </span>&#123;</span><br><span class="line">            String id = ctx.ID().getText(); <span class="comment">// prop : ID '=' STRING '\n' ;</span></span><br><span class="line">            String value = ctx.STRING().getText();</span><br><span class="line">            props.put(id, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        &#125;</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        PropertyFileLexer lexer = <span class="keyword">new</span> PropertyFileLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        PropertyFileParser parser = <span class="keyword">new</span> PropertyFileParser(tokens);</span><br><span class="line">        ParseTree tree = parser.file();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create a standard ANTLR parse tree walker</span></span><br><span class="line">        ParseTreeWalker walker = <span class="keyword">new</span> ParseTreeWalker();</span><br><span class="line">        <span class="comment">// create listener then feed to walker</span></span><br><span class="line">        PropertyFileLoader loader = <span class="keyword">new</span> PropertyFileLoader();</span><br><span class="line">        walker.walk(loader, tree);        <span class="comment">// walk parse tree</span></span><br><span class="line">        System.out.println(loader.props); <span class="comment">// print results</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user=&quot;parrt&quot;</span><br><span class="line">machine=&quot;maniac&quot;</span><br></pre></td></tr></table></figure><h3 id="PropertyFile2"><a href="#PropertyFile2" class="headerlink" title="PropertyFile2"></a>PropertyFile2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grammar PropertyFile;</span><br><span class="line">file : prop+ ;</span><br><span class="line">prop : ID &apos;=&apos; STRING &apos;\n&apos; ;</span><br><span class="line">ID   : [a-z]+ ;</span><br><span class="line">STRING : &apos;&quot;&apos; .*? &apos;&quot;&apos; ;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: TestPropertyFile.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jumormt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.misc.OrderedHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPropertyFile</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyFileLoader</span> <span class="keyword">extends</span> <span class="title">PropertyFileBaseVisitor</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; prps = <span class="keyword">new</span> OrderedHashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">visitProp</span><span class="params">(PropertyFileParser.PropContext ctx)</span> </span>&#123;</span><br><span class="line">            String id = ctx.ID().getText();</span><br><span class="line">            String value = ctx.STRING().getText();</span><br><span class="line">            prps.put(id, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">            InputStream is = System.in;</span><br><span class="line">            <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">            PropertyFileLexer lexer = <span class="keyword">new</span> PropertyFileLexer(<span class="keyword">new</span> ANTLRInputStream(is));</span><br><span class="line">            CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">            PropertyFileParser parser = <span class="keyword">new</span> PropertyFileParser(tokens);</span><br><span class="line">            parser.setBuildParseTree(<span class="keyword">true</span>); <span class="comment">// tell ANTLR to build a parse tree</span></span><br><span class="line">            ParseTree tree = parser.file();</span><br><span class="line"></span><br><span class="line">            PropertyFileLoader loader = <span class="keyword">new</span> PropertyFileLoader();</span><br><span class="line"></span><br><span class="line">            loader.visit(tree);</span><br><span class="line">            System.out.println(loader.prps);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="chap8"><a href="#chap8" class="headerlink" title="chap8"></a>chap8</h2><h3 id="LoadCSV"><a href="#LoadCSV" class="headerlink" title="LoadCSV"></a>LoadCSV</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: LoadCSV.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** chap8/8.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jumormt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadCSV</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Loader</span> <span class="keyword">extends</span> <span class="title">CSVBaseListener</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMPTY = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; rows = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; header;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; currentRowFieldVaule;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitEmpty</span><span class="params">(CSVParser.EmptyContext ctx)</span> </span>&#123;</span><br><span class="line">            currentRowFieldVaule.add(EMPTY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitString</span><span class="params">(CSVParser.StringContext ctx)</span> </span>&#123;</span><br><span class="line">            currentRowFieldVaule.add(ctx.STRING().getText());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitText</span><span class="params">(CSVParser.TextContext ctx)</span> </span>&#123;</span><br><span class="line">            currentRowFieldVaule.add(ctx.TEXT().getText());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitHdr</span><span class="params">(CSVParser.HdrContext ctx)</span> </span>&#123;</span><br><span class="line">            header = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            header.addAll(currentRowFieldVaule);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterRow</span><span class="params">(CSVParser.RowContext ctx)</span> </span>&#123;</span><br><span class="line">            currentRowFieldVaule = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitRow</span><span class="params">(CSVParser.RowContext ctx)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ctx.getParent().getRuleIndex() == CSVParser.RULE_hdr)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; mp = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (String v : currentRowFieldVaule)&#123;</span><br><span class="line">                mp.put(header.get(i), v);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            rows.add(mp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        CSVLexer lexer = <span class="keyword">new</span> CSVLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        CSVParser paser = <span class="keyword">new</span> CSVParser(tokens);</span><br><span class="line"></span><br><span class="line">        ParseTree tree = paser.file();</span><br><span class="line"></span><br><span class="line">        ParseTreeWalker walker = <span class="keyword">new</span> ParseTreeWalker();</span><br><span class="line">        Loader loader = <span class="keyword">new</span> Loader();</span><br><span class="line">        walker.walk(loader, tree);</span><br><span class="line">        System.out.println(loader.rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON2XML"><a href="#JSON2XML" class="headerlink" title="JSON2XML"></a>JSON2XML</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//:JSON2XML.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** chap8/8.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jumormt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSON2XML</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLEmitter</span> <span class="keyword">extends</span> <span class="title">JSONBaseListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ParseTreeProperty&lt;String&gt; xml = <span class="keyword">new</span> ParseTreeProperty&lt;String&gt;();</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setXml</span><span class="params">(ParseTree t, String v)</span> </span>&#123;xml.put(t, v);&#125;</span><br><span class="line">        <span class="function">String <span class="title">getXml</span><span class="params">(ParseTree t)</span></span>&#123;<span class="keyword">return</span> xml.get(t);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitJson</span><span class="params">(JSONParser.JsonContext ctx)</span> </span>&#123;</span><br><span class="line">            setXml(ctx, getXml(ctx.getChild(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitEmptyArray</span><span class="params">(JSONParser.EmptyArrayContext ctx)</span> </span>&#123;</span><br><span class="line">            setXml(ctx, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitArrayOfValues</span><span class="params">(JSONParser.ArrayOfValuesContext ctx)</span> </span>&#123;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            buf.append(<span class="string">'\n'</span>);</span><br><span class="line">            <span class="keyword">for</span> (JSONParser.ValueContext p:ctx.value())&#123;</span><br><span class="line">                buf.append(<span class="string">"&lt;element&gt;"</span>);</span><br><span class="line">                buf.append(getXml(p));</span><br><span class="line">                buf.append(<span class="string">"&lt;/element&gt;"</span>);</span><br><span class="line">                buf.append(<span class="string">'\n'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setXml(ctx, buf.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitEmptyObject</span><span class="params">(JSONParser.EmptyObjectContext ctx)</span> </span>&#123;</span><br><span class="line">            setXml(ctx, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitAnObject</span><span class="params">(JSONParser.AnObjectContext ctx)</span> </span>&#123;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            buf.append(<span class="string">'\n'</span>);</span><br><span class="line">            <span class="keyword">for</span> (JSONParser.PairContext p:ctx.pair())&#123;</span><br><span class="line">                buf.append(getXml(p));</span><br><span class="line">            &#125;</span><br><span class="line">            setXml(ctx, buf.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitPair</span><span class="params">(JSONParser.PairContext ctx)</span> </span>&#123;</span><br><span class="line">            String tag = stripQuotes(ctx.STRING().getText());</span><br><span class="line">            JSONParser.ValueContext cvalue = ctx.value();</span><br><span class="line">            String x = String.format(<span class="string">"&lt;%s&gt;%s&lt;/%s&gt;\n"</span>, tag, getXml(cvalue), tag);</span><br><span class="line">            setXml(ctx, x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitString</span><span class="params">(JSONParser.StringContext ctx)</span> </span>&#123;</span><br><span class="line">            setXml(ctx, stripQuotes(ctx.getText()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitAtom</span><span class="params">(JSONParser.AtomContext ctx)</span> </span>&#123;</span><br><span class="line">            setXml(ctx, ctx.getText());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitObjectValue</span><span class="params">(JSONParser.ObjectValueContext ctx)</span> </span>&#123;</span><br><span class="line">            setXml(ctx, getXml(ctx.object()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitArrayValue</span><span class="params">(JSONParser.ArrayValueContext ctx)</span> </span>&#123;</span><br><span class="line">            setXml(ctx, getXml(ctx.array()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stripQuotes</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( s==<span class="keyword">null</span> || s.charAt(<span class="number">0</span>)!=<span class="string">'"'</span> ) <span class="keyword">return</span> s;</span><br><span class="line">            <span class="keyword">return</span> s.substring(<span class="number">1</span>, s.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        JSONLexer lexer = <span class="keyword">new</span> JSONLexer(input);</span><br><span class="line">        CommonTokenStream tokenStream = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        JSONParser parser  = <span class="keyword">new</span> JSONParser(tokenStream);</span><br><span class="line"></span><br><span class="line">        ParseTree tree = parser.json();</span><br><span class="line"></span><br><span class="line">        ParseTreeWalker walker = <span class="keyword">new</span> ParseTreeWalker();</span><br><span class="line">        XMLEmitter xmlEmitter = <span class="keyword">new</span> XMLEmitter();</span><br><span class="line">        walker.walk(xmlEmitter, tree);</span><br><span class="line">        System.out.println(xmlEmitter.getXml(tree));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CALLGRAPH"><a href="#CALLGRAPH" class="headerlink" title="CALLGRAPH"></a>CALLGRAPH</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: CallGraph.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** chap8/8.3</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jumormt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.misc.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallGraph</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 调用图 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; nodes = <span class="keyword">new</span> OrderedHashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        MultiMap&lt;String, String&gt; edges = <span class="keyword">new</span> MultiMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edge</span><span class="params">(String source, String dest)</span></span>&#123;</span><br><span class="line">            edges.map(source, dest);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toDOT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            buf.append(<span class="string">"digraph G &#123;\n"</span>);</span><br><span class="line">            buf.append(<span class="string">"  ranksep=.25;\n"</span>);</span><br><span class="line">            buf.append(<span class="string">"  edge [arrowsize=.5]\n"</span>);</span><br><span class="line">            buf.append(<span class="string">"  node [shape=circle, fontname=\"ArialNarrow\",\n"</span>);</span><br><span class="line">            buf.append(<span class="string">"        fontsize=12, fixedsize=true, height=.45];\n"</span>);</span><br><span class="line">            buf.append(<span class="string">"  "</span>);</span><br><span class="line">            <span class="keyword">for</span> (String node : nodes) &#123; <span class="comment">// print all nodes first</span></span><br><span class="line">                buf.append(node);</span><br><span class="line">                buf.append(<span class="string">"; "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            buf.append(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String src : edges.keySet()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String trg : edges.get(src)) &#123;</span><br><span class="line">                    buf.append(<span class="string">"  "</span>);</span><br><span class="line">                    buf.append(src);</span><br><span class="line">                    buf.append(<span class="string">" -&gt; "</span>);</span><br><span class="line">                    buf.append(trg);</span><br><span class="line">                    buf.append(<span class="string">";\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            buf.append(<span class="string">"&#125;\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionListener</span> <span class="keyword">extends</span> <span class="title">CymbolBaseListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Graph gp = <span class="keyword">new</span> Graph();</span><br><span class="line">        String currentFunctionName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterFunctionDecl</span><span class="params">(CymbolParser.FunctionDeclContext ctx)</span> </span>&#123;</span><br><span class="line">            currentFunctionName = ctx.ID().getText();</span><br><span class="line">            gp.nodes.add(currentFunctionName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitCall</span><span class="params">(CymbolParser.CallContext ctx)</span> </span>&#123;</span><br><span class="line">            String functionName = ctx.ID().getText();</span><br><span class="line">            gp.edge(currentFunctionName, functionName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        &#125;</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        CymbolLexer lexer = <span class="keyword">new</span> CymbolLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        CymbolParser parser = <span class="keyword">new</span> CymbolParser(tokens);</span><br><span class="line">        parser.setBuildParseTree(<span class="keyword">true</span>);</span><br><span class="line">        ParseTree tree = parser.file();</span><br><span class="line">        <span class="comment">// show tree in text form</span></span><br><span class="line"><span class="comment">//        System.out.println(tree.toStringTree(parser));</span></span><br><span class="line"></span><br><span class="line">        ParseTreeWalker walker = <span class="keyword">new</span> ParseTreeWalker();</span><br><span class="line">        FunctionListener collector = <span class="keyword">new</span> FunctionListener();</span><br><span class="line">        walker.walk(collector, tree);</span><br><span class="line">        System.out.println(collector.gp.toString());</span><br><span class="line">        System.out.println(collector.gp.toDOT());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Here's another example that uses StringTemplate to generate output</span></span><br><span class="line"><span class="comment">//        System.out.println(collector.graph.toST().render());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DRefPhase"><a href="#DRefPhase" class="headerlink" title="DRefPhase"></a>DRefPhase</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">// Cymbol.g4</span><br><span class="line">/** Simple statically-typed programming language with functions and variables</span><br><span class="line"> *  taken from &quot;Language Implementation Patterns&quot; book.</span><br><span class="line"> */</span><br><span class="line">grammar Cymbol;</span><br><span class="line"></span><br><span class="line">file:   (functionDecl | varDecl)+ ;</span><br><span class="line"></span><br><span class="line">varDecl</span><br><span class="line">    :   type ID (&apos;=&apos; expr)? &apos;;&apos;</span><br><span class="line">    ;</span><br><span class="line">type:   &apos;float&apos; | &apos;int&apos; | &apos;void&apos; ; // user-defined types</span><br><span class="line"></span><br><span class="line">functionDecl</span><br><span class="line">    :   type ID &apos;(&apos; formalParameters? &apos;)&apos; block // &quot;void f(int x) &#123;...&#125;&quot;</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">formalParameters</span><br><span class="line">    :   formalParameter (&apos;,&apos; formalParameter)*</span><br><span class="line">    ;</span><br><span class="line">formalParameter</span><br><span class="line">    :   type ID</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">block:  &apos;&#123;&apos; stat* &apos;&#125;&apos; ;   // possibly empty statement block</span><br><span class="line"></span><br><span class="line">stat:   block</span><br><span class="line">    |   varDecl</span><br><span class="line">    |   &apos;if&apos; expr &apos;then&apos; stat (&apos;else&apos; stat)?</span><br><span class="line">    |   &apos;return&apos; expr? &apos;;&apos;</span><br><span class="line">    |   expr &apos;=&apos; expr &apos;;&apos; // assignment</span><br><span class="line">    |   expr &apos;;&apos;          // func call</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">/* expr below becomes the following non-left recursive rule:</span><br><span class="line">expr[int _p]</span><br><span class="line">    :   ( &apos;-&apos; expr[6]</span><br><span class="line">        | &apos;!&apos; expr[5]</span><br><span class="line">        | ID</span><br><span class="line">        | INT</span><br><span class="line">        | &apos;(&apos; expr &apos;)&apos;</span><br><span class="line">        )</span><br><span class="line">        ( &#123;8 &gt;= $_p&#125;? &apos;*&apos; expr[9]</span><br><span class="line">        | &#123;7 &gt;= $_p&#125;? (&apos;+&apos;|&apos;-&apos;) expr[8]</span><br><span class="line">        | &#123;4 &gt;= $_p&#125;? &apos;==&apos; expr[5]</span><br><span class="line">        | &#123;10 &gt;= $_p&#125;? &apos;[&apos; expr &apos;]&apos;</span><br><span class="line">        | &#123;9 &gt;= $_p&#125;? &apos;(&apos; exprList? &apos;)&apos;</span><br><span class="line">        )*</span><br><span class="line">    ;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">expr:   ID &apos;(&apos; exprList? &apos;)&apos;    # Call</span><br><span class="line">    |   expr &apos;[&apos; expr &apos;]&apos;       # Index</span><br><span class="line">    |   &apos;-&apos; expr                # Negate</span><br><span class="line">    |   &apos;!&apos; expr                # Not</span><br><span class="line">    |   expr &apos;*&apos; expr           # Mult</span><br><span class="line">    |   expr (&apos;+&apos;|&apos;-&apos;) expr     # AddSub</span><br><span class="line">    |   expr &apos;==&apos; expr          # Equal</span><br><span class="line">    |   ID                      # Var</span><br><span class="line">    |   INT                     # Int</span><br><span class="line">    |   &apos;(&apos; expr &apos;)&apos;            # Parens</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">exprList : expr (&apos;,&apos; expr)* ;   // arg list</span><br><span class="line"></span><br><span class="line">K_FLOAT : &apos;float&apos;;</span><br><span class="line">K_INT   : &apos;int&apos;;</span><br><span class="line">K_VOID  : &apos;void&apos;;</span><br><span class="line">ID  :   LETTER (LETTER | [0-9])* ;</span><br><span class="line">fragment</span><br><span class="line">LETTER : [a-zA-Z] ;</span><br><span class="line"></span><br><span class="line">INT :   [0-9]+ ;</span><br><span class="line"></span><br><span class="line">WS  :   [ \t\n\r]+ -&gt; skip ;</span><br><span class="line"></span><br><span class="line">SL_COMMENT</span><br><span class="line">    :   &apos;//&apos; .*? &apos;\n&apos; -&gt; skip</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: DefPhase.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SymbolList.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefPhase</span> <span class="keyword">extends</span> <span class="title">CymbolBaseListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ParseTreeProperty&lt;Scope&gt; scopes = <span class="keyword">new</span> ParseTreeProperty&lt;Scope&gt;();</span><br><span class="line">    GlobalScope globals;</span><br><span class="line">    Scope currentScope;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterFile</span><span class="params">(CymbolParser.FileContext ctx)</span> </span>&#123;</span><br><span class="line">        globals = <span class="keyword">new</span> GlobalScope(<span class="keyword">null</span>);</span><br><span class="line">        currentScope = globals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitFile</span><span class="params">(CymbolParser.FileContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(globals);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterFunctionDecl</span><span class="params">(CymbolParser.FunctionDeclContext ctx)</span> </span>&#123;</span><br><span class="line">        String name = ctx.ID().getText();</span><br><span class="line">        <span class="keyword">int</span> typeTokenType = ctx.type().start.getType();</span><br><span class="line">        Symbol.Type type = CheckSymbols.getType(typeTokenType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// push new scope by making new one that points to enclosing scope</span></span><br><span class="line">        FunctionSymbol function = <span class="keyword">new</span> FunctionSymbol(name, type, currentScope);</span><br><span class="line">        currentScope.define(function); <span class="comment">// Define function in current scope</span></span><br><span class="line">        saveScope(ctx, function);      <span class="comment">// Push: set function's parent to current</span></span><br><span class="line">        currentScope = function;       <span class="comment">// Current scope is now function scope</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveScope</span><span class="params">(ParserRuleContext ctx, Scope s)</span> </span>&#123; scopes.put(ctx, s); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitFunctionDecl</span><span class="params">(CymbolParser.FunctionDeclContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(currentScope);</span><br><span class="line">        currentScope = currentScope.getEnclosingScope();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterBlock</span><span class="params">(CymbolParser.BlockContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// push new local scope</span></span><br><span class="line">        currentScope = <span class="keyword">new</span> LocalScope(currentScope);</span><br><span class="line">        saveScope(ctx, currentScope);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitBlock</span><span class="params">(CymbolParser.BlockContext ctx)</span> </span>&#123;</span><br><span class="line">        System.out.println(currentScope);</span><br><span class="line">        currentScope = currentScope.getEnclosingScope(); <span class="comment">// pop scope</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitFormalParameter</span><span class="params">(CymbolParser.FormalParameterContext ctx)</span> </span>&#123;</span><br><span class="line">        defineVar(ctx.type(), ctx.ID().getSymbol());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitVarDecl</span><span class="params">(CymbolParser.VarDeclContext ctx)</span> </span>&#123;</span><br><span class="line">        defineVar(ctx.type(), ctx.ID().getSymbol());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defineVar</span><span class="params">(CymbolParser.TypeContext typeCtx, Token nameToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> typeTokenType = typeCtx.start.getType();</span><br><span class="line">        Symbol.Type type = CheckSymbols.getType(typeTokenType);</span><br><span class="line">        VariableSymbol var = <span class="keyword">new</span> VariableSymbol(nameToken.getText(), type);</span><br><span class="line">        currentScope.define(var); <span class="comment">// Define symbol in current scope</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: RefPhase.java</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTreeProperty;</span><br><span class="line"><span class="keyword">import</span> SymbolList.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefPhase</span> <span class="keyword">extends</span> <span class="title">CymbolBaseListener</span> </span>&#123;</span><br><span class="line">    ParseTreeProperty&lt;Scope&gt; scopes;</span><br><span class="line">    GlobalScope globals;</span><br><span class="line">    Scope currentScope; <span class="comment">// resolve symbols starting in this scope</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefPhase</span><span class="params">(GlobalScope globals, ParseTreeProperty&lt;Scope&gt; scopes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scopes = scopes;</span><br><span class="line">        <span class="keyword">this</span>.globals = globals;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterFile</span><span class="params">(CymbolParser.FileContext ctx)</span> </span>&#123;</span><br><span class="line">        currentScope = globals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterFunctionDecl</span><span class="params">(CymbolParser.FunctionDeclContext ctx)</span> </span>&#123;</span><br><span class="line">        currentScope = scopes.get(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitFunctionDecl</span><span class="params">(CymbolParser.FunctionDeclContext ctx)</span> </span>&#123;</span><br><span class="line">        currentScope = currentScope.getEnclosingScope();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterBlock</span><span class="params">(CymbolParser.BlockContext ctx)</span> </span>&#123;</span><br><span class="line">        currentScope = scopes.get(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitBlock</span><span class="params">(CymbolParser.BlockContext ctx)</span> </span>&#123;</span><br><span class="line">        currentScope = currentScope.getEnclosingScope();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitVar</span><span class="params">(CymbolParser.VarContext ctx)</span> </span>&#123;</span><br><span class="line">        String name = ctx.ID().getSymbol().getText();</span><br><span class="line">        Symbol var = currentScope.resolve(name);</span><br><span class="line">        <span class="keyword">if</span> ( var==<span class="keyword">null</span> ) &#123;</span><br><span class="line">            CheckSymbols.error(ctx.ID().getSymbol(), <span class="string">"no such variable: "</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( var <span class="keyword">instanceof</span> FunctionSymbol ) &#123;</span><br><span class="line">            CheckSymbols.error(ctx.ID().getSymbol(), name+<span class="string">" is not a variable"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitCall</span><span class="params">(CymbolParser.CallContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// can only handle f(...) not expr(...)</span></span><br><span class="line">        String funcName = ctx.ID().getText();</span><br><span class="line">        Symbol meth = currentScope.resolve(funcName);</span><br><span class="line">        <span class="keyword">if</span> ( meth==<span class="keyword">null</span> ) &#123;</span><br><span class="line">            CheckSymbols.error(ctx.ID().getSymbol(), <span class="string">"no such function: "</span>+funcName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( meth <span class="keyword">instanceof</span> VariableSymbol ) &#123;</span><br><span class="line">            CheckSymbols.error(ctx.ID().getSymbol(), funcName+<span class="string">" is not a function"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: CheckSymbols.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** chap8/8.4 main</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jumormt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.ANTLRInputStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CommonTokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.ParserRuleContext;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.Token;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SymbolList.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckSymbols</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Symbol.<span class="function">Type <span class="title">getType</span><span class="params">(<span class="keyword">int</span> tokenType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> ( tokenType ) &#123;</span><br><span class="line">            <span class="keyword">case</span> CymbolParser.K_VOID :  <span class="keyword">return</span> Symbol.Type.tVOID;</span><br><span class="line">            <span class="keyword">case</span> CymbolParser.K_INT :   <span class="keyword">return</span> Symbol.Type.tINT;</span><br><span class="line">            <span class="keyword">case</span> CymbolParser.K_FLOAT : <span class="keyword">return</span> Symbol.Type.tFLOAT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Symbol.Type.tINVALID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Token t, String msg)</span> </span>&#123;</span><br><span class="line">        System.err.printf(<span class="string">"line %d:%d %s\n"</span>, t.getLine(), t.getCharPositionInLine(),</span><br><span class="line">                msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String inputFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( args.length&gt;<span class="number">0</span> ) inputFile = args[<span class="number">0</span>];</span><br><span class="line">        InputStream is = System.in;</span><br><span class="line">        <span class="keyword">if</span> ( inputFile!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(inputFile);</span><br><span class="line">        &#125;</span><br><span class="line">        ANTLRInputStream input = <span class="keyword">new</span> ANTLRInputStream(is);</span><br><span class="line">        CymbolLexer lexer = <span class="keyword">new</span> CymbolLexer(input);</span><br><span class="line">        CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line">        CymbolParser parser = <span class="keyword">new</span> CymbolParser(tokens);</span><br><span class="line">        parser.setBuildParseTree(<span class="keyword">true</span>);</span><br><span class="line">        ParseTree tree = parser.file();</span><br><span class="line">        <span class="comment">// show tree in text form</span></span><br><span class="line"><span class="comment">//        System.out.println(tree.toStringTree(parser));</span></span><br><span class="line"></span><br><span class="line">        ParseTreeWalker walker = <span class="keyword">new</span> ParseTreeWalker();</span><br><span class="line">        DefPhase def = <span class="keyword">new</span> DefPhase();</span><br><span class="line">        walker.walk(def, tree);</span><br><span class="line">        <span class="comment">// create next phase and feed symbol table info from def to ref phase</span></span><br><span class="line">        RefPhase ref = <span class="keyword">new</span> RefPhase(def.globals, def.scopes);</span><br><span class="line">        walker.walk(ref, tree);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> CheckSymbols().process(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//vars.cymbol</span><br><span class="line">int f(int x, float y) &#123;</span><br><span class="line">    g();   // forward reference is ok</span><br><span class="line">    i = 3; // no declaration for i (error)</span><br><span class="line">    g = 4; // g is not variable (error)</span><br><span class="line">    return x + y; // x, y are defined, so no problem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void g() &#123;</span><br><span class="line">    int x = 0;</span><br><span class="line">    float y;</span><br><span class="line">    y = 9; // y is defined</span><br><span class="line">    f();   // backward reference is ok</span><br><span class="line">    z();   // no such function (error)</span><br><span class="line">    y();   // y is not function (error)</span><br><span class="line">    x = f; // f is not a variable (error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//vars2.cymbol</span><br><span class="line">int x; //(1)</span><br><span class="line">int y;</span><br><span class="line">void a() //(2)</span><br><span class="line">&#123; //(3)</span><br><span class="line">    int x;</span><br><span class="line">    x = 1;  // x resolves to current scope, not x in global scope</span><br><span class="line">    y = 2;  // y is not found in current scope, but resolves in global</span><br><span class="line">    &#123; int y = x; &#125; //(4)</span><br><span class="line">&#125;</span><br><span class="line">void b(int z) //(5)</span><br><span class="line">&#123; &#125; //(6)</span><br></pre></td></tr></table></figure><h4 id="SymbolList"><a href="#SymbolList" class="headerlink" title="SymbolList"></a>SymbolList</h4><p><img src="https://wx3.sinaimg.cn/mw1024/005B4KCnly1fuxk8urlcpj30m20av3zh.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Scope.java</span></span><br><span class="line"><span class="keyword">package</span> SymbolList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Scope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getScopeName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Where to look next for symbols */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Scope <span class="title">getEnclosingScope</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Define a symbol in the current scope */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">define</span><span class="params">(Symbol sym)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Look up name in this scope or in enclosing scope if not here */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Symbol <span class="title">resolve</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: BaseScope.java</span></span><br><span class="line"><span class="keyword">package</span> SymbolList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseScope</span> <span class="keyword">implements</span> <span class="title">Scope</span> </span>&#123;</span><br><span class="line">    Scope enclosingScope; <span class="comment">// null if global (outermost) scope</span></span><br><span class="line">    Map&lt;String, Symbol&gt; symbols = <span class="keyword">new</span> LinkedHashMap&lt;String, Symbol&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseScope</span><span class="params">(Scope enclosingScope)</span> </span>&#123; <span class="keyword">this</span>.enclosingScope = enclosingScope;  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Symbol <span class="title">resolve</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Symbol s = symbols.get(name);</span><br><span class="line">        <span class="keyword">if</span> ( s!=<span class="keyword">null</span> ) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="comment">// if not here, check any enclosing scope</span></span><br><span class="line">        <span class="keyword">if</span> ( enclosingScope != <span class="keyword">null</span> ) <span class="keyword">return</span> enclosingScope.resolve(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// not found</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">define</span><span class="params">(Symbol sym)</span> </span>&#123;</span><br><span class="line">        symbols.put(sym.name, sym);</span><br><span class="line">        sym.scope = <span class="keyword">this</span>; <span class="comment">// track the scope in each symbol</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Scope <span class="title">getEnclosingScope</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> enclosingScope; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> getScopeName()+<span class="string">":"</span>+symbols.keySet().toString(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: SymbolList/GlobalScope.java</span></span><br><span class="line"><span class="keyword">package</span> SymbolList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalScope</span> <span class="keyword">extends</span> <span class="title">BaseScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlobalScope</span><span class="params">(Scope enclosingScope)</span> </span>&#123; <span class="keyword">super</span>(enclosingScope); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getScopeName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"globals"</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: SymbolList/LocalScope.java</span></span><br><span class="line"><span class="keyword">package</span> SymbolList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalScope</span> <span class="keyword">extends</span> <span class="title">BaseScope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalScope</span><span class="params">(Scope parent)</span> </span>&#123; <span class="keyword">super</span>(parent); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getScopeName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"locals"</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Symbol.java</span></span><br><span class="line"><span class="keyword">package</span> SymbolList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Symbol</span> </span>&#123; <span class="comment">// A generic programming language symbol</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Type &#123;tINVALID, tVOID, tINT, tFLOAT&#125;</span><br><span class="line"></span><br><span class="line">    String name;      <span class="comment">// All symbols at least have a name</span></span><br><span class="line">    Type type;</span><br><span class="line">    Scope scope;      <span class="comment">// All symbols know what scope contains them.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Symbol</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Symbol</span><span class="params">(String name, Type type)</span> </span>&#123; <span class="keyword">this</span>(name); <span class="keyword">this</span>.type = type; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( type!=Type.tINVALID ) <span class="keyword">return</span> <span class="string">'&lt;'</span>+getName()+<span class="string">":"</span>+type+<span class="string">'&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: FunctionSymbol.java</span></span><br><span class="line"><span class="keyword">package</span> SymbolList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionSymbol</span> <span class="keyword">extends</span> <span class="title">Symbol</span> <span class="keyword">implements</span> <span class="title">Scope</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Symbol&gt; arguments = <span class="keyword">new</span> LinkedHashMap&lt;String, Symbol&gt;();</span><br><span class="line">    Scope enclosingScope;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FunctionSymbol</span><span class="params">(String name, Type retType, Scope enclosingScope)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, retType);</span><br><span class="line">        <span class="keyword">this</span>.enclosingScope = enclosingScope;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Symbol <span class="title">resolve</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Symbol s = arguments.get(name);</span><br><span class="line">        <span class="keyword">if</span> ( s!=<span class="keyword">null</span> ) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="comment">// if not here, check any enclosing scope</span></span><br><span class="line">        <span class="keyword">if</span> ( getEnclosingScope() != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> getEnclosingScope().resolve(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// not found</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">define</span><span class="params">(Symbol sym)</span> </span>&#123;</span><br><span class="line">        arguments.put(sym.name, sym);</span><br><span class="line">        sym.scope = <span class="keyword">this</span>; <span class="comment">// track the scope in each symbol</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Scope <span class="title">getEnclosingScope</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> enclosingScope; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getScopeName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"function"</span>+<span class="keyword">super</span>.toString()+<span class="string">":"</span>+arguments.values(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: VariableSymbol.java</span></span><br><span class="line"><span class="keyword">package</span> SymbolList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * Excerpted from "The Definitive ANTLR 4 Reference",</span></span><br><span class="line"><span class="comment"> * published by The Pragmatic Bookshelf.</span></span><br><span class="line"><span class="comment"> * Copyrights apply to this code. It may not be used to create training material,</span></span><br><span class="line"><span class="comment"> * courses, books, articles, and the like. Contact us if you are in doubt.</span></span><br><span class="line"><span class="comment"> * We make no guarantees that this code is fit for any purpose.</span></span><br><span class="line"><span class="comment"> * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="comment">/** Represents a variable definition (name,type) in symbol table */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableSymbol</span> <span class="keyword">extends</span> <span class="title">Symbol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VariableSymbol</span><span class="params">(String name, Type type)</span> </span>&#123; <span class="keyword">super</span>(name, type); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Antlr是一款强大的语法分析器生成工具，可用于读取、处理、执行和翻译结构化的文本或二进制文件。它被广泛用于学术领域和工业生产领域，是众多语言、工具和框架的基石。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="源码检测" scheme="http://chengxiao19961022.github.io/categories/%E6%BA%90%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="Java" scheme="http://chengxiao19961022.github.io/tags/Java/"/>
    
      <category term="编译原理" scheme="http://chengxiao19961022.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>GDB学习</title>
    <link href="http://chengxiao19961022.github.io/2018/08/24/GDB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://chengxiao19961022.github.io/2018/08/24/GDB学习/</id>
    <published>2018-08-24T06:21:26.000Z</published>
    <updated>2018-09-04T05:52:39.194Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>源码检测包括代码检查、静态结构分析、代码质量度量等。它可以由人工进行，充分发挥人的逻辑思维优势，也可以借助软件工具自动进行。</p></div><a id="more"></a><p><a href="https://blog.csdn.net/chen_nan/article/details/25163261" target="_blank" rel="noopener">GDB使用入门</a></p><p><a href="https://blog.csdn.net/wu_cai_/article/details/79669842" target="_blank" rel="noopener">gdb 调试入门，大牛写的高质量指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;源码检测包括代码检查、静态结构分析、代码质量度量等。它可以由人工进行，充分发挥人的逻辑思维优势，也可以借助软件工具自动进行。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="源码检测" scheme="http://chengxiao19961022.github.io/categories/%E6%BA%90%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="Linux" scheme="http://chengxiao19961022.github.io/tags/Linux/"/>
    
      <category term="动态分析" scheme="http://chengxiao19961022.github.io/tags/%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-访问者模式入门</title>
    <link href="http://chengxiao19961022.github.io/2018/07/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8Fe%E5%85%A5%E9%97%A8/"/>
    <id>http://chengxiao19961022.github.io/2018/07/10/设计模式-访问者模式e入门/</id>
    <published>2018-07-10T09:28:22.000Z</published>
    <updated>2018-07-10T09:33:13.038Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>访问者模式是设计模式中的一种</p></div><a id="more"></a><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.cnblogs.com/chengxingliang/archive/2011/10/24/2214033.html" target="_blank" rel="noopener">极速理解设计模式系列：18.访问者模式(Visitor Pattern)</a></li><li><a href="https://blog.csdn.net/chenjie19891104/article/details/6393770" target="_blank" rel="noopener">JAVA设计模式之Visitor模式</a></li><li><a href="https://blog.csdn.net/fanyun_01/article/details/51841355" target="_blank" rel="noopener">Visitor模式详解–设计模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;访问者模式是设计模式中的一种&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="源码检测" scheme="http://chengxiao19961022.github.io/categories/%E6%BA%90%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="设计模式" scheme="http://chengxiao19961022.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式入门</title>
    <link href="http://chengxiao19961022.github.io/2018/07/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://chengxiao19961022.github.io/2018/07/10/设计模式-观察者模式入门/</id>
    <published>2018-07-10T08:12:39.000Z</published>
    <updated>2018-07-10T09:26:13.159Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>观察者模式是设计模式中的一种，文转自<a href="http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html#id15" target="_blank" rel="noopener">观察者模式</a></p></div><a id="more"></a><h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展，这就是观察者模式的模式动机。</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>观察者模式(Observer Pattern)：定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。</p><p>观察者模式是一种对象行为型模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>观察者模式包含如下角色：</p><ul><li>Subject: 目标</li><li>ConcreteSubject: 具体目标</li><li>Observer: 观察者</li><li>ConcreteObserver: 具体观察者</li></ul><p><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/Obeserver.jpg" alt=""></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/seq_Obeserver.jpg" alt=""></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Subject.h</span></span><br><span class="line"><span class="comment">// Created by 程潇 on 2018/7/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PRACTICE_CLION_SUBJECT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRACTICE_CLION_SUBJECT_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Obeserver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Subject();</span><br><span class="line">    <span class="keyword">virtual</span> ~Subject();</span><br><span class="line">    Obeserver *m_Obeserver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attach</span><span class="params">(Obeserver * pObeserver)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">(Obeserver * pObeserver)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> i)</span></span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;Obeserver*&gt; m_vtObj;</span><br><span class="line">    <span class="keyword">int</span> subState;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//PRACTICE_CLION_SUBJECT_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Subject.cpp</span></span><br><span class="line"><span class="comment">// Created by 程潇 on 2018/7/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Subject.h"</span></span></span><br><span class="line">Subject::Subject()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Subject::~Subject()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Subject::attach(Obeserver * pObeserver)&#123;</span><br><span class="line">    m_vtObj.push_back(pObeserver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Subject::detach(Obeserver * pObeserver)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;Obeserver*&gt;::iterator itr = m_vtObj.begin();</span><br><span class="line">        itr != m_vtObj.end(); itr++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*itr == pObeserver)</span><br><span class="line">        &#123;</span><br><span class="line">            m_vtObj.erase(itr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Subject::notify()&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;Obeserver*&gt;::iterator itr = m_vtObj.begin();</span><br><span class="line">        itr != m_vtObj.end();</span><br><span class="line">        itr++)</span><br><span class="line">    &#123;</span><br><span class="line">        (*itr)-&gt;update(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteSubject.h</span></span><br><span class="line"><span class="comment">// Created by 程潇 on 2018/7/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PRACTICE_CLION_CONCRETESUBJECT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRACTICE_CLION_CONCRETESUBJECT_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Obeserver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Subject.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span>:</span><span class="keyword">public</span> Subject</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteSubject(<span class="built_in">string</span> n);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> subAState;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//PRACTICE_CLION_CONCRETESUBJECT_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteSubject.cpp</span></span><br><span class="line"><span class="comment">// Created by 程潇 on 2018/7/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteSubject.h"</span></span></span><br><span class="line"></span><br><span class="line">ConcreteSubject::ConcreteSubject(<span class="built_in">string</span> n) &#123;</span><br><span class="line">    name = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ConcreteSubject::getState()&#123;</span><br><span class="line">    <span class="keyword">return</span> subAState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ConcreteSubject::setState(<span class="keyword">int</span> i)&#123;</span><br><span class="line">    subAState = i;</span><br><span class="line">    notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obeserver.h</span></span><br><span class="line"><span class="comment">// Created by 程潇 on 2018/7/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PRACTICE_CLION_OBESERVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRACTICE_CLION_OBESERVER_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obeserver</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~Obeserver()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject * sub)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//PRACTICE_CLION_OBESERVER_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteObeserver.h</span></span><br><span class="line"><span class="comment">// Created by 程潇 on 2018/7/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PRACTICE_CLION_CONCRETEOBESERVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRACTICE_CLION_CONCRETEOBESERVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Obeserver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObeserver</span> :</span> <span class="keyword">public</span> Obeserver</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConcreteObeserver(<span class="built_in">string</span> name);</span><br><span class="line">    <span class="keyword">virtual</span> ~ConcreteObeserver();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject * sub)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_objName;</span><br><span class="line">    <span class="keyword">int</span> m_obeserverState;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//PRACTICE_CLION_CONCRETEOBESERVER_H</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteObeserver.cpp</span></span><br><span class="line"><span class="comment">// Created by 程潇 on 2018/7/10.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteObeserver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Subject.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteObeserver.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ConcreteObeserver::ConcreteObeserver(<span class="built_in">string</span> name)&#123;</span><br><span class="line">    m_objName = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConcreteObeserver::~ConcreteObeserver()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ConcreteObeserver::update(Subject * sub)&#123;</span><br><span class="line">    m_obeserverState = sub-&gt;getState();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"update oberserver["</span> &lt;&lt; m_objName &lt;&lt; <span class="string">"] state:"</span> &lt;&lt; m_obeserverState &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Subject.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteObeserver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ConcreteSubject.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Subject * subject = <span class="keyword">new</span> ConcreteSubject(<span class="string">"S"</span>);</span><br><span class="line">    Obeserver * objA = <span class="keyword">new</span> ConcreteObeserver(<span class="string">"A"</span>);</span><br><span class="line">    Obeserver * objB = <span class="keyword">new</span> ConcreteObeserver(<span class="string">"B"</span>);</span><br><span class="line">    subject-&gt;attach(objA);</span><br><span class="line">    subject-&gt;attach(objB);</span><br><span class="line"></span><br><span class="line">    subject-&gt;setState(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"--------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    subject-&gt;detach(objB);</span><br><span class="line">    subject-&gt;setState(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> subject;</span><br><span class="line">    <span class="keyword">delete</span> objA;</span><br><span class="line">    <span class="keyword">delete</span> objB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p>-观察者模式描述了如何建立对象与对象之间的依赖关系，如何构造满足这种需求的系统。</p><ul><li>这一模式中的关键对象是观察目标和观察者，一个目标可以有任意数目的与之相依赖的观察者，一旦目标的状态发生改变，所有的观察者都将得到通知。</li><li>作为对这个通知的响应，每个观察者都将即时更新自己的状态，以与目标状态同步，这种交互也称为发布-订阅(publishsubscribe)。目标是通知的发布者，它发出通知时并不需要知道谁是它的观察者，可以有任意数目的观察者订阅它并接收通知。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>观察者模式可以实现表示层和数据逻辑层的分离，并定义了稳定的消息更新传递机制，抽象了更新接口，使得可以有各种各样不同的表示层作为具体观察者角色。</li><li>观察者模式在观察目标和观察者之间建立一个抽象的耦合。</li><li>观察者模式支持广播通信。</li><li>观察者模式符合“开闭原则”的要求。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li><li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li><li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li></ul><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li><li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li></ul><h2 id="模式应用"><a href="#模式应用" class="headerlink" title="模式应用"></a>模式应用</h2><p>观察者模式在软件开发中应用非常广泛，如某电子商务网站可以在执行发送操作后给用户多个发送商品打折信息，某团队战斗游戏中某队友牺牲将给所有成员提示等等，凡是涉及到一对一或者一对多的对象交互场景都可以使用观察者模式</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>MVC模式是一种架构模式，它包含三个角色：模型(Model)，视图(View)和控制器(Controller)。观察者模式可以用来实现MVC模式，观察者模式中的观察目标就是MVC模式中的模型(Model)，而观察者就是MVC中的视图(View)，控制器(Controller)充当两者之间的中介者(Mediator)。当模型层的数据发生改变时，视图层将自动改变其显示内容。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。观察者模式是一种对象行为型模式。</li><li>观察者模式包含四个角色：目标又称为主题，它是指被观察的对象；具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；观察者将对观察目标的改变做出反应；在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</li><li>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。</li><li>观察者模式的主要优点在于可以实现表示层和数据逻辑层的分离，并在观察目标和观察者之间建立一个抽象的耦合，支持广播通信；其主要缺点在于如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间，而且如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li><li>观察者模式适用情况包括：一个抽象模型有两个方面，其中一个方面依赖于另一个方面；一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变；一个对象必须通知其他对象，而并不知道这些对象是谁；需要在系统中创建一个触发链。</li><li>在JDK的java.util包中，提供了Observable类以及Observer接口，它们构成了Java语言对观察者模式的支持。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;观察者模式是设计模式中的一种，文转自&lt;a href=&quot;http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html#id15&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;观察者模式&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="源码检测" scheme="http://chengxiao19961022.github.io/categories/%E6%BA%90%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="设计模式" scheme="http://chengxiao19961022.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SpotBugs安装及使用</title>
    <link href="http://chengxiao19961022.github.io/2018/07/06/SpotBugs%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://chengxiao19961022.github.io/2018/07/06/SpotBugs安装及使用/</id>
    <published>2018-07-06T01:49:55.000Z</published>
    <updated>2018-07-06T09:29:44.624Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>SpotBugs是Findbugs的继任者，Findbugs已经不再维护，不过SpotBugs继承了绝大部分Fingbugs的代码结构,他们的原理基本相同，同样利用了<a href="http://commons.apache.org/proper/commons-bcel/" target="_blank" rel="noopener">BCEL字节码程序设计库</a>，这个设计库专门用于分析java字节码，且都是基于观察者模式并给予实现。</p></div><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://spotbugs.github.io/" target="_blank" rel="noopener">官网网站</a></p><p><a href="http://spotbugs.readthedocs.io/en/latest/" target="_blank" rel="noopener">文档</a></p><p>SpotBugs是Findbugs的继任者（Findbugs已经不再维护），具体介绍可以参见<a href="https://chengxiao19961022.github.io/2018/07/03/Findbugs%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/">Findbugs的安装及使用</a>一文。</p><p>SpotBugs能够分析使用java1.0到1.9编译的程序,具备良好的扩展性，可以自定义bug pattern。</p><h1 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>下载二进制发行版本<a href="http://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.3/spotbugs-3.1.3.tgz" target="_blank" rel="noopener">tar</a>或<a href="http://repo.maven.apache.org/maven2/com/github/spotbugs/spotbugs/3.1.3/spotbugs-3.1.3.zip" target="_blank" rel="noopener">zip</a></li><li>解压并配置环境变量</li><li>直接运行bin目录下的可执行程序</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="http://spotbugs.readthedocs.io/en/latest/running.html" target="_blank" rel="noopener">官方使用描述</a></p><p>SpotBugs非插件版本支持gui和命令行两种使用方式,默认为gui，具体参数及使用说明参见官方使用描述。</p><p>注意：要分析的文件放在命令行的最后。</p><p>例：<code>spotbugs -textui -low -html -output result.html /path/to/src</code></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>SpotBugs具备良好的扩展性，将自定义的检测器工程打成jar包放置在plugin文件夹下便可以直接使用。</p><p>比较流行的插件：<a href="http://fb-contrib.sourceforge.net/" target="_blank" rel="noopener">fb-contrib</a><br>和<a href="http://find-sec-bugs.github.io/" target="_blank" rel="noopener">Find Security Bugs</a></p><p>也可以<a href="http://spotbugs.readthedocs.io/en/latest/implement-plugin.html" target="_blank" rel="noopener">自定义插件</a></p><ol><li><p>使用spotbugs-archetype创建maven工程,填写groupid,artifitid,package name以及initial version</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mvn archetype:generate \</span><br><span class="line">  -DarchetypeArtifactId=spotbugs-archetype \</span><br><span class="line">  -DarchetypeGroupId=com.github.spotbugs \</span><br><span class="line">  -DarchetypeVersion=0.2.0</span><br></pre></td></tr></table></figure></li><li><p>运行完上述命令便会创建好一个maven工程,这时候可以在src/test/java文件夹下添加自定义的检测器并进行测试</p></li><li><p>在src/main/resources目录下添加fingbugs.xml文件说明：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fingbugs.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Detector</span> <span class="attr">class</span>=<span class="string">"com.github.plugin.MyDetector"</span> <span class="attr">reports</span>=<span class="string">"MY_BUG"</span> <span class="attr">speed</span>=<span class="string">"fast"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BugPattern</span> <span class="attr">type</span>=<span class="string">"MY_BUG"</span> <span class="attr">category</span>=<span class="string">"CORRECTNESS"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在src/main/resources目录下添加messages.xml文件说明：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- messages.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Detector</span> <span class="attr">class</span>=<span class="string">"com.github.plugin.MyDetector"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Details</span>&gt;</span></span><br><span class="line">        Original detector to detect MY_BUG bug pattern.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Detector</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BugPattern</span> <span class="attr">type</span>=<span class="string">"MY_BUG"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ShortDescription</span>&gt;</span>Explain bug pattern shortly.<span class="tag">&lt;/<span class="name">ShortDescription</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LongDescription</span>&gt;</span></span><br><span class="line">        Explain existing problem in code, and how developer should improve their implementation.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LongDescription</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Details</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">            &lt;p&gt;Explain existing problem in code, and how developer should improve their implementation.&lt;/p&gt;</span><br><span class="line">        ]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BugPattern</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>打jar包，参考<a href="https://blog.csdn.net/qq_33195578/article/details/61417558" target="_blank" rel="noopener"><br>命令行mvn打包</a>,将target文件夹下的jar包放入spotbugs根目录下的plugin文件夹即可。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;SpotBugs是Findbugs的继任者，Findbugs已经不再维护，不过SpotBugs继承了绝大部分Fingbugs的代码结构,他们的原理基本相同，同样利用了&lt;a href=&quot;http://commons.apache.org/proper/commons-bcel/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BCEL字节码程序设计库&lt;/a&gt;，这个设计库专门用于分析java字节码，且都是基于观察者模式并给予实现。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="源码检测" scheme="http://chengxiao19961022.github.io/categories/%E6%BA%90%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="Java" scheme="http://chengxiao19961022.github.io/tags/Java/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Findbugs的安装及使用</title>
    <link href="http://chengxiao19961022.github.io/2018/07/03/Findbugs%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://chengxiao19961022.github.io/2018/07/03/Findbugs的安装及使用/</id>
    <published>2018-07-03T14:49:32.000Z</published>
    <updated>2018-07-09T06:04:20.092Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>源码检测包括代码检查、静态结构分析、代码质量度量等。它可以由人工进行，充分发挥人的逻辑思维优势，也可以借助软件工具自动进行。</p></div><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="源码检测"><a href="#源码检测" class="headerlink" title="源码检测"></a>源码检测</h2><p>(<a href="https://blog.csdn.net/dongwuming/article/details/49423909" target="_blank" rel="noopener">一些源码检测工具</a>)</p><p>源码检测包括代码检查、静态结构分析、代码质量度量等。它可以由人工进行，充分发挥人的逻辑思维优势，也可以借助软件工具自动进行。代码检查代码检查包括代码走查、桌面检查、代码审查等，主要检查代码和设计的一致性，代码对标准的遵循、可读性，代码的逻辑表达的正确性，代码结构的合理性等方面；可以发现违背程序编写标准的问题，程序中不安全、不明确和模糊的部分，找出程序中不可移植部分、违背程序编程风格的问题，包括变量检查、命名和类型审查、程序逻辑审查、程序语法检查和程序结构检查等内容。</p><h2 id="Findbugs介绍"><a href="#Findbugs介绍" class="headerlink" title="Findbugs介绍"></a>Findbugs介绍</h2><p>Findbugs是一个静态分析工具，它检查类或者JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。Findbugs自带检测器，其中有60余种Bad practice，80余种Correctness，1种 Internationalization，12种Malicious code vulnerability，27种Multithreaded correctness，23种Performance，43种Dodgy。我们还可以自己配置检查规则(做哪些检查,不做哪些检查)，也可以自己来实现独有的校验规则(用户自定义特定的bug模式需要继承它的接口,编写自己的校验类,属于高级技巧)。</p><h1 id="安装及运行（非插件版）（后文都是基于非插件版）"><a href="#安装及运行（非插件版）（后文都是基于非插件版）" class="headerlink" title="安装及运行（非插件版）（后文都是基于非插件版）"></a>安装及运行（非插件版）（后文都是基于非插件版）</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><blockquote><p>必须：</p></blockquote><ol><li><p>Jdk7u（新版ant编译时会报错）</p><ol><li>解压至/usr/local</li><li><p>配置环境变量vim /etc/bash.bashrc</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.7.0_80</span><br><span class="line">export JRE_HOME=/usr/local/jdk1.7.0_80/jre</span><br><span class="line">export PATH=$PATH:/usr/local/jdk1.7.0_80/bin</span><br><span class="line">export CLASSPATH=./:/usr/local/jdk1.7.0_80/lib:/usr/local/jdk1.7.0_80/jre/lib</span><br></pre></td></tr></table></figure></li><li><p>source并查看version</p></li></ol></li><li><p>Ant-1.9.x（<a href="https://ant.apache.org/bindownload.cgi）" target="_blank" rel="noopener">https://ant.apache.org/bindownload.cgi）</a></p><ol><li>解压至/usr/local</li><li><p>配置环境变量vim /etc/bash.bashrc</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set Ant enviroment</span><br><span class="line">export ANT_HOME=/usr/apache-ant-1.9.2</span><br><span class="line">export PATH=$PATH:$ANT_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>source并查看version</p></li></ol></li></ol><blockquote><p>Git</p><p>非必须：</p></blockquote><h2 id="安装findbugs"><a href="#安装findbugs" class="headerlink" title="安装findbugs"></a>安装findbugs</h2><ol><li>下载源码：<a href="https://sourceforge.net/projects/findbugs/files/findbugs/3.0.1/findbugs-3.0.1-source.zip/download?use_mirror=jaist&amp;download=" target="_blank" rel="noopener">https://sourceforge.net/projects/findbugs/files/findbugs/3.0.1/findbugs-3.0.1-source.zip/download?use_mirror=jaist&amp;download=</a></li><li>进入目录后运行ant build</li><li><p>配置环境变量vim /etc/bash.bashrc</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set findbugshome</span><br><span class="line">export FINDBUGS_HOME=/usr/local/findbugs-3.0.1</span><br><span class="line">export PATH=$PATH:$FINDBUGS_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>source激活</p></li></ol><h2 id="运行findbugs"><a href="#运行findbugs" class="headerlink" title="运行findbugs"></a>运行findbugs</h2><p>输入命令findbugs直接进入gui，或者带命令行</p><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>它主要用到的技术是缺陷模式匹配和数据流分析：</p><h2 id="缺陷模式匹配"><a href="#缺陷模式匹配" class="headerlink" title="缺陷模式匹配"></a>缺陷模式匹配</h2><p>事先从代码分析经验中收集足够多的共性缺陷模式，将待分析代码与已有的共性缺陷模式进行模式匹配，从而完成软件的安全分析。这种方式的优点是简单方便，但是要求内置足够多缺陷模式，且容易产生误报。</p><h2 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h2><p>数据流分析也是一种软件验证技术，这种技术通过收集代码中引用到的变量信息，从而分析变量在程序中的赋值、引用以及传递等情况。对数据流进行 分析可以确定变量的定义以及在代码中被引用的情况，同时还能够检查代码数据流异常，如引用在前赋值在后、只赋值无引用等。数据流分析主要适合检验程序中的 数据域特性。</p><h2 id="检测对象"><a href="#检测对象" class="headerlink" title="检测对象"></a>检测对象</h2><p>FindBugs检查.class文件，基于Bug Patterns概念，查找javabytecode(.class文件)中的潜在bug。主要检查bytecode中的bug patterns，如NullPoint空指针检查、没有合理关闭资源、字符串相同判断错（==，而不是equals）等。</p><h2 id="检测能力"><a href="#检测能力" class="headerlink" title="检测能力"></a>检测能力</h2><p>Findbugs自带检测器，其中有60余种Bad practice，80余种Correctness，1种 Internationalization，12种Malicious code vulnerability，27种Multithreaded correctness，23种Performance，43种Dodgy。</p><p>1) Bad practice 不佳实践：常见代码错误，用于静态代码检查时进行缺陷模式匹配(如重写equals但没重写 hashCode，或相反情况等)<br>2) Correctness 可能导致错误的代码(如空指针引用、无限循环等)<br>3) Internationalization 国际化相关问题（如错误的字符串转换等）<br>4) Malicious code vulnerability 可能受到的恶意攻击（如访问权限修饰符的定义等）<br>5) Multithreaded correctness 多线程的正确性（如多线程编程时常见的同步，线程调度问题等）<br>6) Performance 运行时性能问题（如由变量定义，方法调用导致的代码低效问题等）<br>7) Security 安全问题（如HTTP，SQL，DB等）<br>8) Dodgy code 导致自身错误的代码（如未确认的强制转换、冗余的空值检查等）</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>FindBugs有两种使用形式，一是作为插件，放在Eclipse中使用，二是提供软件运行。而作为插件的形式比较方便简单，个人觉得使用起来比较合适。</p><h1 id="深入理解findbugs"><a href="#深入理解findbugs" class="headerlink" title="深入理解findbugs"></a>深入理解findbugs</h1><ol><li>Findbugs不是通过分析类文件的形式或结构来确定程序的意图，而是通常使用 观察者模式，检查类或者 JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题。PMD也是一款静态代码分析工具，它是分析Java源文件。</li><li><p>可以下载到源代码，对源代码进行分析。</p><p> 1）src/jui包是Findbugs开发UI界面使用到的包，src/junit是单元测试包，里面包含有对很多类的测试用例。etc文件下是包含的一些配置文件。</p><p> 2）src/tools包下面有四个子文件夹，里面包含的是一些公用的工具类，比如打印bug描述，生成xml文件等。</p><p> 3）src/antTask包下面是针对Ant的一些类。</p><p> 4）最主要的就是src/java包下面的将近50个子文件夹，如下（未截完）：</p><p> 该工具自带了一些检测器，于此同时，开发者可以根据自己的需求设计编写特定于应用程序的缺陷检测器。</p><p> 5）有一个专门的文件夹edu.umd.cs.findbugs.detect，里面包含该工具提供的所有检测器，FindBugs 利用了 Byte Code Engineering Library，或称为 BCEL，以实现其检测器。所有字节码扫描检测器都基于 visitor 模式，FindBugs 实现了这个模式。它提供了这些方法的默认实现，在实现自定义检测器时要覆盖这些方法。我们将侧重于两个方法——visit(Code)和sawOpcode(int)。在 FindBugs 分析类时，它会在分析方法内容时调用visit(Code)方法。与此类似，FindBugs 在分析方法正文中的每一个操作码时调用sawOpcode(int)方法。</p></li></ol><h1 id="定制规则"><a href="#定制规则" class="headerlink" title="定制规则"></a>定制规则</h1><blockquote><p>很棒的参考：</p></blockquote><p><a href="https://www.ibm.com/developerworks/cn/java/j-findbug2/" target="_blank" rel="noopener">如何编写自定义检测器以查找特定于应用程序的问题</a></p><p><a href="https://blog.csdn.net/oggboy/article/details/51840279" target="_blank" rel="noopener">静态代码扫描——FindBugs自定义规则入门</a></p><p><a href="https://www.jianshu.com/p/18069b96f44c" target="_blank" rel="noopener">增加自定义findbugs规则集</a></p><p>编写完自定义的规则后配置两个xml文件然后使用ant重新打包生成即可</p><h2 id="关于如何编写规则"><a href="#关于如何编写规则" class="headerlink" title="关于如何编写规则"></a>关于如何编写规则</h2><ol><li>FindBugs利用了<a href="http://commons.apache.org/proper/commons-bcel/" target="_blank" rel="noopener">BCEL字节码程序设计库</a>，这个设计库专门用于分析java字节码，<a href="http://www.prayerlaputa.com/?p=76" target="_blank" rel="noopener">简明教程</a>,其<a href="http://commons.apache.org/proper/commons-bcel/apidocs/index.html" target="_blank" rel="noopener">api文档</a></li><li>需要熟悉fingbugs检测器提供的<a href="http://findbugs.sourceforge.net/api/index.html" target="_blank" rel="noopener">api</a></li></ol><h2 id="规则整理"><a href="#规则整理" class="headerlink" title="规则整理"></a>规则整理</h2><p><a href="https://blog.csdn.net/natural_story/article/details/53260211" target="_blank" rel="noopener">中文1</a></p><p><a href="https://blog.csdn.net/hufang_lele/article/details/47090215" target="_blank" rel="noopener">中文2</a></p><p><a href="http://findbugs.sourceforge.net/bugDescriptions.html" target="_blank" rel="noopener">原文</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.ibm.com/developerworks/cn/java/j-findbug2/" target="_blank" rel="noopener">编写自定义检测器</a></p><p><a href="https://www.ibm.com/developerworks/cn/java/j-findbug1/" target="_blank" rel="noopener">提高代码质量</a></p><p><a href="https://www.cnblogs.com/doit8791/archive/2012/10/22/2734730.html" target="_blank" rel="noopener">findBugs学习小结</a></p><p><a href="https://www.jianshu.com/p/70f2d960b081" target="_blank" rel="noopener">FindBugs，一个不错的静态分析工具</a></p><p><a href="https://www.jianshu.com/p/18069b96f44c" target="_blank" rel="noopener">增加自定义findbugs规则集</a></p><h1 id="SpotBugs"><a href="#SpotBugs" class="headerlink" title="SpotBugs"></a><a href="https://spotbugs.github.io/" target="_blank" rel="noopener">SpotBugs</a></h1><blockquote><p>SpotBugs是Findbugs的继任者，Findbugs已经不再维护，不过SpotBugs继承了绝大部分Fingbugs的代码结构。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;源码检测包括代码检查、静态结构分析、代码质量度量等。它可以由人工进行，充分发挥人的逻辑思维优势，也可以借助软件工具自动进行。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="源码检测" scheme="http://chengxiao19961022.github.io/categories/%E6%BA%90%E7%A0%81%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="Java" scheme="http://chengxiao19961022.github.io/tags/Java/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法小计B3</title>
    <link href="http://chengxiao19961022.github.io/2018/05/08/%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%A1B3/"/>
    <id>http://chengxiao19961022.github.io/2018/05/08/算法小计B3/</id>
    <published>2018-05-08T10:48:43.000Z</published>
    <updated>2018-05-08T14:11:13.754Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="leetcode-5-Longest-Palindromic-Substring"><a href="#leetcode-5-Longest-Palindromic-Substring" class="headerlink" title="leetcode-5 Longest Palindromic Substring"></a>leetcode-5 Longest Palindromic Substring</h1><h2 id="best-solution"><a href="#best-solution" class="headerlink" title="best solution"></a>best solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.size() &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> len = s.size();</span><br><span class="line">        <span class="keyword">int</span> middle = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxl = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left,right;</span><br><span class="line">        <span class="built_in">string</span> maxs = s.substr(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (middle&lt;len&amp;&amp;len-middle&gt;=maxl/<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            left = right = middle;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(right&lt;len<span class="number">-1</span>&amp;&amp; s[right]==s[right+<span class="number">1</span>]) ++right;</span><br><span class="line">            middle = right+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(right&lt;len<span class="number">-1</span>&amp;&amp;left&gt;<span class="number">0</span>&amp;&amp;s[right+<span class="number">1</span>]==s[left<span class="number">-1</span>])&#123;</span><br><span class="line">                ++right;</span><br><span class="line">                --left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(maxl&lt;right-left+<span class="number">1</span>) &#123;</span><br><span class="line">                maxl = right-left+<span class="number">1</span>;</span><br><span class="line">                maxs = s.substr(left,maxl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="first-commit"><a href="#first-commit" class="headerlink" title="first commit"></a>first commit</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.size();</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>, e = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxl = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">string</span> maxs = s.substr(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (len - b &gt; maxl)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (e - b+<span class="number">1</span> &gt; maxl)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> l = isPalindromic(s, b, e);</span><br><span class="line">                <span class="keyword">if</span> (!l)</span><br><span class="line">                &#123;</span><br><span class="line">                    --e;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (l &gt; maxl)</span><br><span class="line">                &#123;</span><br><span class="line">                    maxl = l;</span><br><span class="line">                    maxs = s.substr(b, maxl);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                --e;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ++b;</span><br><span class="line">            e = len - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">isPalindromic</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = b, j = e;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[j])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (e - b + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="leetcode-6-ZigZag-Conversion"><a href="#leetcode-6-ZigZag-Conversion" class="headerlink" title="leetcode-6 ZigZag Conversion"></a><a href="https://leetcode.com/problems/zigzag-conversion/description/" target="_blank" rel="noopener">leetcode-6 ZigZag Conversion</a></h1><h2 id="best-solution-1"><a href="#best-solution-1" class="headerlink" title="best solution"></a>best solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> len = s.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pa(numRows, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> rows = <span class="number">0</span>; rows &lt; numRows&amp;&amp;i&lt;len; rows++)</span><br><span class="line">            &#123;</span><br><span class="line">                pa[rows].push_back(s[i]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> rows = numRows<span class="number">-2</span>; rows &gt; <span class="number">0</span>&amp;&amp;i&lt;len; rows--)</span><br><span class="line">            &#123;</span><br><span class="line">                pa[rows].push_back(s[i]);</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> zigzag;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> &amp;str : pa)</span><br><span class="line">            zigzag += str;</span><br><span class="line">        <span class="keyword">return</span> zigzag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="first-commit-1"><a href="#first-commit-1" class="headerlink" title="first commit"></a>first commit</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> len = s.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; pa[numRows];</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> jishu = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len;)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (row == numRows)</span><br><span class="line">            &#123;</span><br><span class="line">                jishu = !jishu;</span><br><span class="line">                row = numRows<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (row == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                jishu = !jishu;</span><br><span class="line">                row = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jishu)</span><br><span class="line">            &#123;</span><br><span class="line">                pa[row].push_back(s[i]);</span><br><span class="line">                ++i;</span><br><span class="line">                ++row;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (row == <span class="number">0</span> || row == numRows - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pa[row].push_back(<span class="string">'#'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pa[row].push_back(s[i]);</span><br><span class="line">                    ++i;</span><br><span class="line">                &#125;</span><br><span class="line">                --row;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> sout;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> j = pa[i].begin(); j != pa[i].end(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (*j != <span class="string">'#'</span>)</span><br><span class="line">                    sout.push_back(*j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>DAG上的动态规划</title>
    <link href="http://chengxiao19961022.github.io/2018/05/02/DAG%E4%B8%8A%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://chengxiao19961022.github.io/2018/05/02/DAG上的动态规划/</id>
    <published>2018-05-02T13:41:11.000Z</published>
    <updated>2018-06-16T12:46:22.277Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="矩形问题"><a href="#矩形问题" class="headerlink" title="矩形问题"></a>矩形问题</h1><p>嵌套矩形问题。有n个矩形，每个矩形可以用两个整数a、b描述，表示它的长和宽。矩<br>形X(a,b)可以嵌套在矩形Y(c, d)中，当且仅当a＜c，b＜d，或者b＜c，a＜d（相当于把矩<br>形X旋转90°）。例如，(1, 5)可以嵌套在(6, 2)内，但不能嵌套在(3, 4)内。你的任务是选出尽<br>量多的矩形排成一行，使得除了最后一个之外，每一个矩形都可以嵌套在下一个矩形内。如<br>果有多解，矩形编号的字典序应尽量小。</p><h2 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h2><p>矩形之间的“可嵌套”关系是一个典型的二元关系，二元关系可以用图来建模。如果矩<br>形X可以嵌套在矩形Y里，就从X到Y连一条有向边。这个有向图是无环的，因为一个矩形无<br>法直接或间接地嵌套在自己内部。换句话说，它是一个DAG。这样，所要求的便是DAG上<br>的最长路径。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划问题是逆向思考的</span></span><br><span class="line"><span class="comment">// dp(i)表示从序号i出发的最长路径</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>&amp; ans = d[i];</span><br><span class="line">    <span class="comment">// 为了不浪费了劳动力，如果d[i]被确定过，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(ans &gt; <span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// i-&gt;j有边,表示i能走向j，d[i]则为ans和d[j]+1的最大值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j＋＋)</span><br><span class="line">        <span class="keyword">if</span>(G[i][j]) ans = max(ans, dp(j)＋<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 经过上述步骤，d[i]就确定了不会再改变了</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[n];</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">    d[i] = dp(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选出最大的d[max] 然后 print_ans(max)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_ans</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"％d "</span>, i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(G[i][j] &amp;&amp; d[i] == d[j]+<span class="number">1</span>)&#123;</span><br><span class="line">        print_ans(j);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选出最大的d[max] 然后 print_ans(max)</span></span><br><span class="line"><span class="comment">// 打出所有最长路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_ans</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// printf("％d ", i);</span></span><br><span class="line">    <span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="keyword">if</span>(G[vec.back()][j] &amp;&amp; d[vec.back()] == d[j]+<span class="number">1</span>)&#123;</span><br><span class="line">        ok = <span class="number">0</span>;</span><br><span class="line">        vec.push_back(j);</span><br><span class="line">        print_ans(vec);</span><br><span class="line">        <span class="comment">// break;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ok)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i = vec.begin(); i!=vec.end(); ++i)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;vec[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="硬币问题"><a href="#硬币问题" class="headerlink" title="硬币问题"></a>硬币问题</h1><p>硬币问题。有n种硬币，面值分别为V1, V2, …, Vn，每种都有无限多。给定非负整数S，<br>可以选用多少个硬币，使得面值之和恰好为S？输出硬币数目的最小值和最大值。<br>1≤n≤100，0≤S≤10000，1≤Vi≤S。</p><h2 id="HINt"><a href="#HINt" class="headerlink" title="HINt"></a>HINt</h2><p>此问题尽管看上去和嵌套矩形问题很不一样，但本题的本质也是DAG上的路径问题。将<br>每种面值看作一个点，表示“还需要凑足的面值”，则初始状态为S，目标状态为0。若当前在<br>状态i，每使用一个硬币j，状态便转移到i－Vj。<br>这个模型和上一题类似，但也有一些明显的不同之处：上题并没有确定路径的起点和终<br>点（可以把任意矩形放在第一个和最后一个），而本题的起点必须为S，终点必须为0；点固<br>定之后“最短路”才是有意义的。在上题中，最短序列显然是空（如果不允许空，就是单个矩<br>形，不管怎样都是平凡的），而本题的最短路却不容易确定。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最长路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dpa</span><span class="params">(<span class="keyword">int</span> S)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判重是为了不浪费成果</span></span><br><span class="line">    <span class="keyword">if</span>(vis[S]) <span class="keyword">return</span> d[S];</span><br><span class="line">    vis[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>&amp; ans = d[S];</span><br><span class="line">    ans = -(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i＋＋) <span class="keyword">if</span>(S &gt;= V[i]) ans = max(ans, dpa(S-V[i])＋<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最短路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dpi</span><span class="params">(<span class="keyword">int</span> S)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判重是为了不浪费成果</span></span><br><span class="line">    <span class="keyword">if</span>(vis[S]) <span class="keyword">return</span> d[S];</span><br><span class="line">    vis[S] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>&amp; ans = d[S];</span><br><span class="line">    ans = INF;</span><br><span class="line">    <span class="keyword">if</span>(S=<span class="number">0</span>) ans = -(<span class="number">1</span>&lt;&lt;<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i＋＋) <span class="keyword">if</span>(S &gt;= V[i]) ans = min(ans, dpi(S-V[i])＋<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最短和最长</span></span><br><span class="line">minv[<span class="number">0</span>] = maxv[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i＋＋)&#123;</span><br><span class="line">    minv[i] = INF; maxv[i] = -INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态流的方向为S-&gt;0，所以外层是1-&gt;S;为了保证计算i时，i-V[j]已经被计算</span></span><br><span class="line"><span class="comment">// 参考算法小计B2 18-5-3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= S; i＋＋)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j＋＋)</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= V[j])&#123;</span><br><span class="line">            minv[i] = min(minv[i], minv[i-V[j]] + <span class="number">1</span>);</span><br><span class="line">            maxv[i] = max(maxv[i], maxv[i-V[j]] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, minv[S], maxv[S]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_ans</span><span class="params">(<span class="keyword">int</span>* d, <span class="keyword">int</span> S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(S&gt;=V[i] &amp;&amp; d[S]==d[S-V[i]]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">            print_ans(d, S-V[i]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>向量化短文本及相似度的计算</title>
    <link href="http://chengxiao19961022.github.io/2018/04/21/%E5%90%91%E9%87%8F%E5%8C%96%E7%9F%AD%E6%96%87%E6%9C%AC%E5%8F%8A%E7%9B%B8%E4%BC%BC%E5%BA%A6%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
    <id>http://chengxiao19961022.github.io/2018/04/21/向量化短文本及相似度的计算/</id>
    <published>2018-04-21T13:32:30.000Z</published>
    <updated>2018-04-23T02:56:53.856Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>两篇中文文本，如何计算相似度？相似度是数学上的概念，自然语言肯定无法完成，所有要把文本转化为向量。转化为向量之后便可以使用欧式距离、余弦距离等计算相似度，或者通过Softmax网络（或基于Hierarchical Softmax的模型或基于Negative Sampling的模型）计算属类概率。</p></div><a id="more"></a><p>【转】 <a href="https://www.jianshu.com/p/edf666d3995f" target="_blank" rel="noopener">python文本相似度计算</a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>分词、去停用词</li><li>词袋模型向量化文本</li><li>TF-IDF模型向量化文本</li><li>LSI模型向量化文本</li><li>计算相似度</li></ol><h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p>如何向量化：</p><h2 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h2><p>最简单的表示方法是词袋模型。把一篇文本想象成一个个词构成的，所有词放入一个袋子里，没有先后顺序、没有语义。<br>例如：<br>John likes to watch movies. Mary likes too.<br>John also likes to watch football games.<br>这两个句子，可以构建出一个词典，key为上文出现过的词，value为这个词的索引序号<br>{“John”: 1, “likes”: 2,”to”: 3, “watch”: 4, “movies”: 5,”also”: 6, “football”: 7, “games”: 8,”Mary”: 9, “too”: 10}<br>那么，上面两个句子用词袋模型表示成向量就是：<br>[1, 2, 1, 1, 1, 0, 0, 0, 1, 1]<br>[1, 1,1, 1, 0, 1, 1, 1, 0, 0]<br>相对于英文，中文更复杂一些，涉及到分词。准确地分词是所有中文文本分析的基础，本文使用结巴分词，完全开源而且分词准确率相对有保障。</p><h2 id="TF-IDF模型"><a href="#TF-IDF模型" class="headerlink" title="TF-IDF模型"></a>TF-IDF模型</h2><p>词袋模型简单易懂，但是存在问题。中文文本里最常见的词是“的”、“是”、“有”这样的没有实际含义的词。一篇关于足球的中文文本，“的”出现的数量肯定多于“足球”。所以，要对文本中出现的词赋予权重。<br>一个词的权重由TF * IDF 表示，其中TF表示词频，即一个词在这篇文本中出现的频率；IDF表示逆文档频率，即一个词在所有文本中出现的频率倒数。因此，一个词在某文本中出现的越多，在其他文本中出现的越少，则这个词能很好地反映这篇文本的内容，权重就越大。<br>回过头看词袋模型，只考虑了文本的词频，而TF-IDF模型则包含了词的权重，更加准确。文本向量与词袋模型中的维数相同，只是每个词的对应分量值换成了该词的TF-IDF值。</p><p><img src="https://wxt.sinaimg.cn/mw1024/005B4KCnly1fqmekthmjlj30fa04bmx1.jpg?tags=%5B%5D" alt=""></p><p><img src="https://wx4.sinaimg.cn/mw1024/005B4KCnly1fqmektid0yj30fa03cwec.jpg" alt=""></p><h2 id="LSI模型"><a href="#LSI模型" class="headerlink" title="LSI模型"></a>LSI模型</h2><p>TF-IDF模型足够胜任普通的文本分析任务，用TF-IDF模型计算文本相似度已经比较靠谱了，但是细究的话还存在不足之处。实际的中文文本，用TF-IDF表示的向量维数可能是几百、几千，不易分析计算。此外，一些文本的主题或者说中心思想，并不能很好地通过文本中的词来表示，能真正概括这篇文本内容的词可能没有直接出现在文本中。<br>因此，这里引入了Latent Semantic Indexing（LSI）从文本潜在的主题来进行分析。LSI是概率主题模型的一种，另一种常见的是LDA，核心思想是：每篇文本中有多个概率分布不同的主题；每个主题中都包含所有已知词，但是这些词在不同主题中的概率分布不同。LSI通过奇异值分解的方法计算出文本中各个主题的概率分布，严格的数学证明需要看相关论文。假设有5个主题，那么通过LSI模型，文本向量就可以降到5维，每个分量表示对应主题的权重。</p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(action=<span class="string">'ignore'</span>,category=UserWarning,module=<span class="string">'gensim'</span>)</span><br><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> gensim <span class="keyword">import</span> corpora, models, similarities</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历获取所有样本</span></span><br><span class="line">path = <span class="string">r'resource\sougou_data_all'</span></span><br><span class="line">filenames = []</span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(path):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> filenames:</span><br><span class="line">        fullpath = os.path.join(dirpath,file)</span><br><span class="line">        filenames.append(fullpath)</span><br><span class="line">        <span class="comment"># print(fullpath)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建停用词表</span></span><br><span class="line">stop_words = <span class="string">"resource/stop_words.txt"</span></span><br><span class="line">stopwords = codecs.open(stop_words,<span class="string">'r'</span>,encoding=<span class="string">'utf8'</span>).readlines()</span><br><span class="line">stopwords = [ w.strip() <span class="keyword">for</span> w <span class="keyword">in</span> stopwords ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结巴分词后的停用词性 [标点符号、连词、助词、副词、介词、时语素、‘的’、数词、方位词、代词]</span></span><br><span class="line">stop_flag = [<span class="string">'x'</span>, <span class="string">'c'</span>, <span class="string">'u'</span>,<span class="string">'d'</span>, <span class="string">'p'</span>, <span class="string">'t'</span>, <span class="string">'uj'</span>, <span class="string">'m'</span>, <span class="string">'f'</span>, <span class="string">'r'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对一篇文章分词、去停用词</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tokenization</span><span class="params">(filename)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read()</span><br><span class="line">        words = pseg.cut(text)</span><br><span class="line">    <span class="keyword">for</span> word, flag <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">not</span> <span class="keyword">in</span> stop_flag <span class="keyword">and</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</span><br><span class="line">            result.append(word)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立词袋模型-begin</span></span><br><span class="line">corpus = []</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> filenames:</span><br><span class="line">    <span class="comment"># print(tokenization(each))</span></span><br><span class="line">    corpus.append(tokenization(each))</span><br><span class="line"><span class="comment"># print (corpus[0])</span></span><br><span class="line">dictionary = corpora.Dictionary(corpus)</span><br><span class="line"><span class="comment"># print(dictionary)</span></span><br><span class="line"></span><br><span class="line">doc_vectors = [dictionary.doc2bow(text) <span class="keyword">for</span> text <span class="keyword">in</span> corpus]</span><br><span class="line"><span class="comment"># print (len(doc_vectors))</span></span><br><span class="line"><span class="comment"># print (doc_vectors)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立词袋模型-end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立TF-IDF模型-begin</span></span><br><span class="line">tfidf = models.TfidfModel(doc_vectors)</span><br><span class="line">tfidf_vectors = tfidf[doc_vectors]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print (len(tfidf_vectors))</span></span><br><span class="line"><span class="comment"># print (len(tfidf_vectors[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立TF-IDF模型-end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">testfile = <span class="string">'resource/sougou_data_all/财经/999.txt'</span></span><br><span class="line"></span><br><span class="line">query = tokenization(testfile)</span><br><span class="line"></span><br><span class="line">query_bow = dictionary.doc2bow(query)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出测试样本与训练样本的相似度</span></span><br><span class="line">index = similarities.MatrixSimilarity(tfidf_vectors)</span><br><span class="line">sims = index[query_bow]</span><br><span class="line"><span class="keyword">print</span> (list(enumerate(sims)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建LSI模型，设置主题数为9</span></span><br><span class="line">lsi = models.LsiModel(tfidf_vectors, id2word=dictionary, num_topics=<span class="number">9</span>)</span><br><span class="line">lsi_vector = lsi[tfidf_vectors]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> vec <span class="keyword">in</span> lsi_vector:</span><br><span class="line">    print(vec)<span class="comment"># 维度相等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出测试样本与训练样本的相似度</span></span><br><span class="line">query_lsi = lsi[query_bow]</span><br><span class="line">index = similarities.MatrixSimilarity(lsi_vector)</span><br><span class="line">sims = index[query_lsi]</span><br><span class="line"><span class="keyword">print</span> (list(enumerate(sims)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;两篇中文文本，如何计算相似度？相似度是数学上的概念，自然语言肯定无法完成，所有要把文本转化为向量。转化为向量之后便可以使用欧式距离、余弦距离等计算相似度，或者通过Softmax网络（或基于Hierarchical Softmax的模型或基于Negative Sampling的模型）计算属类概率。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="机器学习与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Python" scheme="http://chengxiao19961022.github.io/tags/Python/"/>
    
      <category term="NLP" scheme="http://chengxiao19961022.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>唯一的雪花（Unique snowflakes, UVa 11572）</title>
    <link href="http://chengxiao19961022.github.io/2018/04/21/%E5%94%AF%E4%B8%80%E7%9A%84%E9%9B%AA%E8%8A%B1%EF%BC%88Unique-snowflakes-UVa-11572%EF%BC%89/"/>
    <id>http://chengxiao19961022.github.io/2018/04/21/唯一的雪花（Unique-snowflakes-UVa-11572）/</id>
    <published>2018-04-21T03:25:16.000Z</published>
    <updated>2018-04-21T04:24:02.137Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个长度为n（n≤106）的序列A，找到一个尽量长的连续子序列AL～AR，使得该序<br>列中没有相同的元素。</p><h1 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h1><h2 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h2><p>假设序列元素从0开始编号，所求连续子序列的左端点为L，右端点为R。首先考虑起<br>点L=0的情况。可以从R=0开始不断增加R，相当于把所求序列的右端点往右延伸。当无法延<br>伸（即A[R+1]在子序列A[L～R]中出现过）时，只需增大L，并且继续延伸R。既然当前<br>的A[L～R]是可行解，L增大之后必然还是可行解，所以不必减少R，继续增大即可。<br>不难发现这个算法是正确的，不过真正有意思的是算法的时间复杂度。暂时先不考<br>虑“判断是否可以延伸”这个部分，每次要么把R加1，要么把L加1，而L和R最多从0增加到n-<br>1，所以指针增加的次数是O(n)的。<br>最后考虑“判断是否可以延伸”这个部分。比较容易想到的方法是用一个STL的set，保<br>存A[L～R]中元素的集合，当R增大时判断A[R+1]是否在set中出现，而R加1时把A[R+1]插入到<br>set中，L+1时把A[L]从set中删除。因为set的插入删除和查找都是O(logn)的，所以这个算法的<br>时间复杂度为O(nlogn)。代码如下：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> L=<span class="number">0</span>, R=<span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;n)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(R&lt;n&amp;&amp;!s.count(A[R]))&#123;</span><br><span class="line">                s.insert(A[R])</span><br><span class="line">                ++R;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(ans, R - L);</span><br><span class="line">            ++L;</span><br><span class="line">            s.erase(A[L])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h1><h2 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h2><p>另一个方法是用一个map求出last[i]，即下标i的“上一个相同元素的下标”。例如，输入<br>序列为3 2 4 1 3 2 3，当前区间是[1,3]（即元素2, 4, 1），是否可以延伸呢？下一个数是<br>A[5]=3，它的“上一个相同位置”是下标0（A[0]=3），不在区间中，因此可以延伸。map的所<br>有操作都是O(logn)的，但后面所有操作的时间复杂度均为O(1)，总时间复杂度也<br>是O(nlogn)。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> A[maxn], last[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cur;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        cur.clear( );</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">            <span class="keyword">if</span>(!cur.count(A[i])) last[i] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> last[i] = cur[A[i]];</span><br><span class="line">            cur[A[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(R&lt;n)&#123;</span><br><span class="line">            <span class="keyword">while</span>(R&lt;n&amp;&amp;last[R]&lt;L) ++R;</span><br><span class="line">            ans = max(ans, R - L);</span><br><span class="line">            ++L;</span><br><span class="line">            <span class="comment">// L = last[R]+1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Solution::lengthOfLongestSubstring(<span class="built_in">string</span> s) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dict(<span class="number">256</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="comment">// map&lt;char, int&gt; mp;</span></span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>, start = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dict[s[i]] &gt; start)</span><br><span class="line">            start = dict[s[i]];</span><br><span class="line">        <span class="comment">//if(mp.count(s[i]))</span></span><br><span class="line">        <span class="comment">//    if(mp[s[i]] &gt; start)</span></span><br><span class="line">        <span class="comment">//        start = mp[s[i]];</span></span><br><span class="line">        dict[s[i]] = i;</span><br><span class="line">        maxLen = max(maxLen, i - start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title> 路由器逆向分析------firmware-mod-kit工具安装和使用说明</title>
    <link href="http://chengxiao19961022.github.io/2018/04/19/%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91%E5%88%86%E6%9E%90-firmware-mod-kit%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://chengxiao19961022.github.io/2018/04/19/路由器逆向分析-firmware-mod-kit工具安装和使用说明/</id>
    <published>2018-04-19T12:20:25.000Z</published>
    <updated>2018-04-19T12:37:23.137Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>固件逆向的工具，firmware-mod-kit是集大成者</p></div><a id="more"></a><p>转自<a href="https://blog.csdn.net/qq1084283172/article/details/68061957" target="_blank" rel="noopener"> 路由器逆向分析——firmware-mod-kit工具安装和使用说明</a></p><p><a href="https://bitsum.com//firmware_mod_kit.htm" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://forum.bitsum.com/forum/index.php/board,12.html" target="_blank" rel="noopener">论坛</a></p><h1 id="firmware-mod-kit工具的安装（Ubuntu）"><a href="#firmware-mod-kit工具的安装（Ubuntu）" class="headerlink" title="firmware-mod-kit工具的安装（Ubuntu）"></a>firmware-mod-kit工具的安装（Ubuntu）</h1><p>firmware-mod-kit工具的功能和binwalk工具的类似，其实firmware-mod-kit工具在功能上有调用binwalk工具提供的功能以及其他的固件解包工具的整合。下载firmware-mod-kit工具的源码进入到src目录下就能够看到firmware-mod-kit工具整合了那些固件提取和文件系统解压的工具。firmware-mod-kit工具的功能有固件文件的解包和打包、固件提取文件系统的解压和压缩、DD-WRT Web Pages的修改等，在每个整合的固件分析工具的源码文件夹里都有相关的使用说明。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential zlib1g-dev liblzma-dev python-magic</span><br></pre></td></tr></table></figure><h2 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mirror/firmware-mod-kit.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入源码目录</span></span><br><span class="line"><span class="built_in">cd</span> firmware-mod-kit/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行configure文件生成Makefile文件然后make编译生成可执行文件</span></span><br><span class="line">./configure &amp;&amp; make</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="解包固件提取内核和文件系统"><a href="#解包固件提取内核和文件系统" class="headerlink" title="解包固件提取内核和文件系统"></a>解包固件提取内核和文件系统</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./extract-firmware.sh firmware.bin</span><br></pre></td></tr></table></figure><h2 id="重打包解包的内核和文件系统重建固件文件"><a href="#重打包解包的内核和文件系统重建固件文件" class="headerlink" title="重打包解包的内核和文件系统重建固件文件"></a>重打包解包的内核和文件系统重建固件文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./build-firmware.sh [-nopad] [-min]</span><br></pre></td></tr></table></figure><p>详见文档</p><p>附binwalk的使用方法</p><h1 id="binwalk的提取与分析"><a href="#binwalk的提取与分析" class="headerlink" title="binwalk的提取与分析"></a>binwalk的提取与分析</h1><h2 id="固件扫描"><a href="#固件扫描" class="headerlink" title="固件扫描"></a>固件扫描</h2><p>命令：binwalk firmware.bin      —–&gt;   通过扫描能够智能地发现目标文件中包含的所有可识别的文件类型。</p><h2 id="提取文件"><a href="#提取文件" class="headerlink" title="提取文件"></a>提取文件</h2><p>命令：binwalk -e firmware.bin ——&gt;   选项“-e”和“–extract”用于按照定义的配置文件中的提取方法从固件中提取探测到的文件系统。</p><p>命令：binwalk -Me firmware.bin —–&gt; 选项“-M”和“–matryoshka”用于根据magic签名扫描结果进行递归提取，仅对”-e”和“–dd”选项有效。</p><p>命令：binwalk -Me -d 5 firmware.bin —-&gt; 选项“-d”和“–depth=<int>“用于限制递归提取深度，默认深度为8，仅当“-M”选项存在时有效。</int></p><h2 id="显示完整的扫描结果"><a href="#显示完整的扫描结果" class="headerlink" title="显示完整的扫描结果"></a>显示完整的扫描结果</h2><p>命令：binwalk -I firmware.bin ——&gt;   选项”-I”和“–invalid”用于显示扫描的所有结果（即使是扫描过程中被定义为“invalid“的项）。</p><p>当我们认为binwalk错把有效的文件当成无效文件时，可以通过该选项来检查。</p><h2 id="指令系统分析"><a href="#指令系统分析" class="headerlink" title="指令系统分析"></a>指令系统分析</h2><p>选项“A”和“–opcodes”用于扫描指定文件中通用CPU架构的可执行代码。</p><p>由于某些操作码签名比较短，所以比较容易造成误判。如果我们需要确定一个可执行文件的CPU架构，可以使用该命令。</p><p>命令：命令：binwalk -A 70|more</p><p>使用Binwalk扫描从firmware.bin中提取的文件的文件“70”中的可执行代码，在该文件中可以发现CPU的架构（大端或者小端也会给出）。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;固件逆向的工具，firmware-mod-kit是集大成者&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="http://chengxiao19961022.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="固件逆向" scheme="http://chengxiao19961022.github.io/tags/%E5%9B%BA%E4%BB%B6%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>算法小计B2</title>
    <link href="http://chengxiao19961022.github.io/2018/04/17/%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%A1B2/"/>
    <id>http://chengxiao19961022.github.io/2018/04/17/算法小计B2/</id>
    <published>2018-04-17T14:57:25.000Z</published>
    <updated>2018-06-17T03:01:50.372Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="2018-04-16"><a href="#2018-04-16" class="headerlink" title="2018-04-16"></a>2018-04-16</h1><h2 id="P294-输出所有排列"><a href="#P294-输出所有排列" class="headerlink" title="P294 输出所有排列"></a>P294 输出所有排列</h2><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>递归调用</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字典序输出1-n的全排列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_permutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>* A, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur == n) &#123; <span class="comment">//递归边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">//尝试在A[cur]中填各种整数i</span></span><br><span class="line">        <span class="keyword">int</span> ok = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cur; j++)</span><br><span class="line">            <span class="keyword">if</span>(A[j] == i) ok = <span class="number">0</span>; <span class="comment">//如果i已经在A[0]~A[cur-1]出现过，则不能再选</span></span><br><span class="line">        <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">            A[cur] = i;</span><br><span class="line">            print_permutation(n, A, cur+<span class="number">1</span>); <span class="comment">//递归调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出集合P的全排列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_permutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>* A, <span class="keyword">int</span> cur, <span class="keyword">int</span>* P)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur == n) &#123; <span class="comment">//递归边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">//尝试在A[cur]中填P[i]</span></span><br><span class="line">        <span class="keyword">int</span> c1=<span class="number">0</span>, c2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cur; ++k) <span class="keyword">if</span>(A[k] == P[i]) ++c1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) <span class="keyword">if</span>(P[k] == P[i]) ++c2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(c1&lt;c2) &#123;</span><br><span class="line">            A[cur] = P[i];</span><br><span class="line">            print_permutation(n, A, cur+<span class="number">1</span>); <span class="comment">//递归调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2018-04-18"><a href="#2018-04-18" class="headerlink" title="2018-04-18"></a>2018-04-18</h1><h2 id="P298-子集生成"><a href="#P298-子集生成" class="headerlink" title="P298 子集生成"></a>P298 子集生成</h2><h3 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h3><p>增量构造法、位向量法、二进制法</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增量构造法,用到了定序的技巧：规定集合A中所有元素的编号从小到大排列，就不会把集合&#123;1, 2&#125;按照&#123;1, 2&#125;和&#123;2, 1&#125;输出两次了。</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; int  n             集合为0~n-1</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; int* A             存放子集，待打印</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; int  cur           当前元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_subset1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>* A, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cur; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, A[i]); <span class="comment">//打印当前集合</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> s = cur ? A[cur<span class="number">-1</span>]+<span class="number">1</span> : <span class="number">0</span>; <span class="comment">//确定当前元素的最小可能值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt; n; i++) &#123;</span><br><span class="line">        A[cur] = i;</span><br><span class="line">        print_subset(n, A, cur+<span class="number">1</span>); <span class="comment">//递归构造子集</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 位向量法</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; int  n             集合为0~n-1</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; int* B             存放子集，待打印</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; int  cur           当前元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_subset2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>* B, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur == n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cur; i++)</span><br><span class="line">            <span class="keyword">if</span>(B[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i); <span class="comment">//打印当前集合</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    B[cur] = <span class="number">1</span>; <span class="comment">//选第cur个元素</span></span><br><span class="line">    print_subset(n, B, cur+<span class="number">1</span>);</span><br><span class="line">    B[cur] = <span class="number">0</span>; <span class="comment">//不选第cur个元素</span></span><br><span class="line">    print_subset(n, B, cur+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二进制法</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; int n             集合为0~n-1</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; int s             当前二进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_subset3</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s)</span> </span>&#123; <span class="comment">//打印&#123;0, 1, 2,..., n-1&#125;的子集S</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">if</span>(s&amp;(<span class="number">1</span>&lt;&lt;i)) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i); <span class="comment">//这里利用了C语言"非0值都为真"的规定</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a[n];</span><br><span class="line"></span><br><span class="line">    print_subset1(n, a, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    print_subset2(n, a, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); i++) <span class="comment">//枚举各子集所对应的编码0, 1, 2,..., 2n-1</span></span><br><span class="line">        print_subset3(n, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2018-04-19"><a href="#2018-04-19" class="headerlink" title="2018-04-19"></a>2018-04-19</h1><h2 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h2><h3 id="HINT-2"><a href="#HINT-2" class="headerlink" title="HINT"></a>HINT</h3><p>使用book数组判重</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">3</span>][maxn] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> C[maxn];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur == n) tot++;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!book[<span class="number">0</span>][i]&amp;&amp;!book[<span class="number">1</span>][cur+i]&amp;&amp;!book[<span class="number">2</span>][cur-i+n])&#123;</span><br><span class="line">                C[cur] = i;</span><br><span class="line">                book[<span class="number">0</span>][i] = book[<span class="number">1</span>][cur+i] = book[<span class="number">2</span>][cur-i+n] = <span class="number">1</span>;</span><br><span class="line">                search(cur+<span class="number">1</span>);</span><br><span class="line">                book[<span class="number">0</span>][i] = book[<span class="number">1</span>][cur+i] = book[<span class="number">2</span>][cur-i+n] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    search(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"一共有"</span>&lt;&lt;tot&lt;&lt;<span class="string">"种放置方法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P370-和为0的4个值"><a href="#P370-和为0的4个值" class="headerlink" title="P370 和为0的4个值"></a>P370 和为0的4个值</h2><h3 id="HINT-3"><a href="#HINT-3" class="headerlink" title="HINT"></a>HINT</h3><p>hash降低复杂度</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vec(<span class="number">4</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;vec[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> aplusb = vec[<span class="number">0</span>][k] + vec[<span class="number">1</span>][i];</span><br><span class="line">            <span class="keyword">if</span> (!mp.count(aplusb)) mp[aplusb] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> mp[aplusb]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; n; ++l) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> cplusd = -(vec[<span class="number">2</span>][l] + vec[<span class="number">3</span>][i]);</span><br><span class="line">            <span class="keyword">if</span> (mp.count(cplusd))</span><br><span class="line">               count+=mp[cplusd];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P372-Gergovia的酒交易"><a href="#P372-Gergovia的酒交易" class="headerlink" title="P372 Gergovia的酒交易"></a>P372 Gergovia的酒交易</h2><h3 id="HINT-4"><a href="#HINT-4" class="headerlink" title="HINT"></a>HINT</h3><p>扫描法</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>, a, last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">            ans += <span class="built_in">abs</span>(last);</span><br><span class="line">            last += a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2018-04-21"><a href="#2018-04-21" class="headerlink" title="2018-04-21"></a>2018-04-21</h1><h2 id="两个有序数组求中位数"><a href="#两个有序数组求中位数" class="headerlink" title="两个有序数组求中位数"></a>两个有序数组求中位数</h2><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a[m], b[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> length = m+n;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((length&amp;<span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> final = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i != m &amp;&amp; j != n &amp;&amp; count!= length/<span class="number">2</span>+<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; b[j]) &#123;</span><br><span class="line">                final = b[j];</span><br><span class="line">                ++j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                final = a[i];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count<span class="number">-1</span> == length/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;final;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"kong"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; b[length / <span class="number">2</span> - m];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; a[length / <span class="number">2</span> - n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> second = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i != m &amp;&amp; j != n &amp;&amp; count- <span class="number">1</span> != length / <span class="number">2</span>) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; b[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(count == length/<span class="number">2</span>)&#123;</span><br><span class="line">                    first = b[j];</span><br><span class="line">                &#125;</span><br><span class="line">                second = b[j];</span><br><span class="line">                ++j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(count == length/<span class="number">2</span>) &#123;</span><br><span class="line">                    first = a[i];</span><br><span class="line">                &#125;</span><br><span class="line">                second = a[i];</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count<span class="number">-1</span> == length/<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (first + second) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"kong"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (first)&#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;(first+b[length/<span class="number">2</span> -m])/<span class="number">2.0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; (b[length / <span class="number">2</span> - m - <span class="number">1</span>] + b[length / <span class="number">2</span> - m]) / <span class="number">2.0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; (a[length / <span class="number">2</span> - n] + first) / <span class="number">2.0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; (a[length / <span class="number">2</span> - n - <span class="number">1</span>] + a[length / <span class="number">2</span> - n]) / <span class="number">2.0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2018-04-23"><a href="#2018-04-23" class="headerlink" title="2018-04-23"></a>2018-04-23</h1><h2 id="P381-全部相加"><a href="#P381-全部相加" class="headerlink" title="P381 全部相加"></a>P381 全部相加</h2><h3 id="HINT-5"><a href="#HINT-5" class="headerlink" title="HINT"></a>HINT</h3><p>huffman编码的建立过程</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n) &#123;</span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x); q.push(x); &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a = q.top( ); q.pop( );</span><br><span class="line">            <span class="keyword">int</span> b = q.top( ); q.pop( );</span><br><span class="line">            ans += a+b;</span><br><span class="line">            q.push(a+b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回忆：huffman编码"><a href="#回忆：huffman编码" class="headerlink" title="回忆：huffman编码"></a>回忆：huffman编码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Huffman::HuffmanTree(element huffTree[ ], <span class="keyword">int</span> w[ ], <span class="keyword">int</span> n )</span><br><span class="line">&#123;     <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>*n<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;     huffTree [i].parent= <span class="number">-1</span>;</span><br><span class="line">               huffTree [i].lchild= <span class="number">-1</span>;</span><br><span class="line">               huffTree [i].rchild= <span class="number">-1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)<span class="comment">//0-n-1存放叶子节点</span></span><br><span class="line">               huffTree [i].weight=w[i];</span><br><span class="line">       <span class="keyword">for</span> (k=n; k&lt;<span class="number">2</span>*n<span class="number">-1</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> i1,i2;</span><br><span class="line">            SelectMin( i1, i2，<span class="number">0</span>，k<span class="number">-1</span>);</span><br><span class="line">              huffTree[i1].parent=k;</span><br><span class="line">              huffTree[i2].parent=k;</span><br><span class="line">              huffTree[k].weight=huffTree[i1].weight+huffTree[i2].weight;</span><br><span class="line">              huffTree[k].lchild=i1;</span><br><span class="line">              huffTree[k].rchild=i2;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从s到e中找到权值未被使用的两个最小值</span></span><br><span class="line"><span class="keyword">void</span> Huffman::SelectMin(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y, <span class="keyword">int</span> s, <span class="keyword">int</span> e )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> ( i=s; i&lt;=e;i++)</span><br><span class="line">        <span class="keyword">if</span> (HTree[i].parent == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        x =y= i; <span class="keyword">break</span>; <span class="comment">//找出第一个有效权值x，并令y=x</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> ( ; i&lt;e;i++)</span><br><span class="line">        <span class="keyword">if</span> (HTree[i].parent == <span class="number">-1</span>) <span class="comment">//该权值未使用过</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( HTree[i].weight&lt; HTree [x].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                y = x; x = i; <span class="comment">//迭代，依次找出前两个最小值</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((x==y) || (HTree[i].weight&lt; HTree [y].weight) )</span><br><span class="line">                y = i; <span class="comment">//找出第2个有效权值 y</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P406-记忆化搜索与递推"><a href="#P406-记忆化搜索与递推" class="headerlink" title="P406 记忆化搜索与递推"></a>P406 记忆化搜索与递推</h2><h3 id="HINT-6"><a href="#HINT-6" class="headerlink" title="HINT"></a>HINT</h3><p>避免递归搜索时重复执行操作</p><p><img src="https://wxt.sinaimg.cn/mw1024/005B4KCnly1fqmtwwcwifj310g0bs0yg.jpg?tags=%5B%5D" alt=""></p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="built_in">memset</span>(d,－<span class="number">1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d[i][j] ＞= <span class="number">0</span>) <span class="keyword">return</span> d[i][j];</span><br><span class="line">    <span class="keyword">return</span> d[i][j] = a[i][j] ＋ (i == n ? <span class="number">0</span> : max(solve(i＋<span class="number">1</span>,j),solve(i＋<span class="number">1</span>,j＋<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2018-04-24"><a href="#2018-04-24" class="headerlink" title="2018-04-24"></a>2018-04-24</h1><h2 id="P265-给任务排序"><a href="#P265-给任务排序" class="headerlink" title="P265 给任务排序"></a>P265 给任务排序</h2><h3 id="HINT-7"><a href="#HINT-7" class="headerlink" title="HINT"></a>HINT</h3><p>dfs判断是否不存在环</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> topo[maxn], t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    c[u] = <span class="number">-1</span>;<span class="comment">//正在访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否存在环，如果有则返回false，如果出循环都没有则返回true</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[u][i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!c[i]&amp;&amp;!dfs(i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c[u] = <span class="number">1</span>;topo[--t] = u;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">toposort</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    t = n;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)</span><br><span class="line">        <span class="keyword">if</span>(!c[u])</span><br><span class="line">            <span class="keyword">if</span>(!dfs(u)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2018-04-25"><a href="#2018-04-25" class="headerlink" title="2018-04-25"></a>2018-04-25</h1><h2 id="P266-欧拉回路"><a href="#P266-欧拉回路" class="headerlink" title="P266 欧拉回路"></a>P266 欧拉回路</h2><h3 id="HINT-8"><a href="#HINT-8" class="headerlink" title="HINT"></a>HINT</h3><p>设置标记</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elur</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[cur][i]&amp;&amp;!book[cur][i])&#123;</span><br><span class="line">            book[cur][i] = book[i][cur] = <span class="number">1</span>;</span><br><span class="line">            elur(i);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;cur&lt;&lt;<span class="string">" "</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2018-05-03"><a href="#2018-05-03" class="headerlink" title="2018-05-03"></a>2018-05-03</h1><h2 id="P416-城市里的间谍"><a href="#P416-城市里的间谍" class="headerlink" title="P416 城市里的间谍"></a>P416 城市里的间谍</h2><h3 id="HINT-9"><a href="#HINT-9" class="headerlink" title="HINT"></a>HINT</h3><p>DAG动态规划问题,时间是单向的。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">int</span> t[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;n; ++i)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t[i];</span><br><span class="line">    <span class="keyword">int</span> M1;<span class="built_in">cin</span>&gt;&gt;M1;</span><br><span class="line">    <span class="keyword">int</span> d1[M1+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> max1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;M1+<span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;d1[i];</span><br><span class="line">        <span class="keyword">if</span>(d1[i]&gt;max1) max1 = d1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> M2;<span class="built_in">cin</span>&gt;&gt;M2;</span><br><span class="line">    <span class="keyword">int</span> d2[M1+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> max2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;M2+<span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;d2[i];</span><br><span class="line">        <span class="keyword">if</span>(d2[i]&gt;max2) max2 = d2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = max1; i&gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">        has_train[i][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = max2; i&gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">        has_train[i][n][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;M1+<span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> tt = d1[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; ++j)&#123;</span><br><span class="line">            tt += t[j<span class="number">-1</span>];</span><br><span class="line">            has_train[tt][j][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;M2+<span class="number">1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> tt = d2[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span> ; j &gt;= <span class="number">1</span>; ++j)&#123;</span><br><span class="line">            tt += t[j];</span><br><span class="line">            has_train[tt][j][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) dp[T][i] = INF;</span><br><span class="line"></span><br><span class="line">    dp[T][n] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 参考DAG专题，这里的时间流逝是1-&gt;T，所以外层是从T-1到0（是相反的）；</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = T<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &gt;= n; j++) &#123;</span><br><span class="line">        dp[i][j] = dp[i+<span class="number">1</span>][j] + <span class="number">1</span>; <span class="comment">//等待一个单位</span></span><br><span class="line">        <span class="keyword">if</span>(j &lt; n &amp;&amp; has_train[i][j][<span class="number">0</span>] &amp;&amp; i+t[j] ＜= T)</span><br><span class="line">        dp[i][j] = min(dp[i][j], dp[i+t[j]][j+<span class="number">1</span>]); <span class="comment">//右</span></span><br><span class="line">        <span class="keyword">if</span>(j &gt; <span class="number">1</span> &amp;&amp; has_train[i][j][<span class="number">1</span>] &amp;&amp; i+t[j<span class="number">-1</span>] ＜= T)</span><br><span class="line">        dp[i][j] = min(dp[i][j], dp[i+t[j<span class="number">-1</span>]][j<span class="number">-1</span>]); <span class="comment">//左</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case Number "</span> &lt;&lt; ++kase &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">    <span class="keyword">if</span>(dp[<span class="number">0</span>][<span class="number">1</span>] &gt;= INF) <span class="built_in">cout</span> &lt;&lt; <span class="string">"impossible\n"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2018-05-04"><a href="#2018-05-04" class="headerlink" title="2018-05-04"></a>2018-05-04</h1><h2 id="P422背包问题"><a href="#P422背包问题" class="headerlink" title="P422背包问题"></a>P422背包问题</h2><h3 id="HINT-10"><a href="#HINT-10" class="headerlink" title="HINT"></a>HINT</h3><p>固定起点的DAG最长路径问题，引入层数</p><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// d(i, j)表示“把第i, i＋ 1 , i＋2,…, n个物品装到容量为j的背包中的最大总重量”。</span></span><br><span class="line"><span class="comment">// 边界是i＞n时d(i,j)=0，j＜0时为负无穷</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= C; j++)&#123;</span><br><span class="line">        d[i][j] = (i==n ? <span class="number">0</span> : d[i+<span class="number">1</span>][j]);<span class="comment">// 不放v[i]，直接进下一层</span></span><br><span class="line">        <span class="keyword">if</span>(j &gt;= V[i]) d[i][j] max(d[i][j],d[i+<span class="number">1</span>][j-V[i]]+W[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;d[<span class="number">1</span>][C];</span><br><span class="line"></span><br><span class="line"><span class="comment">// f[i][j]表示第i层(第i次装载动作，可选择是否装载v[i])总体积为j时背包的最大重量</span></span><br><span class="line"><span class="comment">// i=0时为0，j＜0时为负无穷</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i＋＋)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= C; j＋＋)&#123;</span><br><span class="line">        f[i][j] = (i==<span class="number">1</span> ? <span class="number">0</span> : f[i<span class="number">-1</span>][j]);<span class="comment">// 在第i层不装载v[i]，直接进入前一层</span></span><br><span class="line">        <span class="keyword">if</span>(j &gt;= V[i]) f[i][j] = max(f[i][j], f[i<span class="number">-1</span>][j-V[i]]+W[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f[n][C];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与f一样，不需要记录v[i]了</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;W);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= C; j++)&#123;</span><br><span class="line">        f[i][j] = (i==<span class="number">1</span> ? <span class="number">0</span> : f[i<span class="number">-1</span>][j]);</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= V) f[i][j] = max(f[i][j],f[i<span class="number">-1</span>][j-V]+W);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;V, &amp;W);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = C; j &gt;= <span class="number">0</span>; j——)</span><br><span class="line">    <span class="keyword">if</span>(j &gt;= V) f[j] = max(f[j], = f[j－V]+W);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P420-单向TSP"><a href="#P420-单向TSP" class="headerlink" title="P420 单向TSP"></a>P420 单向TSP</h2><h3 id="HINT-11"><a href="#HINT-11" class="headerlink" title="HINT"></a>HINT</h3><p>多阶段决策的最优化问题</p><h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = INF, first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123; <span class="comment">//逆推</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j == n<span class="number">-1</span>) d[i][j] = a[i][j]; <span class="comment">//边界</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> rows[<span class="number">3</span>] = &#123;i, i<span class="number">-1</span>, i+<span class="number">1</span>&#125;;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) rows[<span class="number">1</span>] = m<span class="number">-1</span>; <span class="comment">//第0行"上面"是第m－1行</span></span><br><span class="line">                <span class="keyword">if</span>(i == m<span class="number">-1</span>) rows[<span class="number">2</span>] = <span class="number">0</span>; <span class="comment">//第m－1行"下面"是第0行</span></span><br><span class="line">                sort(rows, rows+<span class="number">3</span>); <span class="comment">//重新排序，以便找到字典序最小的</span></span><br><span class="line">                d[i][j] = INF;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> v = d[rows[k]][j+<span class="number">1</span>] + a[i][j];</span><br><span class="line">                    <span class="keyword">if</span>(v &lt; d[i][j]) &#123; d[i][j] = v; next[i][j] = rows[k]; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">0</span> &amp;&amp; d[i][j] &lt; ans) &#123; ans = d[i][j]; first = i; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"％d"</span>, first+<span class="number">1</span>); <span class="comment">//输出第1列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = next[first][<span class="number">0</span>], j = <span class="number">1</span>; j &lt; n; i = next[i][j], j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>, i+<span class="number">1</span>); <span class="comment">//输出其他列</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>迭代加深搜索-埃及分数问题</title>
    <link href="http://chengxiao19961022.github.io/2018/04/17/%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1%E6%90%9C%E7%B4%A2-%E5%9F%83%E5%8F%8A%E5%88%86%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://chengxiao19961022.github.io/2018/04/17/迭代加深搜索-埃及分数问题/</id>
    <published>2018-04-17T14:05:06.000Z</published>
    <updated>2018-09-03T14:48:14.976Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span></span><br><span class="line"><span class="keyword">int</span> ans[maxn], v[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//满足1/c≤a/b的最小c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_first</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; ;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>/i &lt;= a/b) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果当前解v比目前最优解ans更优，更新ans</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">better</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = d; i &gt;= <span class="number">0</span>; i--) <span class="keyword">if</span>(v[i] != ans[i]) &#123;</span><br><span class="line">        <span class="keyword">return</span> ans[i] == <span class="number">-1</span> || v[i] &lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前深度为d，分母不能小于from，分数之和恰好为aa/bb</span></span><br><span class="line"><span class="comment">//往一个方向收敛则无需判重</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> from, LL aa, LL bb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d == maxd) &#123;</span><br><span class="line">        <span class="keyword">if</span>(bb % aa) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//aa/bb必须是埃及分数</span></span><br><span class="line">        v[d] = bb/aa;</span><br><span class="line">        <span class="keyword">if</span>(better(d)) <span class="built_in">memcpy</span>(ans, v, <span class="keyword">sizeof</span>(LL) * (d+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">    from = max(from, get_first(aa, bb)); <span class="comment">//枚举的起点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = from; ; i++) &#123;</span><br><span class="line">        <span class="comment">//剪枝：如果剩下的maxd+1-d个分数全部都是1/i，加起来仍然不超过aa/bb，则无解</span></span><br><span class="line">        <span class="keyword">if</span>(bb * (maxd+<span class="number">1</span>-d) &lt;= i * aa) <span class="keyword">break</span>;</span><br><span class="line">        v[d] = i;</span><br><span class="line">        <span class="comment">//计算aa/bb - 1/i，设结果为a2/b2</span></span><br><span class="line">        LL b2 = bb*i;</span><br><span class="line">        LL a2 = aa*i - bb;</span><br><span class="line">        LL g = gcd(a2, b2); <span class="comment">//以便约分</span></span><br><span class="line">        <span class="keyword">if</span>(dfs(d+<span class="number">1</span>, i+<span class="number">1</span>, a2/g, b2/g)) ok = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxd;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(maxd = <span class="number">1</span>; ; maxd++) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="keyword">if</span>(dfs(<span class="number">0</span>, get_first(a, b), a, b)) &#123; ok = <span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;maxn; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i])&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>倒水问题fill-UVa 10603</title>
    <link href="http://chengxiao19961022.github.io/2018/04/15/%E5%80%92%E6%B0%B4%E9%97%AE%E9%A2%98fill-UVa-10603/"/>
    <id>http://chengxiao19961022.github.io/2018/04/15/倒水问题fill-UVa-10603/</id>
    <published>2018-04-15T14:00:40.000Z</published>
    <updated>2018-09-03T14:44:57.675Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://wx3.sinaimg.cn/mw1024/005B4KCnly1fqdowgdhuaj311n0mtq94.jpg" alt=""></p><h1 id="测试输入"><a href="#测试输入" class="headerlink" title="测试输入"></a>测试输入</h1><p>1</p><p>1 12 15 7</p><h1 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h1><p>14 7</p><h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>bfs+prioqueue,队列扩展优先总倒水量小的</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WaterNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">    WaterNode ():dist(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> WaterNode&amp; rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dist &gt; rhs.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans[maxn];<span class="comment">// ans[d]表示得到d升水的最小水量</span></span><br><span class="line"><span class="keyword">int</span> cap[<span class="number">3</span>];<span class="comment">// 每杯水的容量</span></span><br><span class="line"><span class="keyword">int</span> book[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateAns</span><span class="params">(<span class="keyword">const</span> WaterNode&amp; n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[n.v[i]] &lt; <span class="number">0</span> || ans[n.v[i]] &gt; n.dist)</span><br><span class="line">            ans[n.v[i]] = n.dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cap[<span class="number">0</span>] = a;cap[<span class="number">1</span>] = b;cap[<span class="number">2</span>] = c;</span><br><span class="line">    <span class="built_in">memset</span>(book, <span class="number">0</span>, <span class="keyword">sizeof</span>(book));</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">-1</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;WaterNode&gt; waterQueue;</span><br><span class="line"></span><br><span class="line">    WaterNode start;</span><br><span class="line">    start.v[<span class="number">0</span>] = <span class="number">0</span>; start.v[<span class="number">1</span>] = <span class="number">0</span>; start.v[<span class="number">2</span>] = c;</span><br><span class="line">    waterQueue.push(start);</span><br><span class="line">    book[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!waterQueue.empty())&#123;</span><br><span class="line"></span><br><span class="line">        WaterNode fro = waterQueue.top();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新ans</span></span><br><span class="line">        updateAns(fro);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ans[d] &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j)&#123;</span><br><span class="line">                    <span class="comment">// i往j倒水</span></span><br><span class="line">                    <span class="keyword">if</span> (fro.v[i] == <span class="number">0</span> || fro.v[j] == cap[j]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                    WaterNode nextNode;</span><br><span class="line">                    <span class="built_in">memcpy</span>(nextNode.v, fro.v, <span class="keyword">sizeof</span>(fro.v));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> amount = min(cap[j], fro.v[i]+fro.v[j]) - fro.v[j];</span><br><span class="line">                    nextNode.v[i] -= amount;</span><br><span class="line">                    nextNode.v[j] += amount;</span><br><span class="line"></span><br><span class="line">                    nextNode.dist = fro.dist + amount;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!book[nextNode.v[i]][nextNode.v[j]])&#123;</span><br><span class="line">                        book[nextNode.v[i]][nextNode.v[j]] = <span class="number">1</span>;</span><br><span class="line">                        waterQueue.push(nextNode);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        waterQueue.pop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (d&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[d] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans[d], d);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        bfs(a, b, c, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>bfs求最短路径</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>八数码问题</title>
    <link href="http://chengxiao19961022.github.io/2018/04/14/%E5%85%AB%E6%95%B0%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://chengxiao19961022.github.io/2018/04/14/八数码问题/</id>
    <published>2018-04-14T02:55:31.000Z</published>
    <updated>2018-09-03T14:45:20.308Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>编号为1～8的8个正方形滑块被摆成3行3列（有一个格子留空），如图7-14所示。每次可以把与空格相邻的滑块（有公共边才算相邻）移到空格中，而它原来的位置就成为了新的空格。给定初始局面和目标局面（用0表示空格），你的任务是计算出最少的移动步数。如果无法到达目标局面，则输出-1。</p><p><img src="https://wx3.sinaimg.cn/mw1024/005B4KCnly1fqc02pnconj30mv0d3t9q.jpg" alt=""></p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>2 6 4 1 3 7 0 5 8</p><p>8 1 5 7 3 6 4 0 2</p><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>31</p><h2 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h2><p>采用BFS求解，每次保存整体状态而非坐标</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> State[<span class="number">9</span>]; <span class="comment">//定义"状态"类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxstate = <span class="number">1000000</span>;</span><br><span class="line">State st[maxstate], goal; <span class="comment">//状态数组。所有状态都保存在这里</span></span><br><span class="line"><span class="keyword">int</span> dist[maxstate]; <span class="comment">//距离数组</span></span><br><span class="line"><span class="comment">//如果需要打印方案，可以在这里加一个"父亲编号"数组 int fa[maxstate]</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[ ] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[ ] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hash表存放状态，因为0-8的排列最多为9!=362880个</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> hashsize = <span class="number">1000003</span>;</span><br><span class="line"><span class="keyword">int</span> head[hashsize], next1[maxstate];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_lookup_table</span><span class="params">( )</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash1</span><span class="params">(State&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) v = v * <span class="number">10</span> + s[i];<span class="comment">//把9个数字组合成9位数</span></span><br><span class="line">    <span class="keyword">return</span> v % hashsize; <span class="comment">//确保hash函数值是不超过hash表的大小的非负整数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">try_to_insert</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash1(st[s]);</span><br><span class="line">    <span class="keyword">int</span> u = head[h]; <span class="comment">//从表头开始查找链表</span></span><br><span class="line">    <span class="keyword">while</span>(u)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(st[u],st[s], <span class="keyword">sizeof</span>(st[s]))==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//找到了，插入失败，book=1</span></span><br><span class="line">        u = next1[u]; <span class="comment">//顺着链表继续找</span></span><br><span class="line">    &#125;</span><br><span class="line">    next1[s] = head[h]; <span class="comment">//插入到链表中</span></span><br><span class="line">    head[h] = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//book=0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS，返回目标状态在st数组下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">( )</span> </span>&#123;</span><br><span class="line">    init_lookup_table( ); <span class="comment">//初始化查找表,用于去重</span></span><br><span class="line">    <span class="keyword">int</span> front = <span class="number">1</span>, rear = <span class="number">2</span>; <span class="comment">//不使用下标0，因为0被看作"不存在"</span></span><br><span class="line">    <span class="keyword">while</span>(front&lt; rear) &#123;</span><br><span class="line">        State&amp; s = st[front];</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(goal, s, <span class="keyword">sizeof</span>(s)) == <span class="number">0</span>) <span class="keyword">return</span> front;<span class="comment">//找到目标状态，成功返回</span></span><br><span class="line">        <span class="keyword">int</span> z;</span><br><span class="line">        <span class="keyword">for</span>(z = <span class="number">0</span>; z &lt; <span class="number">9</span>; z++) <span class="keyword">if</span>(!s[z]) <span class="keyword">break</span>; <span class="comment">//找"0"的位置</span></span><br><span class="line">        <span class="keyword">int</span> x = z/<span class="number">3</span>, y = z%<span class="number">3</span>; <span class="comment">//获取行列编号（0~2）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; d++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newx = x + dx[d];</span><br><span class="line">            <span class="keyword">int</span> newy = y + dy[d];</span><br><span class="line">            <span class="keyword">int</span> newz = newx * <span class="number">3</span> + newy;</span><br><span class="line">            <span class="keyword">if</span>(newx &gt;= <span class="number">0</span> &amp;&amp; newx &lt; <span class="number">3</span> &amp;&amp; newy &gt;= <span class="number">0</span> &amp;&amp; newy &lt; <span class="number">3</span>)&#123; <span class="comment">//如果移动合法</span></span><br><span class="line">                State&amp; t = st[rear];</span><br><span class="line">                <span class="built_in">memcpy</span>(&amp;t, &amp;s, <span class="keyword">sizeof</span>(s)); <span class="comment">//扩展新结点</span></span><br><span class="line">                t[newz] = s[z];</span><br><span class="line">                t[z] = s[newz];</span><br><span class="line">                dist[rear] = dist[front] + <span class="number">1</span>; <span class="comment">//更新新结点的距离值</span></span><br><span class="line">                <span class="keyword">if</span>(try_to_insert(rear)) rear++; <span class="comment">//如果成功插入查找表，修改队尾指针</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        front++; <span class="comment">//扩展完毕后再修改队首指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;st[<span class="number">1</span>][i]); <span class="comment">//起始状态</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;goal[i]); <span class="comment">//目标状态</span></span><br><span class="line">    <span class="keyword">int</span> ans = bfs( ); <span class="comment">//返回目标状态的下标</span></span><br><span class="line">    <span class="keyword">if</span>(ans &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist[ans]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> State[<span class="number">9</span>]; <span class="comment">//定义"状态"类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxstate = <span class="number">1000000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StateNode</span>&#123;</span></span><br><span class="line">    StateNode():dist(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    State stat;</span><br><span class="line">    <span class="keyword">int</span> dist;</span><br><span class="line">&#125;;</span><br><span class="line">State goal; <span class="comment">//状态数组。所有状态都保存在这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果需要打印方案，可以在这里加一个"父亲编号"数组 int fa[maxstate]</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[ ] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[ ] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hash表存放状态，因为0-8的排列最多为9!=362880个</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> hashsize = <span class="number">1000003</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HashNode</span>&#123;</span></span><br><span class="line">    HashNode():next(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    State stat;</span><br><span class="line">    HashNode* next;</span><br><span class="line">&#125;;</span><br><span class="line">HashNode* head[hashsize];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_lookup_table</span><span class="params">( )</span> </span>&#123; <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash1</span><span class="params">(State s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) v = v * <span class="number">10</span> + s[i];<span class="comment">//把9个数字组合成9位数</span></span><br><span class="line">    <span class="keyword">return</span> v % hashsize; <span class="comment">//确保hash函数值是不超过hash表的大小的非负整数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">try_to_insert</span><span class="params">(StateNode s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash1(s.stat);</span><br><span class="line">    HashNode* u = head[h]; <span class="comment">//从表头开始查找链表</span></span><br><span class="line">    <span class="keyword">while</span>(u)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(u-&gt;stat,s.stat, <span class="keyword">sizeof</span>(s.stat))==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//找到了，插入失败，book=1</span></span><br><span class="line">        u = u-&gt;next; <span class="comment">//顺着链表继续找</span></span><br><span class="line">    &#125;</span><br><span class="line">    HashNode* n = <span class="keyword">new</span> HashNode();</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;n-&gt;stat, &amp;s.stat, <span class="keyword">sizeof</span>(s.stat));</span><br><span class="line">    n-&gt;next = head[h];</span><br><span class="line">    head[h] = n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//book=0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteHash</span><span class="params">(HashNode* h[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hashsize; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!h[i]) <span class="keyword">continue</span>;</span><br><span class="line">        HashNode* cur = h[i];</span><br><span class="line">        <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">            HashNode* de = cur;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> de;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS，返回目标状态在st数组下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(StateNode be)</span> </span>&#123;</span><br><span class="line">    init_lookup_table( ); <span class="comment">//初始化查找表,用于去重</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;StateNode&gt; StatQueue;</span><br><span class="line">    StatQueue.push(be);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!StatQueue.empty()) &#123;</span><br><span class="line">        StateNode&amp; s = StatQueue.front();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(goal, s.stat, <span class="keyword">sizeof</span>(s.stat)) == <span class="number">0</span>) <span class="keyword">return</span> s.dist;<span class="comment">//找到目标状态，成功返回</span></span><br><span class="line">        <span class="keyword">int</span> z;</span><br><span class="line">        <span class="keyword">for</span>(z = <span class="number">0</span>; z &lt; <span class="number">9</span>; z++) <span class="keyword">if</span>(!s.stat[z]) <span class="keyword">break</span>; <span class="comment">//找"0"的位置</span></span><br><span class="line">        <span class="keyword">int</span> x = z/<span class="number">3</span>, y = z%<span class="number">3</span>; <span class="comment">//获取行列编号（0~2）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; <span class="number">4</span>; d++) &#123;</span><br><span class="line">            <span class="keyword">int</span> newx = x + dx[d];</span><br><span class="line">            <span class="keyword">int</span> newy = y + dy[d];</span><br><span class="line">            <span class="keyword">int</span> newz = newx * <span class="number">3</span> + newy;</span><br><span class="line">            <span class="keyword">if</span>(newx &gt;= <span class="number">0</span> &amp;&amp; newx &lt; <span class="number">3</span> &amp;&amp; newy &gt;= <span class="number">0</span> &amp;&amp; newy &lt; <span class="number">3</span>)&#123; <span class="comment">//如果移动合法</span></span><br><span class="line">                StateNode t;</span><br><span class="line">                <span class="built_in">memcpy</span>(&amp;t.stat, &amp;s.stat, <span class="keyword">sizeof</span>(s.stat)); <span class="comment">//扩展新结点</span></span><br><span class="line">                t.stat[newz] = s.stat[z];</span><br><span class="line">                t.stat[z] = s.stat[newz];</span><br><span class="line">                t.dist = s.dist+<span class="number">1</span>; <span class="comment">//更新新结点的距离值</span></span><br><span class="line">                <span class="keyword">if</span>(try_to_insert(t)) StatQueue.push(t); <span class="comment">//如果成功插入查找表，修改队尾指针</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StatQueue.pop(); <span class="comment">//扩展完毕后再修改队首指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    StateNode sta;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sta.stat[i]); <span class="comment">//起始状态</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;goal[i]); <span class="comment">//目标状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = bfs(sta); <span class="comment">//返回目标状态的下标</span></span><br><span class="line">    <span class="keyword">if</span>(ans &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"></span><br><span class="line">    deleteHash(head);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>递归与分治-棋盘覆盖问题</title>
    <link href="http://chengxiao19961022.github.io/2018/04/11/%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB-%E6%A3%8B%E7%9B%98%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/"/>
    <id>http://chengxiao19961022.github.io/2018/04/11/递归与分治-棋盘覆盖问题/</id>
    <published>2018-04-11T14:31:52.000Z</published>
    <updated>2018-04-11T14:38:17.791Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><p>转自:<a href="https://blog.csdn.net/q547550831/article/details/51541527" target="_blank" rel="noopener">分治法——棋盘覆盖问题</a></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>棋盘覆盖问题。有一个2k∗2k的方格棋盘，恰有一个方格是黑色的，其他为白色。你的任务是用包含3个方格的L型牌覆盖所有白色方格。黑色方格不能被覆盖，且任意一个白色方格不能同时被两个或更多牌覆盖。如图所示为L型牌的4种旋转方式。</p><p><img src="https://wxt.sinaimg.cn/mw1024/005B4KCnly1fq93cpcswnj30uv06djrl.jpg?tags=%5B%5D" alt=""></p><h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><h2 id="分治三步骤"><a href="#分治三步骤" class="headerlink" title="分治三步骤"></a>分治三步骤</h2><p>划分问题：将2k∗2k的棋盘划分为2k−1∗2k−1这样的子棋盘4块。</p><p>递归求解：递归填充各个格子，填充分为四个情况，在下面会有解释，递归出口为k=0也就是子棋盘方格数为1。</p><p>合并问题：不需要合并子问题。</p><h2 id="递归填充的四种情况"><a href="#递归填充的四种情况" class="headerlink" title="递归填充的四种情况"></a>递归填充的四种情况</h2><p>如果黑方块在左上子棋盘，则递归填充左上子棋盘；否则填充左上子棋盘的右下角，将右下角看做黑色方块，然后递归填充左上子棋盘。</p><p>如果黑方块在右上子棋盘，则递归填充右上子棋盘；否则填充右上子棋盘的左下角，将左下角看做黑色方块，然后递归填充右上子棋盘。</p><p>如果黑方块在左下子棋盘，则递归填充左下子棋盘；否则填充左下子棋盘的右上角，将右上角看做黑色方块，然后递归填充左下子棋盘。</p><p>如果黑方块在右下子棋盘，则递归填充右下子棋盘；否则填充右下子棋盘的右下角，将左上角看做黑色方块，然后递归填充右下子棋盘。</p><p><img src="https://wxt.sinaimg.cn/mw1024/005B4KCnly1fq93eck98xj30o20n0aa8.jpg?tags=%5B%5D" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNum = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 棋盘</span></span><br><span class="line"><span class="keyword">int</span> chess[maxNum][maxNum];</span><br><span class="line"><span class="comment">// L型牌编号</span></span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chessBoard</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> siz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(siz == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对半划分成2^(siz - 1) * 2^(siz - 1)的棋盘</span></span><br><span class="line">    <span class="keyword">int</span> s = siz / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// L型牌编号自增</span></span><br><span class="line">    <span class="keyword">int</span> t = ++number;</span><br><span class="line">    <span class="comment">// 中间点，以此判别(x,y)在哪个子棋盘中</span></span><br><span class="line">    <span class="keyword">int</span> centerRow = row + s;</span><br><span class="line">    <span class="keyword">int</span> centerColumn = column + s;</span><br><span class="line">    <span class="comment">// 黑色方格在左上子棋盘</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; centerRow &amp;&amp; y &lt; centerColumn) &#123;</span><br><span class="line">        chessBoard(row, column, x, y, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不在则填充左上子棋盘的右下角</span></span><br><span class="line">        chess[centerRow - <span class="number">1</span>][centerColumn - <span class="number">1</span>] = t;</span><br><span class="line">        <span class="comment">// 然后覆盖其他格子，注意这时(x,y)要看做已填充位置</span></span><br><span class="line">        chessBoard(row, column, centerRow - <span class="number">1</span>, centerColumn - <span class="number">1</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 黑色方格在右上子棋盘</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; centerRow &amp;&amp; y &gt;= centerColumn) &#123;</span><br><span class="line">        chessBoard(row, centerColumn, x, y, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不在则填充右上子棋盘的左下角</span></span><br><span class="line">        chess[centerRow - <span class="number">1</span>][centerColumn] = t;</span><br><span class="line">        <span class="comment">// 然后覆盖其他格子，注意这时(x,y)要看做已填充位置</span></span><br><span class="line">        chessBoard(row, centerColumn, centerRow - <span class="number">1</span>, centerColumn, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 黑色方格在左下子棋盘</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt;= centerRow &amp;&amp; y &lt; centerColumn) &#123;</span><br><span class="line">        chessBoard(centerRow, column, x, y, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不在则填充左下子棋盘的右上角</span></span><br><span class="line">        chess[centerRow][centerColumn - <span class="number">1</span>] = t;</span><br><span class="line">        <span class="comment">// 然后覆盖其他格子，注意这时(x,y)要看做已填充位置</span></span><br><span class="line">        chessBoard(centerRow, column, centerRow, centerColumn - <span class="number">1</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 黑色方格在右下子棋盘</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt;= centerRow &amp;&amp; y &gt;= centerColumn) &#123;</span><br><span class="line">        chessBoard(centerRow, centerColumn, x, y, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不在则填充右下子棋盘的左上角</span></span><br><span class="line">        chess[centerRow][centerColumn] = t;</span><br><span class="line">        <span class="comment">// 然后覆盖其他格子，注意这时(x,y)要看做已填充位置</span></span><br><span class="line">        chessBoard(centerRow, centerColumn, centerRow, centerColumn, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 大小，黑色方格位置</span></span><br><span class="line">    <span class="keyword">int</span> siz, x, y;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"(x,y)从(0,0)开始,输入数据为0 0 0即结束程序。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入棋盘大小和黑色方格位置(x,y)："</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; siz &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="comment">// 退出条件</span></span><br><span class="line">        <span class="keyword">if</span>(siz == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 涂黑(x,y)，初始化L型牌编号</span></span><br><span class="line">        chess[x][y] = number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分治法填满棋盘</span></span><br><span class="line">        chessBoard(<span class="number">0</span>, <span class="number">0</span>, x, y, siz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出该棋盘</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; siz; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; siz; j++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; chess[i][j] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">(x,y)从(<span class="number">0</span>,<span class="number">0</span>)开始,输入数据为<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>即结束程序。</span><br><span class="line">请输入棋盘大小和黑色方格位置(x,y)：<span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span>       <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>       <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(x,y)从(<span class="number">0</span>,<span class="number">0</span>)开始,输入数据为<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>即结束程序。</span><br><span class="line">请输入棋盘大小和黑色方格位置(x,y)：<span class="number">4</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span>       <span class="number">3</span>       <span class="number">4</span>       <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>       <span class="number">1</span>       <span class="number">2</span>       <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>       <span class="number">2</span>       <span class="number">2</span>       <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>       <span class="number">5</span>       <span class="number">6</span>       <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(x,y)从(<span class="number">0</span>,<span class="number">0</span>)开始,输入数据为<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>即结束程序。</span><br><span class="line">请输入棋盘大小和黑色方格位置(x,y)：<span class="number">8</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span>       <span class="number">4</span>       <span class="number">5</span>       <span class="number">5</span>       <span class="number">9</span>       <span class="number">9</span>       <span class="number">10</span>      <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       <span class="number">3</span>       <span class="number">3</span>       <span class="number">5</span>       <span class="number">9</span>       <span class="number">8</span>       <span class="number">8</span>       <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>       <span class="number">3</span>       <span class="number">1</span>       <span class="number">7</span>       <span class="number">11</span>      <span class="number">11</span>      <span class="number">8</span>       <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>       <span class="number">6</span>       <span class="number">7</span>       <span class="number">7</span>       <span class="number">2</span>       <span class="number">11</span>      <span class="number">12</span>      <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>      <span class="number">14</span>      <span class="number">15</span>      <span class="number">2</span>       <span class="number">2</span>       <span class="number">19</span>      <span class="number">20</span>      <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>      <span class="number">13</span>      <span class="number">15</span>      <span class="number">15</span>      <span class="number">19</span>      <span class="number">19</span>      <span class="number">18</span>      <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">16</span>      <span class="number">13</span>      <span class="number">13</span>      <span class="number">17</span>      <span class="number">21</span>      <span class="number">18</span>      <span class="number">18</span>      <span class="number">22</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">16</span>      <span class="number">16</span>      <span class="number">17</span>      <span class="number">17</span>      <span class="number">21</span>      <span class="number">21</span>      <span class="number">22</span>      <span class="number">22</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(x,y)从(<span class="number">0</span>,<span class="number">0</span>)开始,输入数据为<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>即结束程序。</span><br><span class="line">请输入棋盘大小和黑色方格位置(x,y)：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Process returned <span class="number">0</span> (<span class="number">0x0</span>)   execution time : <span class="number">29.988</span> s</span><br><span class="line">Press any key to <span class="keyword">continue</span>.</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>UVa806 习题6-8 空间结构（Spatial Structures,ACM/ICPC World Finals 1998）</title>
    <link href="http://chengxiao19961022.github.io/2018/04/10/UVa806-%E4%B9%A0%E9%A2%986-8-%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84%EF%BC%88Spatial-Structures-ACM-ICPC-World-Finals-1998%EF%BC%89/"/>
    <id>http://chengxiao19961022.github.io/2018/04/10/UVa806-习题6-8-空间结构（Spatial-Structures-ACM-ICPC-World-Finals-1998）/</id>
    <published>2018-04-10T08:18:14.000Z</published>
    <updated>2018-04-10T11:29:21.391Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>黑白图像有两种表示法：点阵表示和路径表示。路径表示法首先需要把图像转化为四分 树，然后记录所有黑结点到根的路径。例如，对于如图6-25所示的图像。</p><p><img src="https://wx3.sinaimg.cn/mw1024/005B4KCnly1fq7mtbe9odj30xa0bbjvo.jpg" alt=""></p><p>四分树如图6-26所示。</p><p><img src="https://wx2.sinaimg.cn/mw1024/005B4KCnly1fq7mtbepsoj30t90cojwe.jpg" alt=""></p><p>NW、NE、SW、SE分别用1、2、3、4表示。最后把得到的数字串看成是五进制的，转 化为十进制后排序。例如上面的树在转化、排序后的结果是：9 14 17 22 23 44 63 69 88 94 113。<br>你的任务是在这两种表示法之间进行转换。在点阵表示法中，1表示黑色，0表示白色。<br>图像总是正方形的，且长度n为2的整数幂，并满足n≤64。输入输出细节请参见原题。</p><h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _for(i, a, b) for (int i = (a); i &lt; (b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _rep(i, a, b) for (int i = (a); i &lt;= (b); ++i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="comment">/* NW = 1, NE = 2, SW = 3, SE = 4 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">64</span> + <span class="number">4</span>, DX[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, DY[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">char</span> IMG[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countBlack</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ans, <span class="keyword">int</span> path = <span class="number">0</span>, <span class="keyword">int</span> p5 = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> f = <span class="number">0</span>, len2 = len / <span class="number">2</span>;</span><br><span class="line">  _for(i, x, x + len) _for(j, y, y + len) f += IMG[i][j] - <span class="string">'0'</span>;</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (f == len * len) &#123;</span><br><span class="line">    ans.push_back(path);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _for(di, <span class="number">0</span>, <span class="number">4</span>) countBlack(x+DX[di]*len2, y+DY[di]*len2, len2, ans, path+p5*(di+<span class="number">1</span>), p5*<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> path, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (path == <span class="number">0</span>) &#123;</span><br><span class="line">    assert(len);</span><br><span class="line">    _for(i, x, x + len) _for(j, y, y + len) IMG[i][j] = <span class="string">'*'</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> di = path % <span class="number">5</span> - <span class="number">1</span>, len2 = len / <span class="number">2</span>;</span><br><span class="line">  draw(path / <span class="number">5</span>, x + DX[di] * len2, y + DY[di] * len2, len2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> kase = <span class="number">1</span>; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N) == <span class="number">1</span> &amp;&amp; N; kase++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (kase &gt; <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Image %d\n"</span>, kase);</span><br><span class="line">    <span class="keyword">if</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      _for(i, <span class="number">0</span>, N) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, IMG[i]);</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; blacks;</span><br><span class="line">      countBlack(<span class="number">0</span>, <span class="number">0</span>, N, blacks);</span><br><span class="line">      sort(begin(blacks), end(blacks));</span><br><span class="line">      <span class="keyword">int</span> sz = blacks.size();</span><br><span class="line">      _for(i, <span class="number">0</span>, sz) <span class="built_in">printf</span>(<span class="string">"%d%s"</span>, blacks[i], (i % <span class="number">12</span> == <span class="number">11</span> || i == sz - <span class="number">1</span>) ? <span class="string">"\n"</span> : <span class="string">" "</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Total number of black nodes = %d\n"</span>, sz);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> p;</span><br><span class="line">      <span class="built_in">memset</span>(IMG, <span class="number">0</span>, <span class="keyword">sizeof</span>(IMG));</span><br><span class="line">      N = -N;</span><br><span class="line">      _for(i, <span class="number">0</span>, N) _for(j, <span class="number">0</span>, N) IMG[i][j] = <span class="string">'.'</span>;</span><br><span class="line">      <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p) == <span class="number">1</span> &amp;&amp; p &gt;= <span class="number">0</span>) draw(p, <span class="number">0</span>, <span class="number">0</span>, N);</span><br><span class="line">      _for(i, <span class="number">0</span>, N) <span class="built_in">puts</span>(IMG[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title> UVa 804 - Petri Net Simulation（模拟）</title>
    <link href="http://chengxiao19961022.github.io/2018/04/10/UVa-804-Petri-Net-Simulation%EF%BC%88%E6%A8%A1%E6%8B%9F%EF%BC%89/"/>
    <id>http://chengxiao19961022.github.io/2018/04/10/UVa-804-Petri-Net-Simulation（模拟）/</id>
    <published>2018-04-10T05:11:09.000Z</published>
    <updated>2018-09-03T14:48:11.954Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。</p></div><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>你的任务是模拟Petri网的变迁。Petri网包含NP个库所（用P1，P2…表示）和NT个变迁 （用T1，T2…表示）。0&lt;NP, NT&lt;100。当每个变迁的每个输入库所都至少有一个token时， 变迁是允许的。变迁发生的结果是每个输入库所减少一个token，每个输出库所增加一个 token。变迁的发生是原子性的，即所有token的增加和减少应同时进行。注意，一个变迁可 能有多个相同的输入或者输出。如果一个库所在变迁的输入库所列表中出现了两次，则token 会减少两个。输出库所也是类似。如果有多个变迁是允许的，一次只能发生一个。<br>如图6-24所示，一开始只有T1是允许的，发生一次T1变迁之后有一个token会从P1移动<br>到P2，但仍然只有T1是允许的，因为T2要求P2有两个token。再发生一次T1变迁之后P1中只 剩一个token，而P2中有两个，因为T1和T2都可以发生。假定T2发生，则P2中不再有token，<br>而P3中有一个token，因此T1和T3都是允许的。</p><p><img src="https://wx4.sinaimg.cn/mw1024/005B4KCnly1fq7hlc09rrj30gt0a73zo.jpg" alt=""></p><h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>输入一个Petri网络。初始时每个库所都有一个token。每个变迁用一个整数序列表示，负 数表示输入库所，正数表示输出库所。每个变迁至少包含一个输入和一个输出。最后输入一 个整数NF，表示要发生NF次变迁（同时有多个变迁允许时可以任选一个发生，输入保证这<br>个选择不会影响最终结果）。</p><p>依次对每个T(i)进行执行，如果每个input都能执行成功（NP中有token）则执行，则执行output，并将执行T(i)的次数++，否则恢复刚才所有执行的input。一轮（将所有T(i)执行一遍）中任意一个T(i)执行就可以执行下一轮。如果一轮中没有任何一个T(i)执行成功则说明执行失败，返回执行次数。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deal</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> NP[MAXN];           <span class="comment">//P(i)现存小球的数量</span></span><br><span class="line"><span class="keyword">int</span> NT_in[MAXN][MAXN];      <span class="comment">//存储T(i)的input</span></span><br><span class="line"><span class="keyword">int</span> NT_out[MAXN][MAXN];     <span class="comment">//存储T(i)的output</span></span><br><span class="line"><span class="keyword">int</span> n, m, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> kase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(NT_in,<span class="number">0</span>,<span class="keyword">sizeof</span>(NT_in));</span><br><span class="line">        <span class="built_in">memset</span>(NT_out, <span class="number">0</span>, <span class="keyword">sizeof</span>(NT_out));</span><br><span class="line">        <span class="keyword">int</span> k,i, j, x, do_num;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; NP[i];</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            k = j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; x &amp;&amp; x)&#123;</span><br><span class="line">                <span class="keyword">if</span> (x &lt; <span class="number">0</span>) NT_in[i][j++] = x;</span><br><span class="line">                <span class="keyword">else</span> NT_out[i][k++] = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        <span class="comment">//处理</span></span><br><span class="line">        do_num = deal(); <span class="comment">//处理函数，返回执行变迁的次数</span></span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="keyword">if</span>(do_num == num) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; ++kase &lt;&lt; <span class="string">": still live after "</span> &lt;&lt; do_num &lt;&lt; <span class="string">" transitions\n"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; ++kase &lt;&lt; <span class="string">": dead after "</span> &lt;&lt; do_num &lt;&lt; <span class="string">" transitions\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Places with tokens:"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)        <span class="comment">//逐个输出有token的P,和个数</span></span><br><span class="line">            <span class="keyword">if</span> (NP[i] &gt; <span class="number">0</span>)  <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="string">" ("</span> &lt;&lt; NP[i] &lt;&lt; <span class="string">")"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*依次对每个T(i)进行执行，如果每个input都能执行成功（NP中有token）则执行，</span></span><br><span class="line"><span class="comment">则执行output，并将执行T(i)的次数++，否则恢复刚才所有执行的input。</span></span><br><span class="line"><span class="comment">一轮（将所有T(i)执行一遍）中任意一个T(i)执行就可以执行下一轮。</span></span><br><span class="line"><span class="comment">如果一轮中没有任何一个T(i)执行成功则说明执行失败，返回执行次数。*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> had_do = <span class="literal">false</span>; <span class="comment">//该轮中有T(i)执行，可以执行下一轮</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            j = <span class="number">0</span>; <span class="keyword">bool</span> can_do = <span class="literal">true</span>;<span class="comment">//该T(i)执行是否成功</span></span><br><span class="line">            <span class="keyword">while</span> (NT_in[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (NP[-NT_in[i][j]] &gt; <span class="number">0</span>)   <span class="comment">//执行input</span></span><br><span class="line">                    NP[-NT_in[i][j++]]--;</span><br><span class="line">                <span class="keyword">else</span>&#123;                    <span class="comment">//input执行失败，恢复input之前状态，并将can_do置为false</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (j--)</span><br><span class="line">                        NP[-NT_in[i][j]]++;</span><br><span class="line">                    can_do = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (can_do) &#123;               <span class="comment">//input执行成功的情况下执行output</span></span><br><span class="line">                j = <span class="number">0</span>; n++;<span class="comment">//***</span></span><br><span class="line">                <span class="keyword">while</span> (NT_out[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    NP[NT_out[i][j]]++;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                had_do = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (n &gt; num) <span class="keyword">return</span> num;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!had_do) <span class="keyword">return</span> n<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>重点在于理解题意</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;每天坚持做算法题，熟悉基本的套路，巩固语言基础，总结经验记下所学所想。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://chengxiao19961022.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="http://chengxiao19961022.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>vim基本使用</title>
    <link href="http://chengxiao19961022.github.io/2018/03/23/vim%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://chengxiao19961022.github.io/2018/03/23/vim基本使用/</id>
    <published>2018-03-23T03:02:37.000Z</published>
    <updated>2018-09-03T14:48:23.748Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>vim的基本使用</p></div><a id="more"></a><h1 id="Vim键盘分布图"><a href="#Vim键盘分布图" class="headerlink" title="Vim键盘分布图"></a>Vim键盘分布图</h1><p><img src="http://wx2.sinaimg.cn/mw690/005B4KCnly1fpmkhomjb6j30vb0m6qa3.jpg" alt="vim键盘分布图"></p><h1 id="Vim树状图"><a href="#Vim树状图" class="headerlink" title="Vim树状图"></a>Vim树状图</h1><p><img src="http://wx3.sinaimg.cn/mw690/005B4KCnly1fpmkhozqzyj310a1h1wqi.jpg" alt="vim树状图"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;vim的基本使用&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="http://chengxiao19961022.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="vim" scheme="http://chengxiao19961022.github.io/tags/vim/"/>
    
  </entry>
  
</feed>
