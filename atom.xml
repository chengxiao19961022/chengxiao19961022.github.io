<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChengXiao&#39;s Blog</title>
  
  <subtitle>There u are</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chengxiao19961022.github.io/"/>
  <updated>2018-03-01T11:30:10.748Z</updated>
  <id>http://chengxiao19961022.github.io/</id>
  
  <author>
    <name>ChengXiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计划-大四下</title>
    <link href="http://chengxiao19961022.github.io/2018/03/01/%E8%AE%A1%E5%88%92-%E5%A4%A7%E5%9B%9B%E4%B8%8B/"/>
    <id>http://chengxiao19961022.github.io/2018/03/01/计划-大四下/</id>
    <published>2018-03-01T08:41:49.000Z</published>
    <updated>2018-03-01T11:30:10.748Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>本科还剩下1/8，最后半年承上启下，希望对本科阶段的学习有所总结，对研究生生活有所准备，列下一个粗略的计划希望时间不会虚度。</p></div><a id="more"></a><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h3><p>毕设需要完成一个较大的工程项目，需要掌握每个模块涉及的技术，包括爬虫、clamav和cuckoo、调度、Web。</p><h4 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h4><p>完善敏感api组合，完善cuckoo process和signature的自定义。</p><h4 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h4><p>学习使用java语言，掌握基本的架构设计方案，学习thrift跨语言接口定义。</p><h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><p>基本H5 + JAVA + springMVC</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>修满6学分的研究生课程，系统地学习一下网络攻防。</p><h3 id="智能"><a href="#智能" class="headerlink" title="智能"></a>智能</h3><p>学完之前未看完的视频，熟悉一下一些主流的框架，了解神经网络的基本应用。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>《算法导论》+ leetcode，语言使用cpp，每天定量。</p><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><h2 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h2><h2 id="吉他"><a href="#吉他" class="headerlink" title="吉他"></a>吉他</h2><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>kindle unlimited每周一本开始</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>希望能坚持写博客，记录平时的学习过程和心得感悟，在技术上和思想上都能有一定升华，望监督。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;本科还剩下1/8，最后半年承上启下，希望对本科阶段的学习有所总结，对研究生生活有所准备，列下一个粗略的计划希望时间不会虚度。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://chengxiao19961022.github.io/categories/Diary/"/>
    
    
      <category term="学习计划" scheme="http://chengxiao19961022.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy+PhantomJS+Selenium实现动态网页的爬取</title>
    <link href="http://chengxiao19961022.github.io/2018/02/08/Scrapy-PhantomJS-Selenium%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%9A%84%E7%88%AC%E5%8F%96/"/>
    <id>http://chengxiao19961022.github.io/2018/02/08/Scrapy-PhantomJS-Selenium实现动态网页的爬取/</id>
    <published>2018-02-08T13:01:53.000Z</published>
    <updated>2018-03-01T11:05:26.907Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>网络爬虫是数据挖掘的重要前提，通过网络爬虫可以自动化批量获取互联网上你需要的有用信息。爬虫于静态页面的爬取十分简单，但Ajax的出现实现了网页的局部动态加载，网页不需每次返回重复Html而只要局部刷新，简单的静态页面爬虫只能解析单一url而对它就无能为力了。PhantomJS+Selenium，再加上Scrapy爬虫框架，就可以实现动态爬虫。</p></div><a id="more"></a><h2 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h2><h3 id="PhantomJS是什么？"><a href="#PhantomJS是什么？" class="headerlink" title="PhantomJS是什么？"></a>PhantomJS是什么？</h3><ul><li><a href="http://blog.csdn.net/libsyc/article/details/78199850" target="_blank" rel="noopener">PhantomJS</a>是一个基于webkit的JavaScript API。它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行JavaScript代码。任何你可以在基于webkit浏览器做的事情，它都能做到。它不仅是个隐形的浏览器，提供了诸如CSS选择器、支持Web标准、DOM操作、JSON、HTML5、Canvas、SVG等，同时也提供了处理文件I/O的操作，从而使你可以向操作系统读写文件等。PhantomJS的用处可谓非常广泛，诸如网络监测、网页截屏、无需浏览器的 Web 测试、页面访问自动化等。</li><li><a href="http://phantomjs.org/" target="_blank" rel="noopener">PhantomJS官方地址</a></li><li><a href="http://phantomjs.org/api/" target="_blank" rel="noopener">PhantomJS官方API</a></li><li><a href="http://phantomjs.org/examples/。" target="_blank" rel="noopener">PhantomJS官方示例</a></li><li><a href="https://github.com/ariya/phantomjs/。" target="_blank" rel="noopener">PhantomJS GitHub</a></li></ul><h3 id="PhantomJS的使用"><a href="#PhantomJS的使用" class="headerlink" title="PhantomJS的使用"></a>PhantomJS的使用</h3><p>PhantomJS的安装不再赘述，在windows平台下安装好的phantomjs.exe即可可通过JS与webkit内核交互。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetHtml.js</span></span><br><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create(), <span class="comment">//获取操作dom或web网页的对象</span></span><br><span class="line">    system = <span class="built_in">require</span>(<span class="string">'system'</span>),         <span class="comment">//获取操作系统对象</span></span><br><span class="line">    address;</span><br><span class="line"><span class="keyword">if</span> (system.args.length === <span class="number">1</span>) &#123;</span><br><span class="line">    phantom.exit(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    address = system.args[<span class="number">1</span>];</span><br><span class="line">    page.open(address, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;   <span class="comment">//访问url</span></span><br><span class="line">        <span class="built_in">console</span>.log(page.content);</span><br><span class="line">        phantom.exit();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制台输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phantomjs ./test.js http://baidu.com</span><br></pre></td></tr></table></figure></p><p>即打印输出百度的html页面</p><h3 id="PhantomJS参考链接"><a href="#PhantomJS参考链接" class="headerlink" title="PhantomJS参考链接"></a>PhantomJS参考链接</h3><ul><li><a href="http://blog.csdn.net/libsyc/article/details/78199850" target="_blank" rel="noopener"> PhantomJS快速入门</a></li><li><a href="https://www.jianshu.com/p/9efe08a8e99e" target="_blank" rel="noopener">phantomjs2.1 初体验</a></li></ul><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><h3 id="什么是Selenium？"><a href="#什么是Selenium？" class="headerlink" title="什么是Selenium？"></a>什么是Selenium？</h3><ul><li>selenium 是一套完整的web应用程序测试系统，包含了测试的录制（selenium IDE）,编写及运行（Selenium Remote Control）和测试的并行处理（Selenium Grid）。Selenium的核心Selenium Core基于JsUnit，完全由JavaScript编写，因此可以用于任何支持JavaScript的浏览器上。selenium可以模拟真实浏览器，自动化测试工具，支持多种浏览器，爬虫中主要用来解决JavaScript渲染问题。</li></ul><h3 id="Selenium的使用"><a href="#Selenium的使用" class="headerlink" title="Selenium的使用"></a>Selenium的使用</h3><p>安装直接使用pip安装，详细使用详解参见参考链接，以下为简单使用介绍，即完全加载一个url（未考虑人工加载）<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// test.py</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"> </span><br><span class="line">driver = webdriver.PhantomJS(/path/to/PhantomJS.excuatable)    <span class="comment"># 获取浏览器对象</span></span><br><span class="line">driver.get(<span class="string">'http://www.baidu.com/'</span>)</span><br><span class="line"><span class="keyword">print</span> (driver.page_source)</span><br></pre></td></tr></table></figure></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.cnblogs.com/themost/p/6900852.html" target="_blank" rel="noopener">selenium用法详解</a></li></ul><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>不再赘述，直接丢出<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html" target="_blank" rel="noopener">文档</a><br><img src="http://wx1.sinaimg.cn/large/005B4KCngy1fo9ecirwzcj30jg0dqgnu.jpg" alt=""></p><h2 id="PhantomJS-Selenium-Scrapy"><a href="#PhantomJS-Selenium-Scrapy" class="headerlink" title="PhantomJS+Selenium+Scrapy"></a>PhantomJS+Selenium+Scrapy</h2><h3 id="在爬虫-py中的request加入meta"><a href="#在爬虫-py中的request加入meta" class="headerlink" title="在爬虫.py中的request加入meta"></a>在<code>爬虫.py</code>中的request加入meta</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.meta[&apos;PhantomJS&apos;] = True</span><br></pre></td></tr></table></figure></code></pre><h3 id="定义中间件"><a href="#定义中间件" class="headerlink" title="定义中间件"></a>定义中间件</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//JSMiddleware.py</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhantomJSMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(cls, request, spider)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> request.meta.has_key(<span class="string">'PhantomJS'</span>):</span><br><span class="line">            driver = webdriver.PhantomJS(executable_path=<span class="string">'/path/to/phantomjs'</span>) </span><br><span class="line">            driver.get(request.url)</span><br><span class="line">            content = driver.page_source.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            driver.quit()  </span><br><span class="line">            <span class="keyword">return</span> HtmlResponse(request.url, encoding=<span class="string">'utf-8'</span>, body=content, request=request)</span><br></pre></td></tr></table></figure><h3 id="settings中开启中间件"><a href="#settings中开启中间件" class="headerlink" title="settings中开启中间件"></a>settings中开启中间件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    &apos;scrapy.contrib.downloadermiddlewares.useragent.UserAgentMiddleware&apos;: None,</span><br><span class="line">    &apos;[爬虫名字].middlewares.PhantomJSMiddleware&apos;: 500,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改进-实现滚动刷新"><a href="#改进-实现滚动刷新" class="headerlink" title="改进-实现滚动刷新"></a>改进-实现滚动刷新</h3><ul><li><p>js代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scrollToBottom.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToBottom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Height = <span class="built_in">document</span>.body.clientHeight,  <span class="comment">//文本高度</span></span><br><span class="line">        screenHeight = <span class="built_in">window</span>.innerHeight,  <span class="comment">//屏幕高度</span></span><br><span class="line">        INTERVAL = <span class="number">100</span>,  <span class="comment">// 滚动动作之间的间隔时间</span></span><br><span class="line">        delta = <span class="number">500</span>,  <span class="comment">//每次滚动距离</span></span><br><span class="line">        curScrollTop = <span class="number">0</span>;    <span class="comment">//当前window.scrollTop 值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scroll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        curScrollTop = <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>,curScrollTop + delta);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> curHeight = curScrollTop + screenHeight;</span><br><span class="line">        <span class="keyword">if</span> (curHeight &gt;= Height)&#123;   <span class="comment">//滚动到页面底部时，结束滚动</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        scroll();</span><br><span class="line">    &#125;, INTERVAL)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新定义中间件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">js = <span class="string">"""</span></span><br><span class="line"><span class="string">// scrollToBottom.js</span></span><br><span class="line"><span class="string">function scrollToBottom() &#123;</span></span><br><span class="line"><span class="string">    ....</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">scrollToBottom()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhantomJSMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(cls, request, spider)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> request.meta.has_key(<span class="string">'PhantomJS'</span>):</span><br><span class="line">            driver = webdriver.PhantomJS() </span><br><span class="line">            driver.get(request.url)</span><br><span class="line"></span><br><span class="line">            driver.execute_script(js)   </span><br><span class="line">            time.sleep(<span class="number">1</span>)  <span class="comment"># 等待JS执行</span></span><br><span class="line"></span><br><span class="line">            content = driver.page_source.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            driver.quit()  </span><br><span class="line">            <span class="keyword">return</span> HtmlResponse(request.url, encoding=<span class="string">'utf-8'</span>, body=content, request=request)</span><br></pre></td></tr></table></figure></li></ul><p><code>time.sleep(&lt;wait_time&gt;)</code><br>为了解决等待JS执行的时间过短会导致爬取的页面靠近底部的图片没能加载，因为滚动函数还未执行到此处。所以需要预留一个稍微长一点的等待时间。</p><h2 id="实战参考链接"><a href="#实战参考链接" class="headerlink" title="实战参考链接"></a>实战参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/25511551" target="_blank" rel="noopener">在Scrapy框架下使用Selenium+PhantomJS</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;网络爬虫是数据挖掘的重要前提，通过网络爬虫可以自动化批量获取互联网上你需要的有用信息。爬虫于静态页面的爬取十分简单，但Ajax的出现实现了网页的局部动态加载，网页不需每次返回重复Html而只要局部刷新，简单的静态页面爬虫只能解析单一url而对它就无能为力了。PhantomJS+Selenium，再加上Scrapy爬虫框架，就可以实现动态爬虫。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://chengxiao19961022.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://chengxiao19961022.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="http://chengxiao19961022.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Web" scheme="http://chengxiao19961022.github.io/tags/Web/"/>
    
      <category term="javascript" scheme="http://chengxiao19961022.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://chengxiao19961022.github.io/2018/02/07/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://chengxiao19961022.github.io/2018/02/07/Markdown语法/</id>
    <published>2018-02-07T06:55:10.000Z</published>
    <updated>2018-03-01T11:05:26.891Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>习惯使用Markdown写博文，以下为Markdown基本语法。</p></div><a id="more"></a><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h1 id="这是-H1"><a href="#这是-H1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6"><a href="#这是-H6" class="headerlink" title="这是 H6"></a>这是 H6</h6><hr><h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><p>&copy;</p><hr><h1 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h1><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p><p>This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.</p><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><ul><li>Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li></ul><ol><li><p>This is a list item with two          paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</p><p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br>sit amet velit.</p></li><li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li></ol><ul><li><p>This is a list item with two paragraphs.</p><p>This is the second paragraph in the list item. You’re<br>only required to indent the first line. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit.</p></li><li><p>Another item in the same list.</p></li><li><p>A list item with a blockquote:</p><blockquote><p>This is a blockquote<br>inside a list item.</p></blockquote></li></ul><h1 id="代码（前面缩进）"><a href="#代码（前面缩进）" class="headerlink" title="代码（前面缩进）:"></a>代码（前面缩进）:</h1><pre><code>tell application &quot;Foo&quot;    beepend tell</code></pre><ul><li><p>Use the <code>printf()</code> function.</p></li><li><p>A backtick-delimited string in a code span: <code>`foo`</code></p></li><li><p>在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p></li></ul><p>Please don’t use any <a href="#">haa</a> tags.</p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><hr><hr><hr><hr><hr><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>Markdown 支持两种形式的链接语法：  <strong>行内式</strong> 和 <strong>参考式</strong> 两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><ul><li><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure><p>  会产生：</p>  <p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener"><br>  an example</a> inline link.</p><br>  <p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no<br>  title attribute.</p></li><li><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><p>  See my <a href="/about/">About</a> page for details.</p></li><li><p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [an example][id] reference-style link.</span><br></pre></td></tr></table></figure><ul><li><p>你也可以选择性地在两个方括号中间加上一个空格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [an example] [id] reference-style link.</span><br></pre></td></tr></table></figure><ul><li>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]: http://example.com/  &quot;Optional Title Here&quot;.</span><br></pre></td></tr></table></figure></li></ul><p>链接内容定义的形式为：</p><p>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字<br>接着一个冒号<br>接着一个以上的空格或制表符<br>接着链接的网址<br>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着<br>下面这三种链接的定义都是相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[foo]: http://example.com/  &quot;Optional Title Here&quot;</span><br><span class="line">[foo]: http://example.com/  &apos;Optional Title Here&apos;</span><br><span class="line">[foo]: http://example.com/  (Optional Title Here)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>  链接网址也可以用方括号包起来：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    [id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</span><br><span class="line">    你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</span><br><span class="line"></span><br><span class="line">[id]: http://example.com/longish/path/to/resource/here</span><br><span class="line">    &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>  网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p></li><li><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    [link text][a]</span><br><span class="line">[link text][A]</span><br></pre></td></tr></table></figure></li><li><p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>  然后定义链接内容：</p></li></ul><pre><code>    [Google]: http://google.com/由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：    Visit [Daring Fireball][] for more information.然后接着定义链接：    [Daring Fireball]: http://daringfireball.net/</code></pre><ul><li><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>  下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].</code></pre></li></ul><pre><code>      [1]: http://google.com/        &quot;Google&quot;      [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;      [3]: http://search.msn.com/    &quot;MSN Search&quot;如果改成用链接名称的方式写：    I get 10 times more traffic from [Google][] than from    [Yahoo][] or [MSN][].      [google]: http://google.com/        &quot;Google&quot;      [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;      [msn]:    http://search.msn.com/    &quot;MSN Search&quot;上面两种写法都会产生下面的 HTML。&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><ul><li><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>  参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p></li></ul><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p></li><li><p>行内式的图片语法看起来像是：</p><p>  <img src="/path/to/img.jpg" alt="Alt text"></p><p>  <img src="http://wx4.sinaimg.cn/large/005B4KCngy1fo7vxg76ddj311y0lck4l.jpg" alt="Alt text" title="使用微博相册"></p><p>  <img src="/path/to/img.jpg" alt="Alt text" title="Optional title"></p><ul><li><p>详细叙述如下：</p><p>一个惊叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。<br>参考式的图片语法则长得像这样：</p></li></ul></li></ul><p><img src="url/to/image" alt="Alt text" title="Optional title attribute"></p><ul><li>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</li></ul><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。</p><h1 id="z自动链接"><a href="#z自动链接" class="headerlink" title="z自动链接"></a>z自动链接</h1><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><p><a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#100;&#x64;&#114;&#x65;&#115;&#x73;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#97;&#100;&#x64;&#114;&#x65;&#115;&#x73;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a></p><h1 id="反斜杠插入特殊字符"><a href="#反斜杠插入特殊字符" class="headerlink" title="反斜杠插入特殊字符"></a>反斜杠插入特殊字符</h1><ul><li>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</li></ul><pre><code>\反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;习惯使用Markdown写博文，以下为Markdown基本语法。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="写作" scheme="http://chengxiao19961022.github.io/categories/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="Markdown" scheme="http://chengxiao19961022.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向工具</title>
    <link href="http://chengxiao19961022.github.io/2018/02/07/iOS%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://chengxiao19961022.github.io/2018/02/07/iOS逆向工具/</id>
    <published>2018-02-07T05:04:02.000Z</published>
    <updated>2018-03-01T11:05:26.920Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>iOS逆向常用的一些小工具</p></div><a id="more"></a><h2 id="砸壳工具dumpdecrypted的使用"><a href="#砸壳工具dumpdecrypted的使用" class="headerlink" title="砸壳工具dumpdecrypted的使用"></a>砸壳工具dumpdecrypted的使用</h2><ul><li>将<code>~/HackTools/dumpdecrypted-master/dumpdecrypted.dyli</code>b拷贝到TargetApp的<code>Documents</code>目录下</li><li>开始砸壳  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DYLD_INSERT_LIBRARIES=/path/to/dumpdecrypted.dylib /path/to/executable</span><br></pre></td></tr></table></figure></li></ul><h2 id="class-dump的使用"><a href="#class-dump的使用" class="headerlink" title="class-dump的使用"></a>class-dump的使用</h2><ul><li><p>在Terminal中进入App所在的目录，并用Xcode自带的plutil工具查看Info.plist中的“CFBundleExecutable”字段：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plutil -p Info.plist | grep CFBundleExecutable</span><br></pre></td></tr></table></figure></li><li><p>将头文件dump到指定文件夹下,且内容按名字排序</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class-dump -S -s -H 可执行文件 -o 文件夹</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;iOS逆向常用的一些小工具&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="iOS逆向" scheme="http://chengxiao19961022.github.io/categories/iOS%E9%80%86%E5%90%91/"/>
    
    
      <category term="Security" scheme="http://chengxiao19961022.github.io/tags/Security/"/>
    
      <category term="tool" scheme="http://chengxiao19961022.github.io/tags/tool/"/>
    
      <category term="iOS" scheme="http://chengxiao19961022.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac系统10.11之后/usr/bin 拷贝权限禁止解决方案</title>
    <link href="http://chengxiao19961022.github.io/2018/02/07/Mac%E7%B3%BB%E7%BB%9F10-11%E4%B9%8B%E5%90%8E-usr-bin-%E6%8B%B7%E8%B4%9D%E6%9D%83%E9%99%90%E7%A6%81%E6%AD%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://chengxiao19961022.github.io/2018/02/07/Mac系统10-11之后-usr-bin-拷贝权限禁止解决方案/</id>
    <published>2018-02-07T04:11:56.000Z</published>
    <updated>2018-03-01T11:05:26.891Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>Mac系统10.11之后/usr/bin 拷贝权限是禁止的，此时自定义的基础功能二进制文件使用困难，以下是比较好的解决方案，亲测有效！</p></div><a id="more"></a><h3 id="Mac系统10-11之后-usr-bin-拷贝权限禁止解决方案"><a href="#Mac系统10-11之后-usr-bin-拷贝权限禁止解决方案" class="headerlink" title="Mac系统10.11之后/usr/bin 拷贝权限禁止解决方案"></a>Mac系统10.11之后/usr/bin 拷贝权限禁止解决方案</h3><hr><ul><li>Step1：<br>在当前用户根目录下创建一个bin目录；<ul><li>命令：<code>mkdir ~/bin</code></li></ul></li></ul><ul><li><p>Step2：<br>把要拷贝 <strong>实现基础功能的二进制</strong> 如<code>class-dump</code>给拷贝到这个目录里，并赋予其可执行权限;</p><ul><li><p>命令一: <code>sudo cp /.../class-dump ~/bin</code><br> (/…/class-dump是指的class-dump的完整路径)</p></li><li><p>命令二: <code>chmod +x ~/bin/class-dump</code></p></li></ul></li></ul><ul><li><p>Step3：打开~/.bash_profile文件，配置环境变量</p><ul><li>命令一: <code>vi ~/.bash_profile</code></li><li>命令二: 按 <code>i</code> 键进入编辑模式，写入下面一行代码， <code>export PATH=$HOME/bin/:$PATH</code>    按ESC然后输入冒号(shift+;),然后输入<code>wq</code>,退出即可。</li></ul></li><li><p>Step4：在Terminal中执行source命令(每次开机后都要重新source)</p><ul><li>命令:<code>source ~/.bash_profile</code><br>完成以上步骤，在terminal中执行class-dump实验一下，应该就可以了。</li></ul></li></ul><ul><li><h3 id="其他方案：修改系统权限"><a href="#其他方案：修改系统权限" class="headerlink" title="其他方案：修改系统权限"></a>其他方案：修改系统权限</h3><ul><li><p>关闭 Rootless。重启按住 <code>Command+R</code>，进入恢复模式，打开Terminal。</p><p>  <code>csrutil disable</code></p><p>  重启即可。如果要恢复默认，那么</p><p>  <code>csrutil enable</code></p></li><li><p>附录:</p><p>  csrutil命令参数格式：</p><pre><code>csrutil enable [--without kext | fs | debug | dtrace | nvram][--no-internal]</code></pre><p>  禁用：<code>csrutil disable</code></p><p>  （等同于<code>csrutil enable --without kext --without fs --without debug --without dtrace --without nvram</code>）</p><p>  其中各个开关，意义如下：</p><p>  <code>B0: [kext]</code> </p><p>  允许加载不受信任的kext（与已被废除的kext-dev-mode=1等效）</p><p>  <code>B1: [fs]</code> 解锁文件系统限制</p><p>  <code>B2: [debug]</code> 允许task_for_pid()调用<br>  B3: [n/a] 允许内核调试 （官方的csrutil工具无法设置此位）</p><p>  <code>B4: [internal]</code> Apple内部保留位（csrutil默认会设置此位，实际不会起作用。设置与否均可）</p><p>  <code>B5: [dtrace]</code> 解锁dtrace限制</p><p>  <code>B6: [nvram]</code><br>  解锁NVRAM限制</p><p>  <code>B7: [n/a]</code><br>  允许设备配置（新增，具体作用暂时未确定）</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Mac系统10.11之后/usr/bin 拷贝权限是禁止的，此时自定义的基础功能二进制文件使用困难，以下是比较好的解决方案，亲测有效！&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://chengxiao19961022.github.io/categories/Mac/"/>
    
    
      <category term="tips" scheme="http://chengxiao19961022.github.io/tags/tips/"/>
    
      <category term="unix" scheme="http://chengxiao19961022.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>lldb+debugserver速查表</title>
    <link href="http://chengxiao19961022.github.io/2018/02/07/lldb-debugserver%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <id>http://chengxiao19961022.github.io/2018/02/07/lldb-debugserver速查表/</id>
    <published>2018-02-07T03:59:48.000Z</published>
    <updated>2018-03-01T11:05:26.920Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>lldb+debugserver是iOS逆向的一个重要的工具，用于动态调试，包括寻找有用api、寻找有用信息等等，结合IDA构成iOS逆向的大半江山。以下是我的速查表。</p></div><a id="more"></a><blockquote><h4 id="一、准备阶段"><a href="#一、准备阶段" class="headerlink" title="一、准备阶段"></a>一、准备阶段</h4></blockquote><ul><li><h4 id="iPhone端开启监听"><a href="#iPhone端开启监听" class="headerlink" title="iPhone端开启监听"></a>iPhone端开启监听</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">debugserver 192.168.3.242:8888 -a &quot;SpringBoard&quot;</span><br><span class="line"></span><br><span class="line">debugserver -x backboard 192.168.3.242:8888 /Applications/AppStore.app/AppStore</span><br></pre></td></tr></table></figure></li><li><h4 id="lldb连接iPhone"><a href="#lldb连接iPhone" class="headerlink" title="lldb连接iPhone"></a>lldb连接iPhone</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process connect connect://192.168.3.235:8888</span><br></pre></td></tr></table></figure></li><li><h4 id="cycript连接"><a href="#cycript连接" class="headerlink" title="cycript连接"></a>cycript连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep /Applications(位置)查看当前可执行程序</span><br><span class="line"></span><br><span class="line">cycript -p 可执行程序</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><h4 id="二、寻找思路"><a href="#二、寻找思路" class="headerlink" title="二、寻找思路"></a>二、寻找思路</h4></blockquote><ul><li><h4 id="列出当前镜像"><a href="#列出当前镜像" class="headerlink" title="列出当前镜像"></a>列出当前镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image list -o -f</span><br></pre></td></tr></table></figure></li><li><h4 id="列出调用栈信息"><a href="#列出调用栈信息" class="headerlink" title="列出调用栈信息"></a>列出调用栈信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thread backtrace</span><br><span class="line"></span><br><span class="line">bt [all]</span><br><span class="line"></span><br><span class="line">sbt</span><br></pre></td></tr></table></figure></li><li><h4 id="找到view对应的controller"><a href="#找到view对应的controller" class="headerlink" title="找到view对应的controller"></a>找到view对应的controller</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先找到view界面的地址（easy），通过调用</span><br><span class="line">[#0x17f92890 nextResponder]找到controller的名字</span><br><span class="line">通过lldb po [controller名 _ivarDescription]和[controller名 _shortMethodDescription]</span><br><span class="line">看方法和属性</span><br><span class="line">对方法和属性所在内存下断点</span><br><span class="line">读取寄存器信息，获取寄存器存放的对象</span><br></pre></td></tr></table></figure></li><li><h4 id="下断点-通过help-br查看"><a href="#下断点-通过help-br查看" class="headerlink" title="下断点(通过help br查看)"></a>下断点(通过help br查看)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b function</span><br><span class="line"></span><br><span class="line">br s -a address</span><br><span class="line"></span><br><span class="line">br s -a ASLR+offset</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><h4 id="调试下一步"><a href="#调试下一步" class="headerlink" title="调试下一步"></a>调试下一步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">br l（断点列表）</span><br><span class="line"></span><br><span class="line">br dis 序号（不加为全）</span><br><span class="line"></span><br><span class="line">br en 序号</span><br><span class="line"></span><br><span class="line">br del 序号</span><br><span class="line"></span><br><span class="line">c(下一个断点)</span><br><span class="line"></span><br><span class="line">s   源码级别单步执行，遇到子函数则进入</span><br><span class="line"></span><br><span class="line">si  单步执行，遇到子函数则进入</span><br><span class="line"></span><br><span class="line">n 源码级别单步执行，遇到子函数不进入，直接步过</span><br><span class="line"></span><br><span class="line">ni 单步执行，遇到子函数不进入，直接步过</span><br><span class="line"></span><br><span class="line">finish/f  退出子函数</span><br><span class="line"></span><br><span class="line">br com add 序号</span><br><span class="line">（执行这条命令后，LLDB会要求我们设置一系列</span><br><span class="line">指令，以“DONE”结束，）</span><br></pre></td></tr></table></figure></li><li><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reg r -a/-A...</span><br><span class="line"></span><br><span class="line">register read -a/-A...</span><br><span class="line"></span><br><span class="line">register write 寄存器 值 （将寄存器赋值）reg w</span><br></pre></td></tr></table></figure></li><li><h4 id="关于打印"><a href="#关于打印" class="headerlink" title="关于打印"></a>关于打印</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">po或p $寄存器        （打印寄存器的值）</span><br><span class="line"></span><br><span class="line">po [$寄存器 或类名  _shortMethodDescription]</span><br><span class="line"></span><br><span class="line">po [$寄存器 或类名  _ivarDescription]</span><br><span class="line">然后通过cycript进行调用，或者lldb本身可以调用：</span><br><span class="line">po [$寄存器 或类名 method]</span><br><span class="line"></span><br><span class="line">po [view subviews]</span><br><span class="line"></span><br><span class="line">po [view superviews]</span><br><span class="line"></span><br><span class="line">po [$r0（寄存器、地址） detailTextLabel]</span><br><span class="line"></span><br><span class="line">po [$r2 propertyForKey:@&quot;set&quot;]拿到setter方法</span><br><span class="line"></span><br><span class="line">po [$r2 propertyForKey:@&quot;get&quot;]拿到getter方法</span><br><span class="line"></span><br><span class="line">po[$r2 allTargets]拿到调用者，用于写在函数前面</span><br><span class="line">拿到了调用者也相当于拿到了类，可以用method或class-dump定位方法和属性，用ida定位方法，进入方法内部作进一步分析，结合lldb再做断点调试，看寄存器的method，看target和寄存器存放的形参。</span><br><span class="line"></span><br><span class="line">po [button allControlEvents]拿到部分形参</span><br><span class="line"></span><br><span class="line">[button actionsForTarget:#0x14609d00</span><br><span class="line">forControlEvent:64]</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>通过help ..查看详细</p><p>  “函数的前4个参数存放在R0到R3中，其他参数<br>存放在栈中；返回值放在R0中。”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; debugserver -x backboard 192.168.3.183:8888 /var/containers/Bundle/Application/A910BD37-4684-49A6-97A7-924891F98D90/WYParking.app/WYParking</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;lldb+debugserver是iOS逆向的一个重要的工具，用于动态调试，包括寻找有用api、寻找有用信息等等，结合IDA构成iOS逆向的大半江山。以下是我的速查表。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="iOS逆向" scheme="http://chengxiao19961022.github.io/categories/iOS%E9%80%86%E5%90%91/"/>
    
    
      <category term="Security" scheme="http://chengxiao19961022.github.io/tags/Security/"/>
    
      <category term="tool" scheme="http://chengxiao19961022.github.io/tags/tool/"/>
    
      <category term="iOS" scheme="http://chengxiao19961022.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>cuckoo沙箱问题列表</title>
    <link href="http://chengxiao19961022.github.io/2018/01/10/cuckoo%E6%B2%99%E7%AE%B1%E9%97%AE%E9%A2%98%E5%88%97%E8%A1%A8/"/>
    <id>http://chengxiao19961022.github.io/2018/01/10/cuckoo沙箱问题列表/</id>
    <published>2018-01-10T12:07:00.000Z</published>
    <updated>2018-03-01T11:05:26.912Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note info"><p>cuckoo sandbox是近年来一款非常好的动态检测开源工具，然而最新版本不支持py3，对中文不友好等问题凸显，以下是使用cuckoo沙箱遇到的问题汇总 </p></div><a id="more"></a><h2 id="解决中文适配问题"><a href="#解决中文适配问题" class="headerlink" title="解决中文适配问题"></a>解决中文适配问题</h2><ul><li>如下文件需指定编码 : <code>#coding:utf-8</code><ul><li><code>.cuckoo-&gt;analyzer-&gt;windows-&gt;analyzer.py</code></li><li><code>.cuckoo-&gt;analyzer-&gt;windows-&gt;lib-&gt;common-&gt;abstracts.py</code></li><li><code>.cuckoo-&gt;analyzer-&gt;windows-&gt;mudules-&gt;auxilary-&gt;[all]</code></li><li><code>.cuckoo-&gt;analyzer-&gt;windows-&gt;modules-&gt;packages-&gt;[all]</code></li><li>其他涉及打印、日志、执行包含中文路径文件</li></ul></li><li>如下文件修改：<ul><li><code>.cuckoo-&gt;analyzer-&gt;windows-&gt;lib-&gt;common-&gt;abstracts.py</code>中 <code>path = path.decode(&#39;utf-8&#39;)</code></li><li><code>.cuckoo-&gt;analyzer-&gt;windows-&gt;mudules-&gt;auxilary-&gt;human.py</code>中指定需要识别中文</li><li>其他涉及打印、日志、执行包含中文路径文件中中文字符串</li></ul></li><li><code>sudo cuckoo submit --package sp -o path=&quot;C://Program Files//Notepad加加//notepad++.exe&quot; test.bat</code><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2></li><li><p>mongodb在重启后，需要重新建立启动文件夹</p><ul><li>sudo rm -rf /data</li><li>sudo mkdir -p /data/db</li><li>sudo mongod</li><li>(另一终端)sudo mongo</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;cuckoo sandbox是近年来一款非常好的动态检测开源工具，然而最新版本不支持py3，对中文不友好等问题凸显，以下是使用cuckoo沙箱遇到的问题汇总 &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="PC应用检测" scheme="http://chengxiao19961022.github.io/categories/PC%E5%BA%94%E7%94%A8%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="cuckoo" scheme="http://chengxiao19961022.github.io/tags/cuckoo/"/>
    
      <category term="Python" scheme="http://chengxiao19961022.github.io/tags/Python/"/>
    
      <category term="Security" scheme="http://chengxiao19961022.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>微信跳一跳辅助(转)</title>
    <link href="http://chengxiao19961022.github.io/2018/01/10/%EF%BC%88%E8%BD%AC%EF%BC%89%E5%BE%AE%E4%BF%A1%E8%B7%B3%E4%B8%80%E8%B7%B3%E8%BE%85%E5%8A%A9/"/>
    <id>http://chengxiao19961022.github.io/2018/01/10/（转）微信跳一跳辅助/</id>
    <published>2018-01-10T05:55:34.000Z</published>
    <updated>2018-03-01T11:05:26.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="教你用-Python-来玩微信跳一跳"><a href="#教你用-Python-来玩微信跳一跳" class="headerlink" title="教你用 Python 来玩微信跳一跳"></a>教你用 Python 来玩微信跳一跳</h1><h2 id="游戏模式"><a href="#游戏模式" class="headerlink" title="游戏模式"></a>游戏模式</h2><div class="note info"><p>2017 年 12 月 28 日下午，微信发布了 6.6.1 版本，加入了「小游戏」功能，并提供了官方 DEMO「跳一跳」。这是一个 2.5D 插画风格的益智游戏，玩家可以通过按压屏幕时间的长短来控制这个「小人」跳跃的距离。分数越高，那么在好友排行榜更加靠前。通过 Python 脚本自动运行，让你轻松霸榜。 </p></div><a id="more"></a><p><img src="https://github.com/wangshub/wechat_jump_game/blob/master/resource/image/jump.gif" alt=""></p><p>可能刚开始上手的时候，因为时间距离之间的关系把握不恰当，只能跳出几个就掉到了台子下面。<strong>如果能利用图像识别精确测量出起始和目标点之间测距离，就可以估计按压的时间来精确跳跃。</strong></p><h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><ol><li><p>将手机点击到《跳一跳》小程序界面</p></li><li><p>用 ADB 工具获取当前手机截图，并用 ADB 将截图 pull 上来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/autojump.png</span><br><span class="line">adb pull /sdcard/autojump.png .</span><br></pre></td></tr></table></figure></li><li><p>计算按压时间</p><ul><li>手动版：用 Matplotlib 显示截图，用鼠标先点击起始点位置，然后点击目标位置，计算像素距离；</li><li>自动版：靠棋子的颜色来识别棋子，靠底色和方块的色差来识别棋盘；</li></ul></li><li><p>用 ADB 工具点击屏幕蓄力一跳</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input swipe x y x y time(ms)</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><ul><li><p>方法 1：使用 app 进行一键操作。目前已适配 Win10 64位/macOS 平台 Android 一键操作，下载请移步 <a href="https://github.com/wangshub/wechat_jump_game/releases" target="_blank" rel="noopener">STOP_jump</a></p></li><li><p>方法 2：相关软件工具安装和使用步骤请参考 <a href="https://github.com/wangshub/wechat_jump_game/wiki/Android-%E5%92%8C-iOS-%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4" target="_blank" rel="noopener">Android 和 iOS 操作步骤</a></p></li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul><li>详见 <a href="https://github.com/wangshub/wechat_jump_game/wiki/FAQ" target="_blank" rel="noopener">Wiki-FAQ</a></li></ul><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>详见 <a href="https://github.com/wangshub/wechat_jump_game/blob/master/changelog.md" target="_blank" rel="noopener">changelog</a></li></ul><h2 id="开发者列表"><a href="#开发者列表" class="headerlink" title="开发者列表"></a>开发者列表</h2><ul><li>详见 <a href="https://github.com/wangshub/wechat_jump_game/graphs/contributors" target="_blank" rel="noopener">contributors</a></li></ul><h2 id="QQ-交流"><a href="#QQ-交流" class="headerlink" title="QQ 交流"></a>QQ 交流</h2><ul><li>314659953 (1000人 已满)</li><li>176740763 (500人 已满)</li><li>89213434 (2000人 已满)</li><li>64389940 (2000人)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;教你用-Python-来玩微信跳一跳&quot;&gt;&lt;a href=&quot;#教你用-Python-来玩微信跳一跳&quot; class=&quot;headerlink&quot; title=&quot;教你用 Python 来玩微信跳一跳&quot;&gt;&lt;/a&gt;教你用 Python 来玩微信跳一跳&lt;/h1&gt;&lt;h2 id=&quot;游戏模式&quot;&gt;&lt;a href=&quot;#游戏模式&quot; class=&quot;headerlink&quot; title=&quot;游戏模式&quot;&gt;&lt;/a&gt;游戏模式&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;2017 年 12 月 28 日下午，微信发布了 6.6.1 版本，加入了「小游戏」功能，并提供了官方 DEMO「跳一跳」。这是一个 2.5D 插画风格的益智游戏，玩家可以通过按压屏幕时间的长短来控制这个「小人」跳跃的距离。分数越高，那么在好友排行榜更加靠前。通过 Python 脚本自动运行，让你轻松霸榜。 &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="安卓逆向" scheme="http://chengxiao19961022.github.io/categories/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
    
      <category term="Python" scheme="http://chengxiao19961022.github.io/tags/Python/"/>
    
      <category term="Games" scheme="http://chengxiao19961022.github.io/tags/Games/"/>
    
      <category term="CV" scheme="http://chengxiao19961022.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>CppPrimer5_ch01_answers</title>
    <link href="http://chengxiao19961022.github.io/2018/01/08/CppPrimer5-ch01-answers/"/>
    <id>http://chengxiao19961022.github.io/2018/01/08/CppPrimer5-ch01-answers/</id>
    <published>2018-01-08T11:51:28.000Z</published>
    <updated>2018-03-01T11:05:26.875Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note info"><p>《CppPrimer5》第一章课后答案</p></div><a id="more"></a><h2 id="Exercise-1-1"><a href="#Exercise-1-1" class="headerlink" title="Exercise 1.1"></a>Exercise 1.1</h2><blockquote><p>Review the documentation for your compiler and determine what file naming convention it uses. Compile and run the main program from page 2.</p></blockquote><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p><img src="https://db.tt/XGeGsg7O" alt="windows"></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><img src="https://db.tt/2xKWuztU" alt="Linux"></p><h2 id="Exercise-1-2"><a href="#Exercise-1-2" class="headerlink" title="Exercise 1.2"></a>Exercise 1.2</h2><blockquote><p>Exercise 1.2: Change the program to return -1. A return value of -1 is often treated as an indicator that the program failed. Recompile and rerun your program to see how your system treats a failure indicator from main.</p></blockquote><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><p><img src="https://db.tt/DIJd9eZb" alt="windows"></p><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><p><img src="https://db.tt/lhzXhpCt" alt="linux"></p><p><strong>255</strong>? why? please look at <a href="http://www.tldp.org/LDP/abs/html/exitcodes.html" target="_blank" rel="noopener">this</a></p><h2 id="Exercise-1-3"><a href="#Exercise-1-3" class="headerlink" title="Exercise 1.3"></a>Exercise 1.3</h2><blockquote><p>Write a program to print Hello, World on the standard output.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exercise-1-4"><a href="#Exercise-1-4" class="headerlink" title="Exercise 1.4"></a>Exercise 1.4</h2><blockquote><p>Our program used the addition operator, +, to add two numbers. Write a program that uses the multiplication operator, *, to print the product instead.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter two numbers:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The product of "</span> &lt;&lt; v1 &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2</span><br><span class="line">  &lt;&lt; <span class="string">" is "</span> &lt;&lt; v1 * v2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exercise-1-5"><a href="#Exercise-1-5" class="headerlink" title="Exercise 1.5"></a>Exercise 1.5</h2><blockquote><p>We wrote the output in one large statement. Rewrite the program to use a separate statement to print each operand.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter two numbers:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">int</span> v1 = <span class="number">0</span>, v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The product of "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v1;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" and "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v2;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" is "</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v1 * v2;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Exercise-1-6"><a href="#Exercise-1-6" class="headerlink" title="Exercise 1.6"></a>Exercise 1.6</h2><blockquote><p>Explain whether the following program fragment is legal.</p></blockquote><p>It’s illegal.</p><p><strong>[Error] expected primary-expression before ‘&lt;&lt;’ token</strong></p><p>Fixed it: remove the spare semicolons.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"The sum of "</span> &lt;&lt; v1</span><br><span class="line">          &lt;&lt; <span class="string">" and "</span> &lt;&lt; v2</span><br><span class="line">          &lt;&lt; <span class="string">" is "</span> &lt;&lt; v1 + v2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="Exercise-1-7"><a href="#Exercise-1-7" class="headerlink" title="Exercise 1.7"></a>Exercise 1.7</h2><blockquote><p>Compile a program that has incorrectly nested comments.</p></blockquote><p>Example:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* comment pairs /* */</span> cannot nest.</span><br><span class="line">* ''cannot nest'' is considered source code,</span><br><span class="line">* as is the rest of the program</span><br><span class="line">*/</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Compiled result(g++):</p><p><img src="https://db.tt/CqQKu8GQ" alt="result"></p><h2 id="Exercise-1-8"><a href="#Exercise-1-8" class="headerlink" title="Exercise 1.8"></a>Exercise 1.8</h2><blockquote><p>Indicate which, if any, of the following output statements are legal:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"/*"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"*/"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="comment">/* "*/</span><span class="string">" */;</span></span><br><span class="line"><span class="string">std::cout &lt;&lt; /* "</span>*/<span class="string">" /* "</span><span class="comment">/*" */</span>;</span><br></pre></td></tr></table></figure></p><p>After you’ve predicted what will happen, test your answers by compiling a<br>program with each of these statements. Correct any errors you encounter.</p></blockquote><p>Compiled result(g++):</p><p><img src="https://db.tt/mrL9hDCS" alt="result"></p><p>Corrected? just added a quote:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"/*"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"*/"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="comment">/* "*/</span><span class="string">" */"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="comment">/* "*/</span><span class="string">" /* "</span><span class="comment">/*" */</span>;</span><br></pre></td></tr></table></figure></p><p>Output:</p><pre><code>/**/ */ /*</code></pre><h2 id="Exercise-1-9"><a href="#Exercise-1-9" class="headerlink" title="Exercise 1.9"></a><a href="ex1_9.cpp">Exercise 1.9</a></h2><h2 id="Exercise-1-10"><a href="#Exercise-1-10" class="headerlink" title="Exercise 1.10"></a><a href="ex1_10.cpp">Exercise 1.10</a></h2><h2 id="Exercise-1-11"><a href="#Exercise-1-11" class="headerlink" title="Exercise 1.11"></a><a href="ex1_11.cpp">Exercise 1.11</a></h2><h2 id="Exercise-1-12"><a href="#Exercise-1-12" class="headerlink" title="Exercise 1.12"></a>Exercise 1.12</h2><blockquote><p>What does the following for loop do? What is the final value<br>of sum?<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">-100</span>; i &lt;= <span class="number">100</span>; ++i)</span><br><span class="line">sum += i;</span><br></pre></td></tr></table></figure></p></blockquote><p>the loop sums the numbers from -100 to 100. the final value of sum is zero.</p><h2 id="Exercise-1-13"><a href="#Exercise-1-13" class="headerlink" title="Exercise 1.13"></a>Exercise 1.13</h2><blockquote><p>Rewrite the exercises from § 1.4.1 (p. 13) using for loops.</p></blockquote><p>Ex1.9:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">50</span>; i&lt;=<span class="number">100</span>; ++i)</span><br><span class="line">      sum += i;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the sum is: "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Ex1.10:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">10</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Ex1.11:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> val_small = <span class="number">0</span>, val_big = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"please input two integers:"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; val_small &gt;&gt; val_big;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (val_small &gt; val_big)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = val_small;</span><br><span class="line">    val_small = val_big;</span><br><span class="line">    val_big = tmp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=val_small; i&lt;=val_big; ++i)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Exercise-1-14"><a href="#Exercise-1-14" class="headerlink" title="Exercise 1.14"></a>Exercise 1.14</h2><blockquote><p>Compare and contrast the loops that used a for with those<br>using a while. Are there advantages or disadvantages to using either form?</p></blockquote><p>If you need a pattern which is using a variable in a condition and incrementing that variable in the<br>body. You should use <code>for</code> loop. Else the <code>while</code> loop is more simple.</p><p>Want to know more? look at <a href="http://stackoverflow.com/questions/1600282/guideline-while-vs-for" target="_blank" rel="noopener">this</a></p><h2 id="Exercise-1-15"><a href="#Exercise-1-15" class="headerlink" title="Exercise 1.15"></a>Exercise 1.15</h2><blockquote><p>Write programs that contain the common errors discussed in<br>the box on page 16. Familiarize yourself with the messages the compiler<br>generates.</p></blockquote><p><strong>JUST READ IT!</strong></p><h2 id="Exercise-1-16"><a href="#Exercise-1-16" class="headerlink" title="Exercise 1.16"></a>Exercise 1.16</h2><blockquote><p>Write your own version of a program that prints the sum of a set of integers read from cin.</p></blockquote><p>Many people confused about this exercise, such as <a href="http://www.cplusplus.com/forum/beginner/104169/" target="_blank" rel="noopener">this</a> and <a href="http://stackoverflow.com/questions/17841424/how-to-write-this-while-loop-as-a-for-loop" target="_blank" rel="noopener">this</a>.</p><p>In my opinion, the exercise aim to write the program without “<strong>END-OF-FILE</strong>“.</p><p><strong>BUT</strong>, the <a href="http://www.cplusplus.com/forum/beginner/104169/#msg561450" target="_blank" rel="noopener">code</a> in first link is not correct.</p><p>The following are my own version:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> limit = <span class="number">0</span>, sum = <span class="number">0</span>, value = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"How many integers would you like to enter?"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; limit;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assume we don't know what is EOF(End-Of-File).</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; value &amp;&amp; (--limit != <span class="number">0</span>))</span><br><span class="line">    sum += value;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; sum + value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Watch out for “sum + value” in the <code>cout</code> line.</p><h2 id="Exercise-1-17"><a href="#Exercise-1-17" class="headerlink" title="Exercise 1.17"></a>Exercise 1.17</h2><blockquote><p>What happens in the program presented in this section if the input values are all equal? What if there are no duplicated values?</p></blockquote><p>If the input values are all equal, it will print a line which shows the count of the number you input.</p><p>If there are no duplicated values, when different values input, a new line will be printed if you click <code>Enter</code>.</p><h2 id="Exercise-1-18"><a href="#Exercise-1-18" class="headerlink" title="Exercise 1.18"></a>Exercise 1.18</h2><blockquote><p>Compile and run the program from this section giving it only equal values as input. Run it again giving it values in which no number is repeated.</p></blockquote><p><img src="https://db.tt/F38zExnq" alt="run"></p><h2 id="Exercise-1-19"><a href="#Exercise-1-19" class="headerlink" title="Exercise 1.19"></a>Exercise 1.19</h2><blockquote><p>Revise the program you wrote for the exercises in § 1.4.1 (p. 13) that printed a range of numbers so that it handles input in which the first number is smaller than the second.</p></blockquote><p>Yes, we should use <code>if</code> to judge which is bigger.</p><p>review this <a href="https://github.com/pezy/Cpp-Primer/blob/master/ch01/ex1_11.cpp" target="_blank" rel="noopener">code</a></p><h2 id="Exercise-1-20"><a href="#Exercise-1-20" class="headerlink" title="Exercise 1.20"></a>Exercise 1.20</h2><blockquote><p><a href="http://www.informit.com/title/032174113" target="_blank" rel="noopener">http://www.informit.com/title/032174113</a> contains a copy of Sales_item.h in the Chapter 1 code directory. Copy that file to your working directory. Use it to write a program that reads a set of book sales transactions, writing each transaction to the standard output.</p></blockquote><p><a href="ex1_20.cpp">Here</a> is the code.</p><p><strong>You need to enable C++11 support in your compiler.<br>With GCC and Clang, this can be done with the <code>-std=c++11</code> option.</strong></p><p><strong>(Never say it again.)</strong></p><p>How to test it? use the <code>book.txt</code> in <code>data</code> folder. And do it like this:</p><p><img src="https://db.tt/fm8iHtkF" alt="run"></p><h2 id="Exercise-1-21"><a href="#Exercise-1-21" class="headerlink" title="Exercise 1.21"></a>Exercise 1.21</h2><blockquote><p>Write a program that reads two Sales_item objects that have the same ISBN and produces their sum.</p></blockquote><p>The program should check whether the objects have the same ISBN.(Have a look at 1.5.2, surprise!)</p><p><a href="ex1_21.cpp">Code</a></p><h2 id="Exercise-1-22"><a href="#Exercise-1-22" class="headerlink" title="Exercise 1.22"></a>Exercise 1.22</h2><blockquote><p>Write a program that reads several transactions for the same ISBN. Write the sum of all the transactions that were read.</p></blockquote><p>Tips: this program will appear in the section 1.6.</p><p><a href="ex1_22.cpp">Here</a> is the code.</p><p><img src="https://db.tt/UlkuvpAS" alt="run"></p><h2 id="Exercise-1-23"><a href="#Exercise-1-23" class="headerlink" title="Exercise 1.23"></a>Exercise 1.23</h2><blockquote><p>Write a program that reads several transactions and counts<br>how many transactions occur for each ISBN.</p></blockquote><p>Tip: please review the <code>1.4.4</code>.</p><p><a href="ex1_23.cpp">Here</a> is the code.</p><h2 id="Exercise-1-24"><a href="#Exercise-1-24" class="headerlink" title="Exercise 1.24"></a>Exercise 1.24</h2><blockquote><p>Test the previous program by giving multiple transactions<br>representing multiple ISBNs. The records for each ISBN should be grouped<br>together.</p></blockquote><p>You can use data/book.txt as the records.</p><p><img src="https://db.tt/EeDI7lvN" alt="run"></p><h2 id="Exercise-1-25"><a href="#Exercise-1-25" class="headerlink" title="Exercise 1.25"></a>Exercise 1.25</h2><blockquote><p>Using the Sales_item.h header from the Web site,<br>compile and execute the bookstore program presented in this section.</p></blockquote><p>It is the same as Exercise 1.22.</p><p><img src="https://db.tt/C6OOPuzA" alt="run"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;《CppPrimer5》第一章课后答案&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://chengxiao19961022.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="http://chengxiao19961022.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://chengxiao19961022.github.io/2013/07/13/hello-world/"/>
    <id>http://chengxiao19961022.github.io/2013/07/13/hello-world/</id>
    <published>2013-07-13T12:46:25.000Z</published>
    <updated>2018-03-01T11:05:26.916Z</updated>
    
    <content type="html"><![CDATA[<hr><div class="note info"><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p></div><a id="more"></a><blockquote class="blockquote-center"><p>blah blah blah </p></blockquote><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://chengxiao19961022.github.io/categories/Diary/"/>
    
    
      <category term="Markdown" scheme="http://chengxiao19961022.github.io/tags/Markdown/"/>
    
      <category term="Guide" scheme="http://chengxiao19961022.github.io/tags/Guide/"/>
    
  </entry>
  
</feed>
